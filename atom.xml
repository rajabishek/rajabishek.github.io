<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Raj Abishek</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rajabishek.com/"/>
  <updated>2017-10-29T11:43:19.000Z</updated>
  <id>http://rajabishek.com/</id>
  
  <author>
    <name>Raj Abishek</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OLA Cabs - Designing a Simpler Cab Booking Experience</title>
    <link href="http://rajabishek.com/2017/Better-cab-booking-experience/"/>
    <id>http://rajabishek.com/2017/Better-cab-booking-experience/</id>
    <published>2017-10-29T09:45:51.000Z</published>
    <updated>2017-10-29T11:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Project-details"><a href="#Project-details" class="headerlink" title="Project details"></a>Project details</h2><p>Recently I found my colleague Sanjay, booking a cab for his mother. I wasn’t shocked when he told me that his mom doesn’t book a cab by herself. Sanjay’s mom owns a smartphone and is comfortable using apps like youtube and whatsapp. When she can youtube and whatsapp, how is that she is finding it difficult to book a cab?</p>
<p>As a designer I wanted to fix this. My instinct told me, if the design could be more user centered, Sanjay’s mom should be able to make a booking by herself.</p>
<h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>Designing a simpler cab booking experience with minimum friction to allow many such Indian mom’s to book a cab without anyone’s help.</p>
<a id="more"></a>
<h2 id="Things-to-learn"><a href="#Things-to-learn" class="headerlink" title="Things to learn"></a>Things to learn</h2><p>As a first step I started writing down on a higher level some of the things that I wanted to learn from user interviews.</p>
<ul>
<li>Where are users struggling with the current app to make a booking</li>
<li>Why aren’t still many people confident enough to make a booking by themselves</li>
<li>For limited mobile users, what are the basic interactions they are familiar with.</li>
</ul>
<h2 id="Picking-users-for-interviews"><a href="#Picking-users-for-interviews" class="headerlink" title="Picking users for interviews"></a>Picking users for interviews</h2><p>This wasn’t as difficult as I assumed it to be. Since OLA is a popular cab booking app used in India, I was able to find quite a number of users without much difficulty. I wanted to go out of my circle to interview different kinds of users, but die to the lack of time I just interviewed people inside my circle whom I already knew as OLA users.</p>
<p>I decided to do multiple interviews instead of a predefined fixed number of them and settle down when I had enough learnings with me.</p>
<p>I interviewed around 10 people on Saturday and each interview on an average lasted for around 15-20 minutes. 2 were done on phone calls, while the rest of them was done in person. I prefer doing in person interviews especially for these kinds of tasks where users are easily accessible.</p>
<h2 id="Known-Unknowns"><a href="#Known-Unknowns" class="headerlink" title="Known Unknowns"></a>Known Unknowns</h2><p>Based on the things I wanted to learn, I started writing down questions that I wanted to ask during the interviews. The actual questions that we asked slightly varied from one person to another based on their response. But in general these were the kind of questions that were asked:</p>
<ul>
<li>Can you introduce yourself? What do you do? Where do you work?</li>
<li>Which cab booking service do you use?</li>
<li>When is the last time you booked a cab?</li>
<li>What device do you use ? Do you have mobile data every time?</li>
<li>Do you feel that with OLA app, the cab booking is time consuming?</li>
<li>Do you prefer using OLA every time?</li>
<li>When do you end up not using OLA cabs? </li>
<li>Can you take me to a specific point in time and narrate this incident for me?</li>
</ul>
<p>One nice trick that I employed during user interviews was to use more of when rather than why. Asking when resulted in users taking me to a specific point in time, describing the incident as a story that gave me more context into the problems they had. The more stories they had to share, I was able to discover the chains of cause and effect leading up to usage on the demand side(what users actually needed) to build the right things on the supply side(the solution that I built for them).</p>
<h2 id="Unknown-Unknowns"><a href="#Unknown-Unknowns" class="headerlink" title="Unknown Unknowns"></a>Unknown Unknowns</h2><p>I also kept some space at the end of every interview to ask some open ended questions that to discover some unknown unknowns too. Questions like:</p>
<ul>
<li>Is there anything else that you would like to tell me?</li>
<li>Is there something I should have asked but I didn’t?</li>
</ul>
<h2 id="User-Personas"><a href="#User-Personas" class="headerlink" title="User Personas"></a>User Personas</h2><p>Personally I am not a very big fan of user personas but I decided to go ahead with this as it gives a sense of consistency while designing solutions. Based on the interviews they were two important personas.</p>
<h2 id="User-Journey-1"><a href="#User-Journey-1" class="headerlink" title="User Journey 1"></a>User Journey 1</h2><ul>
<li>Isai is a homemaker</li>
<li>Her mother Chandra is a cancer patient and has to be taken to the hospital for treatment.</li>
<li>She takes her mom to the same hospital every 2 days.</li>
<li>She gets a confirmation for her mother’s appointment only an hour in advance</li>
<li>She calls her son Sanjay to book a cab for her when he is at work</li>
<li>Her son books an OLA cab with pickup point as his house address</li>
<li>He guides the cab driver when he finds it difficult to reach the address</li>
<li>He keeps checking the map to see where the cab driver is as he has to inform his mom 10 mins before as his grandmother is slow walking down the stairs.</li>
<li>If he doesn’t inform 10 mins before the cab arrives the drives calls him and trouble hims. He has to explain - every time that he has made a booking for his mom and grandmother.</li>
<li>He also tells his mom not to pay because he has added the payment method as card and the app pays automatically once the ride is complete</li>
<li>Sometimes Isai’s son is busy with office work and is not able to book a cab and she ends up calling the local travels to arrange for a car. But this is expensive and it’s not affordable every time. In these cases she takes an auto while coming back.</li>
<li>Once Isai arrange for local travels vehicle and also Sanjay ended up booking a cab later for him mom. Sanjay has to cancel the OLA booking later as he didn’t know that his mom arrange another mode of transport.</li>
<li>Isai doesn’t book a cab by herself though she has a smart phone with OLA app installed because she is not used to modern interfaces.</li>
<li>Isai’s son tried teaching her how to use the app once, but still she doesn’t remember and is afraid of booking as it has a lot of options.</li>
<li>Isai is aware of basic mobile interactions and uses apps like youtube and whatsapp. In either case she doesn’t type much on phone(she is very slow at typing and is not very comfortable with that) and primarily uses mobile to consume content(watching whatsapp videos, watching videos on youtube etc).</li>
</ul>
<h2 id="Persona-Document"><a href="#Persona-Document" class="headerlink" title="Persona Document"></a>Persona Document</h2><p>The persona document is simple with only the major details about the goals, frustrations, technology awareness and a basic description about Isai.<br><img src="/img/cab-booking/persona.png" alt="Screenshot 1"></p>
<h2 id="Storyboarding"><a href="#Storyboarding" class="headerlink" title="Storyboarding"></a>Storyboarding</h2><p>For each persona I also wanted to draw a rough storyboard, which can be used as a reference throughout my design process.</p>
<p><img src="/img/cab-booking/storyboarding.jpg" alt="Screenshot 1"></p>
<p>Ideation<br>Before ideating on a good solution for a problem, I always do an exercise as to what I call as CSS diagram mapping to get a better idea on what is the actual problem here and what “better” means.</p>
<p>A CSS diagramming activity is very simple. Based on the research we write down the current situation, the current solution that is used to deal with the situation and the bad result that we would like to improve. Then we write down the better result i.e if a good solution is in place what problems would would solve and then we try to find out the new solution. The delta between the current result and the better results is the progress here.</p>
<p><img src="/img/cab-booking/ideation.jpg" alt="Screenshot 1"></p>
<h2 id="Low-fidelity-wireframing-amp-prototyping"><a href="#Low-fidelity-wireframing-amp-prototyping" class="headerlink" title="Low fidelity - wireframing &amp; prototyping"></a>Low fidelity - wireframing &amp; prototyping</h2><p>Now that I had a good understanding about the user, their problems and the actually need for a good solution here. I started prototyping and iterating in low fidelity to validate my assumptions.</p>
<p>Some of my assumptions:</p>
<ul>
<li>It’s a lot easier for Isai is the app has a similar interface like Whatsapp that she is already used to, but with more interactions on clicking rather than typing</li>
<li>It’s easier for Isai if the app doesn’t ask for the pickup location and picks the current location by default</li>
<li>It’s easier for Isai if the app doesn’t ask for the drop location and presents the recently travelled ones for selection</li>
<li>It’s less scary for Isai if the app shows the pricing of the cabs upfront before a booking rather than after ending the ride</li>
<li>It’s easier for Isai if the app doesn’t ask her for the payment method and picks cash by default so that she can control over the money</li>
<li>It’s better for Isai if she is called by someone from OLA for a confirmation about the booking</li>
<li>It’s better for Isai if she is aware about the cab arrival time as she can plan to lock her house and bring her mom down</li>
</ul>
<p><img src="/img/cab-booking/view-hierarchy.jpg" alt="Screenshot 1"></p>
<p>With some usability testing and questions I was able to validate the effectiveness of my solution my presenting them to Isai and by seeing how comfortable and simpler it was for now to book a cab.</p>
<h2 id="High-fidelity-prototyping"><a href="#High-fidelity-prototyping" class="headerlink" title="High fidelity prototyping"></a>High fidelity prototyping</h2><iframe src="https://marvelapp.com/109fbj46?emb=1" width="452" height="800" allowtransparency="true" frameborder="0"></iframe>

<p>Once I was clear about the entire flow and what works well for Isai I was able to prototype the design in high fidelity using the Marvel app and get more feedback.</p>
<p>Below is a photo of Isai using the interface herself. A few words from Isai - “Did you make the app? This is very easy to use.” (Translated from Tamil to English)</p>
<p><img src="/img/cab-booking/high-fidelity.jpg" alt="Screenshot 1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Project-details&quot;&gt;&lt;a href=&quot;#Project-details&quot; class=&quot;headerlink&quot; title=&quot;Project details&quot;&gt;&lt;/a&gt;Project details&lt;/h2&gt;&lt;p&gt;Recently I found my colleague Sanjay, booking a cab for his mother. I wasn’t shocked when he told me that his mom doesn’t book a cab by herself. Sanjay’s mom owns a smartphone and is comfortable using apps like youtube and whatsapp. When she can youtube and whatsapp, how is that she is finding it difficult to book a cab?&lt;/p&gt;
&lt;p&gt;As a designer I wanted to fix this. My instinct told me, if the design could be more user centered, Sanjay’s mom should be able to make a booking by herself.&lt;/p&gt;
&lt;h2 id=&quot;Problem-Statement&quot;&gt;&lt;a href=&quot;#Problem-Statement&quot; class=&quot;headerlink&quot; title=&quot;Problem Statement&quot;&gt;&lt;/a&gt;Problem Statement&lt;/h2&gt;&lt;p&gt;Designing a simpler cab booking experience with minimum friction to allow many such Indian mom’s to book a cab without anyone’s help.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Learnings as a Product Manager</title>
    <link href="http://rajabishek.com/2017/Learnings-as-a-product-manager/"/>
    <id>http://rajabishek.com/2017/Learnings-as-a-product-manager/</id>
    <published>2017-09-09T18:01:22.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-term-‘manager’-is-a-misnomer"><a href="#The-term-‘manager’-is-a-misnomer" class="headerlink" title="The term ‘manager’ is a misnomer"></a>The term ‘manager’ is a misnomer</h2><p>A product manager is very less of a manager. As a PM you have no authority to tell somebody what to do or what to work on. The role is to empower and steer your team towards a positive outcome.</p>
<a id="more"></a>
<h2 id="Ask-more-questions"><a href="#Ask-more-questions" class="headerlink" title="Ask more questions"></a>Ask more questions</h2><p>You can’t decide without understanding something completely. So ask questions and get things clarified. As a product owner understanding why things are the way they are and by questioning the reasoning behind everything allows you to take informed decisions.</p>
<h2 id="PM-Proactive-Manager"><a href="#PM-Proactive-Manager" class="headerlink" title="PM = Proactive Manager"></a>PM = Proactive Manager</h2><p>Being proactive is one of the key qualities in product management. When you are into product management, you act as a mediator between different teams, so the sooner you take initiative, the sooner others can get their work done.</p>
<p>Being a mediator means your work becomes less orthogonal with others and more people start waiting for you to complete so that they can proceed. So complete things right away rather that putting it off for later.</p>
<h2 id="Risk-Management"><a href="#Risk-Management" class="headerlink" title="Risk Management"></a>Risk Management</h2><p>One of the important tasks in product management is managing risk. What worse than a feature that fails, is a feature that you wish never shipped. As rightly said shipping is a one way street. Its is very hard to take back things once released.</p>
<p>By being a person who drives the product direction you are exposed to hearing a lot of feedback, new ideas, features and changes. But remember that you are responsible for every feature you put in your product. You better have a reason for why it’s there in the first place. Don’t just ship features because you have enough bandwidth.</p>
<p>You would have attended meetings where everyone agrees for a change but when you ask why have we gathered here, no one seems to have a clear definition of the exact benefits the change would bring. These are clear indications of risky features.</p>
<p>One way to deal with these situations is to always have a couple of low risk items on hand and push these risky ones for later which would buy you some time to do your research, understand the exact the demand side struggle and come back with a solution that clearly depicts how it would provide better results in a particular situation where users are struggling right now.</p>
<h2 id="Bringing-clarity"><a href="#Bringing-clarity" class="headerlink" title="Bringing clarity"></a>Bringing clarity</h2><p>There can be situations when you have a lot of uncertainties associated with the project you are working on. This is one of the reasons why you are hired for. It is your responsibility to bring clarity on the table.</p>
<p>Guide your stakeholders and help them in figuring out what to build. Every stakeholder has their own perspective of what’s valuable and everyone has different expectations of what they are going to get in the next release. Its your job to dissolve this ambiguity and keep everyone on the same boat.</p>
<h2 id="Love-the-problem-not-the-solution"><a href="#Love-the-problem-not-the-solution" class="headerlink" title="Love the problem, not the solution"></a>Love the problem, not the solution</h2><p>Its easy to get attached to solutions and jump straight at building them. But if you think about it, solutions are cheap. So focus more on figuring out if you are solving the right problem instead of acquiring more resources to build out the solution.</p>
<p>Invest more in identifying the current situation where your users are struggling, instead of working backwards from a solution to the problem.</p>
<h2 id="Don’t-turn-your-product-into-a-feature-factory"><a href="#Don’t-turn-your-product-into-a-feature-factory" class="headerlink" title="Don’t turn your product into a feature factory"></a>Don’t turn your product into a feature factory</h2><p>Anyone who does product design has to switch between looking at the world from two different perspectives - <strong>Demand</strong>(what people want from the product) and <strong>Supply</strong>(features to be built).</p>
<p>Many times when we think we’ve identified demand, what we have really identified is just supply-side thinking. Next time when you sit for customer interviews or in a backlog grooming session listen closely for the problems and be skeptical about the solutions.</p>
<p>If you aren’t investing in identifying what the true demand is, then it’s really not any different from having somebody who is higher up in the company walking in and saying, <strong>I wan’t you guys to build this, like this</strong>.</p>
<h2 id="It’s-really-okay-not-to-know"><a href="#It’s-really-okay-not-to-know" class="headerlink" title="It’s really okay not to know"></a>It’s really okay not to know</h2><p>Designers and product managers are usually considered as the wise ones in the room who always have answers to customer problems at their fingertips. And when you say <strong>I don’t know</strong> people look at you in a strange way. But product design is not about knowing the right answers. It’s about finding them.</p>
<p>So the next time you’re asked a question that cannot — or shouldn’t — be answered, just say: <strong>I don’t know</strong>. But make sure you go back and find the answer.</p>
<h2 id="Overcoming-ostrich-syndrome"><a href="#Overcoming-ostrich-syndrome" class="headerlink" title="Overcoming ostrich syndrome"></a>Overcoming ostrich syndrome</h2><p>When you have an issue in the project it is easy to chose to be ostriches emulating the famed Ostrich behavior of dunking heads in the sand. If I can’t see the problem, the problem will disappear. This will take you no where. </p>
<p>When you have a blocker in the project you are working on, don’t just give up and call it done. Work with your team and find out a way to reduce the scope. Look for ways to solve a problem with whatever you little you have available.</p>
<h2 id="Be-a-design-thinking-evangelist"><a href="#Be-a-design-thinking-evangelist" class="headerlink" title="Be a design thinking evangelist"></a>Be a design thinking evangelist</h2><p>Stick with your design process it will take you a long way, don’t skip it. Design thinking framework combines the problem-solving roots of design with deep empathy for the user. More than just empathy the framework encourages you to move through product iterations at a design level, saving engineering time. In this way you get to learn, solve disagreements and test hypotheses quickly even before you launch.</p>
<p>It can be hard to employ the tradition waterfall approach to design in agile sprints. One good solution I’ve found is to use the time boxed activities from <a href="http://www.gv.com/sprint/" target="_blank" rel="external">design sprint</a>. You can read more about this <a href="https://rajabishek.com/2017/Lean-early-learn-often/">here</a>.</p>
<h2 id="Trust-your-gut-but-trust-data-more"><a href="#Trust-your-gut-but-trust-data-more" class="headerlink" title="Trust your gut, but trust data more"></a>Trust your gut, but trust data more</h2><p>There is no go to strategy for setting up analytics. Every time I talk with another product manager what I have come to realize is that collecting and analyzing data is still experimental. Its hard to decide what to measure and how. But just because it hard, don’t skip this.</p>
<p>Constantly keep looking for tools that helps you measuring value and find out how helpful your product/feature is. Make hypotheses, validate them and see how they affect your users. </p>
<p>With data there are so many variables that can into play. Even simple things like your founder attending a conference abroad, tweet from you customer, issues/bugs etc can easily skew the data and make it difficult to understand what is happening.</p>
<p>When you take decisions based on data, know what the data exactly means. Making decisions on incorrect data and false assumptions is worse than deciding on a healthy gut feeling.</p>
<h2 id="Early-and-regular-feedback"><a href="#Early-and-regular-feedback" class="headerlink" title="Early and regular feedback"></a>Early and regular feedback</h2><p>You should have regular O3 meetings not just with your line manager but with everyone you work with. By having one-to-ones, you can receive &amp; give feedback to catch possible issues early. Use these meetings to decide together on how your day to day work can be improved.</p>
<p>The goal is to listen more and talk less. One of the strategies to keep the discussions in these meeting going well is what I call the RIC(Remove, Improve, Create) framework.</p>
<ul>
<li>Remove - Things that can be removed from the current process</li>
<li>Improve - Things that can be improved in the current process</li>
<li>Create - New things that can be added to make it better</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-term-‘manager’-is-a-misnomer&quot;&gt;&lt;a href=&quot;#The-term-‘manager’-is-a-misnomer&quot; class=&quot;headerlink&quot; title=&quot;The term ‘manager’ is a misnomer&quot;&gt;&lt;/a&gt;The term ‘manager’ is a misnomer&lt;/h2&gt;&lt;p&gt;A product manager is very less of a manager. As a PM you have no authority to tell somebody what to do or what to work on. The role is to empower and steer your team towards a positive outcome.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Personas Aren&#39;t Just One-Page Deliverables</title>
    <link href="http://rajabishek.com/2017/Personas-arent-just-one-page-deliverables/"/>
    <id>http://rajabishek.com/2017/Personas-arent-just-one-page-deliverables/</id>
    <published>2017-03-15T12:54:01.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-a-persona"><a href="#What-is-a-persona" class="headerlink" title="What is a persona"></a>What is a persona</h2><p>It is a imaginary yet detailed and realistic descriptions of the users of your product. In UCD personas are created after the user research. Whereas in Lean UX methods personas are originally created based on assumptions(proto-personas) brainstorming session with the team. Later these proto-personas are checked against real data to refine them. Personas help designers in transforming <strong>the user</strong> into concrete people.</p>
<a id="more"></a>
<p>Personas must answer these basic questions - what are the user needs, wants and limitations. These representations should be based on qualitative and some quantitative user research and web analytics.</p>
<h2 id="More-than-just-a-deliverable"><a href="#More-than-just-a-deliverable" class="headerlink" title="More than just a deliverable"></a>More than just a deliverable</h2><p>While a persona is usually presented as single-page document, it is more than just a deliverable. It is a way to summarize and communicate the research details to other team members who were absent during the user research. The process of transferring knowledge about the users is more important than the document itself. This articles focuses more about what personas are and why they are beneficial. To read about how effectively you can create personas please refer to this <a href="https://knowledge.hubspot.com/contacts-user-guide-v2/how-to-create-personas" target="_blank" rel="external">article</a>.</p>
<h2 id="Why-should-you-use-personas"><a href="#Why-should-you-use-personas" class="headerlink" title="Why should you use personas ?"></a>Why should you use personas ?</h2><p>Personas have been used by designers since the mid 90s and has become a very popular technique since then. As a UX Designer, personas are one of the best methods that I have found which can improve the consistency and quality of the work that we do. When I started using personas it seemed as a distraction<br>from the real work until I actually witnessed them being used properly and to their full potential.</p>
<p>The document that captures the essential elements of a persona and the persona itself are not the same. Many novice designers try to figure out the <strong>best way</strong> to make a persona document and to lose sight of the bigger picture, which is to fully understand a user and communicate these details with others. For creating persona document I highly recommend taking a look at the persona poster template by <a href="https://creativecompanion.files.wordpress.com/2011/05/persona-core-poster_creative-companion1.pdf" target="_blank" rel="external">Creative Companion</a>. This template organizes and formats all of the important information that a designer would need to create an amazing one-page deliverable.</p>
<h2 id="How-to-use-them-effectively"><a href="#How-to-use-them-effectively" class="headerlink" title="How to use them effectively ?"></a>How to use them effectively ?</h2><p>For every one designer I have met who has benefited from persona driven design, I have met another who is completely against using this technique. Its either 0% or 100%. Either I see people using this very effectively or seeing this is as a waste of time. I wanted to probe more into why it works well for some set of designers and tried to understand how efficiently they exploit this methodology.</p>
<p>With some research it because very clear that design who benefited from personas:</p>
<ul>
<li>Knew when to use them and more importantly when not to use them.</li>
<li>Did not see them as just a single page deliverable, rather they saw it as a communication tool.</li>
<li>They weren’t just using it in inception, personas were living till the end of the project and were used in all discussions and meetings.</li>
</ul>
<p>Like every other design technique I wanted to experiment with personas and see how well it works for me. I was against the belief that personas are totally invaluable and felt that if we know when and how to use them effectively, it can be a useful technique to build a more consistent and user focused design. it is recommended to create them at the beginning of the project, as they can inform site functionality, help uncover gaps, or highlight new opportunities.</p>
<h2 id="Things-to-keep-in-mind"><a href="#Things-to-keep-in-mind" class="headerlink" title="Things to keep in mind"></a>Things to keep in mind</h2><p>The design team should strive to create one primary persona that represents the core users of the product. Secondary personas can be created, however their end goals shouldn’t deviate too much from the primary persona. The product should be built for the primary persona and adjusted for secondary personas.</p>
<p>The persona is only as good as the research behind it. The persona is a single fictional person that is made up from a synthesis of many customer interviews and contextual analysis.</p>
<p>A persona should never be build based on market research and intuitive whims. This can happen when the team thinks they know who their users before even researching about them or when are not ready to get out of the building. To know more about how mush time would it take to create personas, refer to this <a href="https://www.nngroup.com/articles/persona-budgets/" target="_blank" rel="external">article</a>.</p>
<h2 id="When-are-personas-not-needed"><a href="#When-are-personas-not-needed" class="headerlink" title="When are personas not needed"></a>When are personas not needed</h2><p>The product owners could be building products for two kinds - for themeselves, for others. In the first case persona development in this case isn’t necessary because the builders of the product are its users. It is often a waste of time if the designer or team is building something that solves their own problems or fulfills their own needs. In the second case we have 2 cases again - for others like product owners, others unlike product owners. In either case it is recommended to proceed with persona development because like or unlike is subjective and might be based on assumptions. But when you have lack of resources and you are sure that the kinds of people you are designing for are similar to you, it is fine to let go of persona development.</p>
<h2 id="Why-are-personas-helpful"><a href="#Why-are-personas-helpful" class="headerlink" title="Why are personas helpful"></a>Why are personas helpful</h2><h4 id="Empathy"><a href="#Empathy" class="headerlink" title="Empathy"></a>Empathy</h4><p>Crafting a persona is designing a lens through which you will be able to see how your users perceive the world. With this toll in hand now when a designer makes a decision, they do so having internalized the persona’s goals, needs and wants. The entire team now understands and shares the feelings of users.</p>
<h4 id="Focus"><a href="#Focus" class="headerlink" title="Focus"></a>Focus</h4><p>Instead of designing for everyone, or at least designing for everyone at once, personas help you in identifying for whom the software is being created for and for whom it is not. With this clarity in mind you will be able to proceed with designing a more consistent and high quality product. Personas help you to avoid the <strong>elastic user</strong> which is one body that morphs as the designer’s perspective changes. Instead of designing for all audiences and addressing all needs of every user personas allow you to focus on the major needs of the most important user groups.</p>
<h4 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h4><p>Personas are helpful in communicating research findings to people who were not able to be a part of the interviews with users. As a deliverable it is a good way to communicating the data analyzed from the user research to the product team and the stakeholders. This will help the team to have a better understanding of user’s motives and ways of interacting with the product.</p>
<h4 id="Decision-making"><a href="#Decision-making" class="headerlink" title="Decision making"></a>Decision making</h4><p>With better and similar understanding of their users, building consensus on important issues becomes much easier. The team won’t get stuck on discussing unusable features. By seeing through the lens of the users it becomes easier in determining what is useful for the users.</p>
<h4 id="Proxies"><a href="#Proxies" class="headerlink" title="Proxies"></a>Proxies</h4><p>When the budget or time does not allow for access to actual users person can be used as stand-in proxies. Interface and design of the product can be tested with pairing a persona with a scenario. Instead of a real user a delegate can play-act a persona. if this delegate cannot figure out how to use a feature or gets frustrated, then the users they represent will probably have a difficult time as well.</p>
<h4 id="Common-vocabulary"><a href="#Common-vocabulary" class="headerlink" title="Common vocabulary"></a>Common vocabulary</h4><p>Personas also help in bringing a common understanding about the different kinds of users the team is designing for. Lets say we are building a travel application, <strong>John</strong> is a persona who represents a frequent traveler and <strong>Manish</strong> is a persona who represents a occasional traveler. Now lets say during a team meeting or discussion someone in the team says <code>John might not like this feature</code>, everyone immediately understands that this is a bad feature for a frequent traveler.</p>
<h4 id="Specific-attributes-of-actual-users"><a href="#Specific-attributes-of-actual-users" class="headerlink" title="Specific attributes of actual users"></a>Specific attributes of actual users</h4><p>By creating personas you take into account the needs of specific kind of users who might be using your product.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-a-persona&quot;&gt;&lt;a href=&quot;#What-is-a-persona&quot; class=&quot;headerlink&quot; title=&quot;What is a persona&quot;&gt;&lt;/a&gt;What is a persona&lt;/h2&gt;&lt;p&gt;It is a imaginary yet detailed and realistic descriptions of the users of your product. In UCD personas are created after the user research. Whereas in Lean UX methods personas are originally created based on assumptions(proto-personas) brainstorming session with the team. Later these proto-personas are checked against real data to refine them. Personas help designers in transforming &lt;strong&gt;the user&lt;/strong&gt; into concrete people.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Using Heuristic Evaluation to Evaluate a Product’s Usability</title>
    <link href="http://rajabishek.com/2017/Using-heuristic-evaluation-to-evaluate-a-products-usability/"/>
    <id>http://rajabishek.com/2017/Using-heuristic-evaluation-to-evaluate-a-products-usability/</id>
    <published>2017-03-14T15:10:03.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In a heuristic evaluation, usability experts review the product’s interface multiple times and compare it against an accepted set of usability principles. This analysis is helpful in listing down the potential usability issues in the product. These principles or thumb rules are sometimes revised by the usability engineers to accommodate more findings.</p>
<a id="more"></a>
<h2 id="When-should-heuristic-evaluation-be-done"><a href="#When-should-heuristic-evaluation-be-done" class="headerlink" title="When should heuristic evaluation be done ?"></a>When should heuristic evaluation be done ?</h2><p>The best way to find out usability issues and test the user experience is by testing the product with actual users. But conducting user tests is expensive and consumes more resources. User feedbacks are pricey and interpreting them is also time consuming process. In such cases using heuristic evaluation helps in identifying and minimizing usability problems with a much lower consumption of your limited resources.</p>
<p>Research also shows that a team of four usability experts would be able to discover 77% of the problems during an evaluation process. It is important to note here that this percentage of success is achievable only when evaluation is performed by experts and decreases with decrease in expertise and experience of the evaluators.</p>
<p>It is important to understand that a heuristic evaluation should not replace usability testing. This is because the issues identified in a heuristic evaluation are different than those found in a usability test. Instead it should be seen as a way for getting early feedback in the design process.</p>
<h2 id="How-to-perform-Heuristic-Evaluation"><a href="#How-to-perform-Heuristic-Evaluation" class="headerlink" title="How to perform Heuristic Evaluation ?"></a>How to perform Heuristic Evaluation ?</h2><p>The basic needs to perform a Heuristic Evaluation includes</p>
<ul>
<li>3 to 5 expert evaluators</li>
<li>Observers who can assist the evaluators</li>
<li>Evaluation manager (When there are no observers)</li>
<li>Usability heuristics to evaluate</li>
</ul>
<p>It is certainly true that some usability problems are so easy to find that they are found by almost everybody, but there are also some problems that are found by very few evaluators. Therefore it is highly recommended for evaluators to perform the evaluation process individually and correlate the data at the end to remove duplication. Working individually also makes sure that the evaluators are independent and evaluations are unbiased.</p>
<p>As the evaluators review the product they can verbalize their comments to an observer as they go through the interface. Or in the absence of observers the evaluators can record their observations as written reports. After the evaluation these written reports needs to be read and aggregated by an evaluation manager. Using an observer adds to the overhead of each evaluation session, but reduces the workload on the evaluators.</p>
<p>The observer can also assist the evaluators in operating the interface in case of problems. As we all know prototypes are only close to real products, there might be some dead ends or unstable conditions in prototypes. In certain cases when the evaluators have limited domain expertise and need to have certain aspects of the interface explained observers can help them with the interface.</p>
<h2 id="What-are-the-Heuristic-Principles"><a href="#What-are-the-Heuristic-Principles" class="headerlink" title="What are the Heuristic Principles ?"></a>What are the Heuristic Principles ?</h2><p>One of the well accepted usability principles is given by the <a href="https://www.nngroup.com/articles/ten-usability-heuristics/" target="_blank" rel="external">Nielson Norman group</a>. Nielsen refined the list originally developed in 1990 by himself and Rolf Molich.</p>
<h4 id="Visibility-of-system-status"><a href="#Visibility-of-system-status" class="headerlink" title="Visibility of system status"></a>Visibility of system status</h4><p>The user must always be kept informed about the status of the system at all times with efficient feedback interactions. Appropriate feedback must be given within reasonable time to keep the users informed about what is going on with the product. For example after the user enter their credit card information a progress or loading indicator must be present to let them know that the website is processing the credit card details rather than just making them wait for minutes on a blank screen, making them wonder if their card details are being processed or if the website is down.<br><img src="/img/heuristic-evaluation/feedback.png" alt="Screenshot 1"></p>
<h4 id="Match-between-system-and-the-real-world"><a href="#Match-between-system-and-the-real-world" class="headerlink" title="Match between system and the real world"></a>Match between system and the real world</h4><p>The system’s communication with the user must be familiar to the user. The user should be able relate it with their real world equivalent. This might be regarded as one of the obsolete techniques, but still with the majority of population being unfamiliar with technology, it is important to give this principle a thought. For example a shopping cart system on a e-commerce website reflects the same shopping experience users have when they buy something from their local store.<br><img src="/img/heuristic-evaluation/real-life.png" alt="Screenshot 2"></p>
<h4 id="User-control-and-freedom"><a href="#User-control-and-freedom" class="headerlink" title="User control and freedom"></a>User control and freedom</h4><p>User should have the control to revert back their actions with the freedom to exit the system when they wish to, at all times. Control and freedom also includes easy navigation as the users use the product. They should be able to find their way through the site, be it to find a page or product, or to find the way back if they accidentally clicked on the wrong button or link. For example if you take Google Docs you always have the option to revert back to a previous version of the file and also quit the application whenever you like. On top of being able to quit the application at any time they have also made sure that you can quit without thinking about whether the document would have been saved or not, by making sure that the file is periodically saved.<br><img src="/img/heuristic-evaluation/revert.png" alt="Screenshot 3"></p>
<h4 id="Consistency-and-standards"><a href="#Consistency-and-standards" class="headerlink" title="Consistency and standards"></a>Consistency and standards</h4><p>The system must follow standard interface conventions with user familiar terminologies that accommodates same meaning all over the system.<br>Fro example the application should avoid having inconsistent labels over buttons with same meaning. Lets say we have 2 pages from where the user can log out of the website, on one page if it says Sign Out on the other page the button must not use some other term like “Log Off” or “Shut Down”. This inconsistency in design can cause confusion in users about what a particular call of action will actually do.<br><img src="/img/heuristic-evaluation/products.png" alt="Screenshot 4"><br><img src="/img/heuristic-evaluation/cart.png" alt="Screenshot 5"></p>
<h4 id="Error-prevention"><a href="#Error-prevention" class="headerlink" title="Error prevention"></a>Error prevention</h4><p>Humans are bound to make errors, the system should support the user in eliminating them. For example the auto suggestions menu in a search bar will prevent the user from making mistakes.<br><img src="/img/heuristic-evaluation/error-prevention.png" alt="Screenshot 6"></p>
<h4 id="Recognition-rather-than-recall"><a href="#Recognition-rather-than-recall" class="headerlink" title="Recognition rather than recall"></a>Recognition rather than recall</h4><p>The application shouldn’t expect the users to remember everything. It must provide assistance wherever possible to reduce the user’s memory load. Example the system can help the user in categorizing their favorites/most used items instead of expecting them to remember how they did something last time.<br><img src="/img/heuristic-evaluation/recognition.png" alt="Screenshot 7"></p>
<h4 id="Flexibility-and-efficiency-of-use"><a href="#Flexibility-and-efficiency-of-use" class="headerlink" title="Flexibility and efficiency of use"></a>Flexibility and efficiency of use</h4><p>The system must prove to be useful and efficient for both novice and advanced users. For example Adobe products have shortcuts for professional users and have obvious alternatives for new users also. This helps in making sure that the system is designed in such a way that it proves to be efficient for both kinds of users.<br><img src="/img/heuristic-evaluation/novice.png" alt="Screenshot 8"></p>
<h4 id="Aesthetic-and-minimalist-design"><a href="#Aesthetic-and-minimalist-design" class="headerlink" title="Aesthetic and minimalist design"></a>Aesthetic and minimalist design</h4><p>User should be presented only with relevant data. More the relevant data more easy it is for the system to acquire user focus.</p>
<h4 id="Help-users-recognize-diagnose-and-recover-from-errors"><a href="#Help-users-recognize-diagnose-and-recover-from-errors" class="headerlink" title="Help users recognize, diagnose, and recover from errors"></a>Help users recognize, diagnose, and recover from errors</h4><p>The system must help the user in recovering from errors. Error messages should be constructed with empathy. For example the error message that are presented to the users can be recognizable and constructive in nature.<br><img src="/img/heuristic-evaluation/bad-error.png" alt="Screenshot 9"><br><img src="/img/heuristic-evaluation/friendly-error.png" alt="Screenshot 9"></p>
<h4 id="Help-and-documentation"><a href="#Help-and-documentation" class="headerlink" title="Help and documentation"></a>Help and documentation</h4><p>User should be provided with appropriate help documents both on line and off line about the system. The documentation must deliver effective steps for the users to accomplish their goals.<br><img src="/img/heuristic-evaluation/documentation.png" alt="Screenshot 9"></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Though heuristics can never replace the conventional user testing methods it still could deliver a lot about a product’s broken usability and experience. Not every product manager/designer can afford the time, money or effort to perform user testing and heuristic evaluations could be the faster yet effective way to solve them.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;In a heuristic evaluation, usability experts review the product’s interface multiple times and compare it against an accepted set of usability principles. This analysis is helpful in listing down the potential usability issues in the product. These principles or thumb rules are sometimes revised by the usability engineers to accommodate more findings.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Learn Early, Learn Often.</title>
    <link href="http://rajabishek.com/2017/Lean-early-learn-often/"/>
    <id>http://rajabishek.com/2017/Lean-early-learn-often/</id>
    <published>2017-02-27T10:09:08.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Traditional-design-process"><a href="#Traditional-design-process" class="headerlink" title="Traditional design process"></a>Traditional design process</h2><p>The traditional design process is a waterfall approach. Designers spend weeks of time for up front user research to understand and empathize with the user. This delays product development and creates a hindrance to learning. </p>
<a id="more"></a>
<p>But one valuable thing that I learned from my design projects is that even after spending so much effort and time on this up front research, the useful data and feedback came from the first user tests and not the research. The user research helped to empathize with users during designing and prototyping but true feedback and reactions were captured during the first user tests. Nothing comes close to learning by actually seeing your users interact and use the product.</p>
<h2 id="Extensive-user-research-is-an-overkill"><a href="#Extensive-user-research-is-an-overkill" class="headerlink" title="Extensive user research is an overkill"></a>Extensive user research is an overkill</h2><p>Let’s be honest, user research takes a lot of time. It starts with creating proto-personas, recruiting and interviewing people, refining personas, creating user journeys, creating user journeys, making empathy maps etc. The list goes on. If you browse for user research techniques, there are around 20 well know techniques in the industry. The saddest part here is that we are building up assumptions from what we think the user might like instead of making assumptions from observing and testing the product with the user(Note: In both cases we are making assumptions anyway). This is a very unhealthy approach towards product design. We never really know what our users will understand, like, dislike and how they will respond until we see them using the product. Then why spend weeks of time for extensive user research instead of building a prototype and testing to learn faster.</p>
<h2 id="GV’s-design-sprint"><a href="#GV’s-design-sprint" class="headerlink" title="GV’s design sprint"></a>GV’s design sprint</h2><p>To build and learn quickly we need a design process that focuses on getting to a tangible result quickly by skipping the intensive up front research in favor of immediately testing a prototype with actual users. This is when I came across the GV’s design sprint process. The sprint is an excellent five-day process for answering critical business questions through design, prototyping, and testing ideas with customers.</p>
<h2 id="Design-process"><a href="#Design-process" class="headerlink" title="Design process"></a>Design process</h2><p>One thing that I really liked about design sprint is that every technique used in it is time boxed. The question we had in mind is even if we are not conducting a full sprint, can we still apply the individual techniques in the sprint separately. This really helps when you are running lean with rapid product development where iterations happen every 2 weeks. Before trying out with clients projects, we wanted to try out this approach in one of our internal projects. We were redesigning the careers page for our website and this was the right opportunity to test this approach. </p>
<p>Sprint techniques are collaborative in nature. This means putting away other work and focusing on the sprint activities completely. We wanted to test 2 things here. Can sprint methods be employed in our day to day work flow. And how effective is these sprint activities when there are around 2-3 participants. If individual sprints methods prove to be helpful with around 2-3 participants, it would be ideal for us to imbibe it into our design process.</p>
<h2 id="Diverge"><a href="#Diverge" class="headerlink" title="Diverge"></a>Diverge</h2><p>There were 2 designers who were assigned for redesigning the careers page. As we understood the problem well we started with the diverge methods. There were 2 people participating in the sprint activity and the total estimated time for completely the diverge was around an hour and a half.</p>
<ol>
<li>Remix and improve - 20mins</li>
<li>Lightning demos - 5mins/person</li>
<li>Sketching<ol>
<li>Notes - 10mins</li>
<li>Ideas - 10mins</li>
<li>Crazy 8s - 8mins</li>
<li>Solution sketch - 30mins</li>
</ol>
</li>
</ol>
<h2 id="Remix-and-improve"><a href="#Remix-and-improve" class="headerlink" title="Remix and improve"></a>Remix and improve</h2><p>Great innovation is built on existing ideas, re purposed with vision. In remix and improve we begin searching for existing ideas, gather useful components and then convert them to something original and new. This activity is done individually by each sprint participant to generate ideas. It is important to look for similar problems faced by organizations from other domains.<br><img src="/img/sprint-techniques/1.jpg" alt="Screenshot 1"></p>
<h2 id="Lightning-demos"><a href="#Lightning-demos" class="headerlink" title="Lightning demos"></a>Lightning demos</h2><p>During lightning demos sprint participants will take turns giving 5 minute tours of their favorite solutions. This exercise is about finding raw materials not copying competitors. It is important to capture big ideas as you go. One person should take the responsibility of asking the presenter to explain the big idea and then make a quick drawing of that inspiring component.<br><img src="/img/sprint-techniques/2.jpg" alt="Screenshot 1"></p>
<h2 id="Sketching-notes"><a href="#Sketching-notes" class="headerlink" title="Sketching - notes"></a>Sketching - notes</h2><p>Now the sprint participants will walk around the room, look at the white boards and take notes individually. The notes help you refresh your memory before you commit to a solution. Team can also look at their devices at this stage to do some research if they would like to.<br><img src="/img/sprint-techniques/3.jpg" alt="Screenshot 1"></p>
<h2 id="Sketching-ideas"><a href="#Sketching-ideas" class="headerlink" title="Sketching - ideas"></a>Sketching - ideas</h2><p>Now each person will jot down rough ideas filling a sheet of paper with doodle, sample headings, diagrams etc. Anything that gives form to their thoughts. At the end use 2 minutes of time to review and circle your favorite ideas. This is where your team starts to take the reviewed notes and starts generating ideas and coming up with solutions to solve the problem.<br><img src="/img/sprint-techniques/4.jpg" alt="Screenshot 1"></p>
<h2 id="Sketching-crazy8s"><a href="#Sketching-crazy8s" class="headerlink" title="Sketching - crazy8s"></a>Sketching - crazy8s</h2><p>Give each sprint participant a paper and ask them to fold it into 8 equal pieces or give them 8 sizes of small sheets of paper. This is a fast paced exercise. Each person takes their strongest idea and rapidly sketches 8 version in 8 minutes.<br><img src="/img/sprint-techniques/5.jpg" alt="Screenshot 1"></p>
<h2 id="Sketching-Solution-sketches"><a href="#Sketching-Solution-sketches" class="headerlink" title="Sketching - Solution sketches"></a>Sketching - Solution sketches</h2><p>Each sketch will be a three panel storyboard drawn on sticky notes, showing what your customers see as they interact with your product or service. If your team has a single team challenge then you might want to create a full page sketch so you can show even more detail. It is important to make it self explanatory, keep it anonymous, keep it detailed, thoughtful and complete, include actual words that matter instead of lorem epsum or squiggly lines.<br><img src="/img/sprint-techniques/6.jpg" alt="Screenshot 1"></p>
<h2 id="Converge"><a href="#Converge" class="headerlink" title="Converge"></a>Converge</h2><p>At the end of diverge we have multiple solutions. But you can’t prototype and test all of them. We need one solid plan to move forward. Converge techniques allows us choose the best solutions through a structure decision process.  </p>
<ol>
<li>The sticky decision<ol>
<li>Art museum</li>
<li>Heat map</li>
<li>Speed critique</li>
<li>Super vote</li>
</ol>
</li>
</ol>
<h2 id="Art-Museum"><a href="#Art-Museum" class="headerlink" title="Art Museum"></a>Art Museum</h2><p>We start with first showing everyone the solutions the team has come up with. We stick all the sketches on the wall using masking tapes and space them out like paintings in a museum allowing the team to spread out and take their time examining each sketch without crowding.<br><img src="/img/sprint-techniques/7.jpg" alt="Screenshot 1"></p>
<h2 id="Heat-map"><a href="#Heat-map" class="headerlink" title="Heat map"></a>Heat map</h2><p>Hand over a bunch of small dot sticker 20-30 every participant. Each person follows these steps works independently without talking to others by looking at the solution sketch and putting the dot stickers before the parts they like. You can even put multiple dots on the most exciting ideas.<br><img src="/img/sprint-techniques/8.jpg" alt="Screenshot 1"></p>
<h2 id="Speed-Critique"><a href="#Speed-Critique" class="headerlink" title="Speed Critique"></a>Speed Critique</h2><p>Here you will discuss each solution sketch and make note of the standout ideas. During the speed critique the team gathers around each sketch solution for 3 minutes, where the facilitator narrates the sketch and calls out the standout ideas and the team calls out the standout ideas that the facilitator missed. The creator of sketch remains silent and explains any missed ideas at the end.<br><img src="/img/sprint-techniques/9.jpg" alt="Screenshot 1"></p>
<h2 id="Super-vote"><a href="#Super-vote" class="headerlink" title="Super vote"></a>Super vote</h2><p>This is the ultimate decision. Each decider will get 3 special vote with their initial on them. What ever they vote for is what your team will prototype and test. They can spread out the votes apart or put them in a single place. The sketches with super votes on them even just one are the winners.<br><img src="/img/sprint-techniques/10.jpg" alt="Screenshot 1"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>It’s not that up front research is bad. If we are unsure about what sort of problem exactly needs to be solved then doing so much of upfront work makes sense. In other cases building prototypes and testing out your solution strategies quickly is the most helpful way to go. For most cases we suggest eliminating the time consuming up front research in favor of tangible results.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Traditional-design-process&quot;&gt;&lt;a href=&quot;#Traditional-design-process&quot; class=&quot;headerlink&quot; title=&quot;Traditional design process&quot;&gt;&lt;/a&gt;Traditional design process&lt;/h2&gt;&lt;p&gt;The traditional design process is a waterfall approach. Designers spend weeks of time for up front user research to understand and empathize with the user. This delays product development and creates a hindrance to learning. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>User Research Methods and Techniques</title>
    <link href="http://rajabishek.com/2017/User-research-methods-and-techniques/"/>
    <id>http://rajabishek.com/2017/User-research-methods-and-techniques/</id>
    <published>2017-01-09T18:12:14.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-and-what-is-user-research"><a href="#Why-and-what-is-user-research" class="headerlink" title="Why and what is user research ?"></a>Why and what is user research ?</h2><p>User research focuses on understanding user needs, wishes, goals, motivations and behaviors through observation techniques, task analysis, and other feedback methodologies. Conducting user researches helps the team make design decisions based on real data. Everyone on the team(including product managers, designers &amp; engineers) should be encouraged to conduct user research if possible to justify their decisions.</p>
<a id="more"></a>
<p>Having the entire team involved in user research turns out really helpful for the team to make informed decisions and also ensures that everyone is on the same page and are included in the process. Conducting user research increases the empathy that the entire team has for the end users. </p>
<p>User research makes your product better and provides opportunity for innovation. The goal of user research is to have a usable product. But what is usability ? There are two definitions for a product being usable one is the black and white definition and the other is the shades of gray definition. Black and white definition - Can users accomplish their goals with your product. Shades of gray definitions - How easily and successfully can users accomplish their goals with your product ?</p>
<h2 id="User-research-techniques"><a href="#User-research-techniques" class="headerlink" title="User research techniques"></a>User research techniques</h2><p>User research can be conducted in a number of ways and knowing when to use one particular kind of user research technique is very important. Some of the well know user research techniques are listed below:</p>
<ul>
<li>Card sorting</li>
<li>Usability testing</li>
<li>User interviews</li>
<li>Personas</li>
<li>Expert reviews</li>
<li>Diary studies</li>
<li>Lean UX research techniques</li>
</ul>
<h2 id="Card-sorting"><a href="#Card-sorting" class="headerlink" title="Card sorting"></a>Card sorting</h2><p>This technique is useful in evaluating the information architecture. In this technique participants organize topics into categories that make sense to them and they may also help you label these groups. This gives an idea about how your users organize and group related information in a way that makes sense to them.</p>
<h2 id="Usability-testing-overview"><a href="#Usability-testing-overview" class="headerlink" title="Usability testing overview"></a>Usability testing overview</h2><p>The idea behind this technique is that you ask a member of your target audience to do a couple of tasks with your product and observe how they work. The goal of the usability test is to evaluate the product’s design. To identify what is working and whats not. This is one of the most persuasive and effective techniques for getting stakeholders excited about design improvements. The testing process is divided into multiple phases:</p>
<ul>
<li>Test planning</li>
<li>User recruiting</li>
<li>Task design</li>
<li>Moderation</li>
<li>Analyzing the data</li>
<li>Communicating the results</li>
</ul>
<p>In test planning you first write a test plan and then run a test planning meeting with the stakeholders to understand what you would want to learn from the usability study. Then we find and recruit people whom we would like to test. We create tasks i.e things that we are going to ask the users to complete with the product and then we moderate or facilitate the test session, making observations and taking notes along the way. After running all the test sessions we analyze the data and communicate the results to the team.</p>
<h2 id="User-interview-overview"><a href="#User-interview-overview" class="headerlink" title="User interview overview"></a>User interview overview</h2><p>This is one of the best techniques that can be used for gathering information about the user needs, wishes, goals, motivations and behaviors. This is a technique that is recommended to be conducted in early phase of product development. This is useful in the early stages where you need to figure out how the product should be. It is advised to get the product team out of the office at the user’s environment.</p>
<p>This is a process and technique particularly describes as contextual inquiry, also called sometimes as field study. When the team in on the user’s location they get to see and observe the behavior of the user in their natural environment. In this way the team can understand the challenges and frustrations that the user would face. </p>
<p>This isn’t necessarily frustration with the product, it can also be frustration with the environment.The team will also get an idea about how technology fits into the user’s daily life, information like gadgets they use, internet speed etc. The team will also learn about the user’s attitude and preferences.</p>
<h2 id="Personas-overview"><a href="#Personas-overview" class="headerlink" title="Personas overview"></a>Personas overview</h2><p>Persona is a profile of an typical user synthesized from the user research and user interviews one has been conducting. It is a very effective means of communicating out the everything from the research to the product team. Personas are the best way one can communicate about the results out from the user interviews. It is important to understand that it is a description of a typical user but a fictitious user. It is aggregated from all of the user research and interviews conducted. It is one of the best technique for injecting everything you have learned about the user needs into the product process. So essentially we take the information gathered from the user interviews and aggregate that information looking for patterns about who these users are to create the persona description.</p>
<h2 id="Expert-review-overview"><a href="#Expert-review-overview" class="headerlink" title="Expert review overview"></a>Expert review overview</h2><p>This is often called as a discount product evaluation method as it is quick, efficient and relatively inexpensive. This takes less time and resources compared to user interviews and usability testing. The idea behind a expert review is you will have a third party experienced UX expert come in and evaluate your design based on their experience. You would typically bring in an experienced professional ideally someone experienced in user experience or someone who has a very good knowledge about the domain. </p>
<p>If the design team is already following some well know design pattern or principles then this can help in identifying whether the product is adhering to the principles. If there is enough bandwidth the its is recommended for teams to start out with user interviews and usability testing, but expert reviews when conducted well can provide excellent feedback. </p>
<p>There are basically two ways in which expert reviews can be conducted one is using heuristic evaluation which compares the product’s design in alignment with rules of thumb and seeing how well the product adheres to those rules. The other method is called as a task based review which is based on what you have already learned about users and your personas. The idea behind this technique is that you walk through your product as the persona or user completing the scenarios and tasks with the product.</p>
<h2 id="Diary-study-overviews"><a href="#Diary-study-overviews" class="headerlink" title="Diary study overviews"></a>Diary study overviews</h2><p>This technique is very useful when you want to gather feedback and insight about the user’s behavior over time. It is a record or report kept by a user over time period of time, it can be for a day or week or a month sharing their experience with the product and how their behavior has been. The studies work best when you remind the user via an email or SMS etc to prevent a high percentage of dropouts and increases the response rates. The study can be unstructured or structured.</p>
<p>Unstructured diary study is when the users report informally, but adding some structure here can bring more success. In a structured study is the one in which you send out a questionnaire or a survey to the user on a regular consistent basis to get their report back or another type of a structure study is the one in which you will have users complete specific tasks with the product and ask them to report on how they completed the task, what was working well and how their behavior changed.</p>
<h2 id="Lean-research-technique"><a href="#Lean-research-technique" class="headerlink" title="Lean research technique"></a>Lean research technique</h2><p>There are some quick way to get started with running user researches. Some of such techniques are listed below:</p>
<ul>
<li>5 second tests</li>
<li>First click tests</li>
<li>Comprehension test</li>
<li>Task cataloging questionnaire</li>
<li>Catalog-based tests</li>
</ul>
<p>The 5 second test just takes 5 seconds. The goal of a 5 second test is useful for evaluating any content pages for your website or product. First click test are useful if the team does not have the time or resource for running full scale usability studies, in this technique the primary idea is to give the user some tasks to perform and ask them what is the first thing they would click first in order to complete that task. This will give an idea as to how the navigation of the product is working and how users approach their task.</p>
<p>Comprehension test is a quick test that you can use to know whether the user is understanding the content or information presented in your product. Task cataloging questionnaire gives an idea on what tasks are most important to users, a quick survey and questionnaire can provide those insights. Catalog based tests also provide lots of information based of what content and what information is most important to users when they are interacting with the product.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-and-what-is-user-research&quot;&gt;&lt;a href=&quot;#Why-and-what-is-user-research&quot; class=&quot;headerlink&quot; title=&quot;Why and what is user research ?&quot;&gt;&lt;/a&gt;Why and what is user research ?&lt;/h2&gt;&lt;p&gt;User research focuses on understanding user needs, wishes, goals, motivations and behaviors through observation techniques, task analysis, and other feedback methodologies. Conducting user researches helps the team make design decisions based on real data. Everyone on the team(including product managers, designers &amp;amp; engineers) should be encouraged to conduct user research if possible to justify their decisions.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Elements of User Experience</title>
    <link href="http://rajabishek.com/2016/The-elements-of-user-experience/"/>
    <id>http://rajabishek.com/2016/The-elements-of-user-experience/</id>
    <published>2016-12-22T10:38:11.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This articles introduces the elements of user experience. It is a strategic approach that product designers can use while designing products. By dividing the process into 5 planes and building the product from bottom up, it helps designers to focus on specific decisions at each level. It also encourages designer to take a user centered approach while designing thereby ensuring that any decision taken is done consciously.</p>
<a id="more"></a>
<p>A more detailed explanation into the process can be found in this <a href="https://g.co/kgs/mBGw61" target="_blank" rel="external">book</a>. In this article I will just be taking you through as to what I have understood and I highly encourage anyone learning UX design seriously to read this book completely. I take no credit in the content, you can consider the following as my notes.</p>
<h2 id="Why-It-matters"><a href="#Why-It-matters" class="headerlink" title="Why It matters?"></a>Why It matters?</h2><ul>
<li>Most of the problems that we face today are because of poorly designed products.</li>
<li>Every product/service that we use is made by someone else like us to whom the credit should go for good design or be blamed for bad products.</li>
</ul>
<!-- more -->
<h2 id="What-is-user-experience"><a href="#What-is-user-experience" class="headerlink" title="What is user experience?"></a>What is user experience?</h2><ul>
<li>User experience is how a product works on the outside rather than the inner workings or what the product does, it essentially answers the question what it’s like to use the product or service?</li>
<li>A well designed product is one that does what it promises to do, functionality or aesthetics is only a part of good design. A pretty looking pen with a torch and a spy camera that doesn’t write when there is enough ink is clearly a badly designed product.</li>
<li>Greater the complexity the more difficult it becomes to identify exactly how to deliver a successful experience to the user.</li>
<li>User experience effort aims to improve efficiency i.e. helping people work faster (time is money) and helping them make fewer mistakes (greater job satisfaction == less people quit, more experienced staff provide higher quality work).</li>
</ul>
<h2 id="Principles"><a href="#Principles" class="headerlink" title="Principles"></a>Principles</h2><ul>
<li>Sound is an important part of the aesthetic appeal of a product.</li>
<li>The correct shape or form of the product should be dictated by the psychology and behavior of the users rather than the functionality.</li>
<li><strong>User centric design</strong> - Take the user into account every step of the way as you develop your product. In this way you will know all the ramifications of your decisions and compromises will not happen by accident.</li>
</ul>
<h2 id="Web-sites"><a href="#Web-sites" class="headerlink" title="Web sites"></a>Web sites</h2><ul>
<li>Bad design makes people look stupid. People blame themselves even though it’s not their fault when the site doesn’t work the way they expect it to.</li>
<li>Web site is a self-service product. No training. No instruction manual.</li>
<li>Paying attention to what people want and need is what matters. Faster market entry is not the complete success and having more features is only a temporary source of competitive advantage. Keep it <a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank" rel="external">simple</a>.</li>
<li>It is user experience that determines whether your customer will ever come back.</li>
<li>Effective communication is a key factor in the success of your product. If users can’t figure out how to make it work, they will never use that functionality.</li>
</ul>
<h2 id="Business"><a href="#Business" class="headerlink" title="Business"></a>Business</h2><ul>
<li>Good user experience increases ROI, improves the customer loyalty and brings customer back. You usually don’t get much of a second chance if you failed once.</li>
<li>Conversion rate(what percentage of users you convert to the next level) is a common way of measuring the effectiveness of a user experience.</li>
<li>Conversion rates are very helpful in measuring e-commerce websites. There is huge potential to convert casual browsers into active buyers by delivering satisfactory user experience.</li>
<li>Sales can suffer because of poor marketing but measuring success through conversion rates tracks how successful you are in getting those who visit to spend some money.</li>
</ul>
<h2 id="The-elements"><a href="#The-elements" class="headerlink" title="The elements"></a>The elements</h2><p>The design process should be such that no aspect of the user’s experience with your product happens without your conscious, explicit intent. Taking note of every possibility of every action the user is likely to take. Understanding the user’s expectations at every step of the way.</p>
<h3 id="Surface-plane"><a href="#Surface-plane" class="headerlink" title="Surface plane"></a>Surface plane</h3><ul>
<li>Concrete details on the appearance of the product like the color, typography and other aesthetic details of how the product looks.</li>
<li>Concerned with the sensory experience created by the finished product.</li>
</ul>
<h3 id="Skeleton-plane"><a href="#Skeleton-plane" class="headerlink" title="Skeleton plane"></a>Skeleton plane</h3><p>The placement of interface elements on the page. The arrangements of these elements should result in greater efficiency.</p>
<ul>
<li><strong>Information design</strong> describes the presentation of information in a way that facilitates understanding (both sides).</li>
<li><strong>Interface design</strong> involves arranging interface elements to enable users to interact with the functionality of the system (functionality side).</li>
<li><strong>Navigation design</strong> describes the set of screen elements that allow the user to move through the information architecture (information side).</li>
</ul>
<h3 id="Structure-plane"><a href="#Structure-plane" class="headerlink" title="Structure plane"></a>Structure plane</h3><ul>
<li>Defines the way in which different features and functions of the site fit together. </li>
<li>It defines how users get to a page and where could they go once they finish there. </li>
<li>The skeleton might define the arrangement of navigational elements allowing users to browse through.</li>
<li><strong>Interaction design</strong> defines how the system behaves in response to the user (functionality side).</li>
<li><strong>Information architecture</strong>is about the arrangement of content elements to facilitate human understanding (information side).</li>
</ul>
<h3 id="Scope-plane"><a href="#Scope-plane" class="headerlink" title="Scope plane"></a>Scope plane</h3><ul>
<li><strong>Functional specifications</strong> provide a detailed description of the “feature set” of the product i.e. the features and functions the product/service provides (functionality side).</li>
<li><strong>Content requirements</strong> provides a description of the various content elements that will be required (information side).</li>
</ul>
<h3 id="Strategy-plane"><a href="#Strategy-plane" class="headerlink" title="Strategy plane"></a>Strategy plane</h3><ul>
<li><strong>Product objectives</strong> - What do the site owners want to get out of it.</li>
<li><strong>User needs</strong> - what do the users want to get out it.</li>
</ul>
<h2 id="Why-this-way"><a href="#Why-this-way" class="headerlink" title="Why this way?"></a>Why this way?</h2><ul>
<li>By diving into these 5 planes and building the product from bottom up, the issues that we might deal with at each plane becomes less abstract and little more concrete. </li>
<li>As we move up the decisions we have to make become a little more specific and involve finer details. Each plane depends on the plane at the lower level. </li>
<li>The choices you make on each plane affect the choices available to you on the next plane above it.</li>
<li>Requiring work on each plane to finish before work on the next can start leads to unsatisfactory results for you and your users. A better approach is to have work on each plane finish before work on the next can finish.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This articles introduces the elements of user experience. It is a strategic approach that product designers can use while designing products. By dividing the process into 5 planes and building the product from bottom up, it helps designers to focus on specific decisions at each level. It also encourages designer to take a user centered approach while designing thereby ensuring that any decision taken is done consciously.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIView Fundamentals</title>
    <link href="http://rajabishek.com/2016/Views-in-iOS/"/>
    <id>http://rajabishek.com/2016/Views-in-iOS/</id>
    <published>2016-12-13T06:51:19.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Superview-amp-Subview"><a href="#Superview-amp-Subview" class="headerlink" title="Superview &amp; Subview"></a>Superview &amp; Subview</h2><p>You can never tell the view hierarchy by just looking at the views in an iOS application. Apple has revised the view architecture from OS X 10.5 and ever since then when dealing with views one must remember the following 2 points.</p>
<a id="more"></a>
<ul>
<li>Some or all of a subview can appear outside its superview.</li>
<li>A view can overlap another view and can be drawn partially or totally in front of it without being its subview.</li>
</ul>
<p>The first point means that just because a view lets say v1 is a subview of v2 it doesn’t mean that the visibility of v1 is bounded by v2. Even though v1 is a subview of v2 it can appear outside the rectangular area defined for v2. The second point means that a view doesn’t own its rectangular area, meaning lets say we have a view v3 with a rectangular area defined for it. Now another view v4 can still appear in the rectangular area of v3 even though v4 is not a subview of v3.</p>
<p><img src="/img/ios-views/view-hierarchy.png" alt="Screenshot 1"></p>
<p>By seeing the above image you can never tell which view is the parent of what. You can never get any idea about the view hierarchy by just seeing the visualization. Actually the black view and the red view are siblings, they have the main view of the view controller as the parent and the blue view is actually the sub view of black view. As I told you earlier even though the blue view is the child of black view still it can be visible outside the regions of the black view and even though the red view is not the child of black view it can still overlap or cover the area occupied by the black view.</p>
<h2 id="Importance-of-view-hierarchy"><a href="#Importance-of-view-hierarchy" class="headerlink" title="Importance of view hierarchy"></a>Importance of view hierarchy</h2><p>So if view hierarchy doesn’t dictate the way views are drawn then what is the use of having it, what is the use of declaring one view as the parent of another ? What is the significance of view hierarchy then ?. The view hierarchy dictates the order in which the views are drawn on the screen. A superview is drawn before a subview. The subviews of a superview are drawn in the same order as they are in the view hierarchy. </p>
<p>In the above diagram we know that the black view and red views are siblings and they are children of the main view of the view controller. Since black view is the first child it is drawn first. Then the red view is drawn. When drawing a view you draw all the super views along with it. But we need to remember here that parent views is drawn before the child views are drawn. Therefore the order of drawing here is first the black view is drawn then the blue view and then the red view.</p>
<p>You can think of drawing like painting on a canvas. The later one drawn will cover the previous ones drawn if the areas overlap. And as I mentioned just now, the red view cannot appear in between the black and blue view, because the black and blue views are subview and superview and are therefore they are always drawn together.</p>
<p>The view hierarchy is also important for the following reasons:</p>
<ul>
<li>If a view is removed from or moved within its superview, its subviews go along with it.</li>
<li>A view’s degree of transparency is inherited by its subviews.</li>
<li>A view can optionally limit the drawing of its subviews so that any parts of them outside the view are not shown. This is called clipping. To enable clipping we set the <code>clipsToBounds</code> property to true.</li>
<li>If a view’s size is changed then its subviews can be resized automatically.</li>
</ul>
<h2 id="Properties-and-helper-methods"><a href="#Properties-and-helper-methods" class="headerlink" title="Properties and helper methods"></a>Properties and helper methods</h2><p>Every view has a <code>superview</code> property of type <code>UIView</code> that is a reference to the instance of super view. And every view has a property called <code>subviews</code> of type <code>[UIView]</code> that is an immutable array of the subviews in the back to front order. We also have the <code>isDescendantOfView:</code> to check whether a view is a child of a subview, i.e is it a subview at any depth. Every view also has a property called <code>tag</code> which is a simple numeric value. Every view has a <code>backgroundColor</code> property that sets the background color for the view and if set to nil(default value) then in has a transparent background.</p>
<p>If you need any reference to a view higher up in the hierarchy from a particular view you can use the <code>viewWithTag:</code> method. It propagates up the view hierarchy chain and checks the tag to find the correct view. The method <code>addSubview:</code> makes one view a subview of another and <code>removeFromSuperview:</code> takes a subview out of its superview’s view hierarchy. When <code>addSubview:</code> method is called, the view is placed as the last subview, thus it is drawn last, meaning that it appears frontmost. The subviews of a superview are indexed from 0. The first subview i.e the one drawn first has the index 0. Since we have an index for every subview this gives us the flexibility to perform some neat operations. </p>
<ul>
<li>We can insert a sub view at a specific index using the <code>insertSubview:atIndex:</code> method. </li>
<li>We can insert a subview below particular subview using the <code>insertSubview:belowSubview:</code> method.</li>
<li>We can insert a subview above particular subview using the <code>insertSubview:aboveSubview:</code> method.</li>
<li>We can swap the order of two sibling views using <code>exchangeSubviewAtIndex:withSubviewAtIndex:</code> method.</li>
<li>Bring a subview all the way to the front using the <code>bringSubviewToFront:</code> method.</li>
<li>Send a subview all the way to the back using the <code>sendSubviewToBack:</code> method.</li>
</ul>
<p>Removing a subview from its superview releases it. If we intend to reuse that subview later on, then we will have to retain it first by assigning it to a property. There is no single function in iOS that allows us to remove all the sunviews. But we can cycle through the <code>subviews</code> property and remove each subview one by one.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">superview.subviews.forEach &#123; (subview: <span class="type">UIView</span>) <span class="keyword">in</span> subview.removeFromSuperview() &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Visibility-and-Opacity"><a href="#Visibility-and-Opacity" class="headerlink" title="Visibility and Opacity"></a>Visibility and Opacity</h2><p>A view can be made invisible by setting its <code>hidden</code> property to true, and visible again by setting it to false.</p>
<p>When you hide a view, the view and all its sub views are made invisible but they are not removed from the view hierarchy. It is just that they are nor visible on the screen and they will not receive any touch events. For making a view partially transparent we can manipulate the <code>alpha</code> property on the view. The alpha value can range from 0.0 to 1.0. 0.0 is perfectly transparent and 1.0 is opaque. The alpha value is inherited by all the subviews. When setting the alpha value to 0.5 for a view the view and all its subview become 50% transparent.</p>
<p>Lets say we have a view b as a subview of view a. Not lets say the alpha value for view a is 0.5 then when you give alpha value of b as 0.5, the view b is actually 25% transparent. Since view b is already inheriting the alpha value of a, any alpha value you assign to be will be relative to the value assigned for its super view. A view’s alpha property value affects both the apparent transparency of its background color and the apparent transparency of its contents.</p>
<h2 id="Frame-amp-Bounds"><a href="#Frame-amp-Bounds" class="headerlink" title="Frame &amp; Bounds"></a>Frame &amp; Bounds</h2><p>Both the <code>frame</code> and <code>bounds</code> property of a view are of type <code>CGRect</code>. A <code>CGRect</code> essentially represents 4 elements the x and y coordinates i.e the position of the view and the width and height i.e the size of the view. Now the difference between frame and bounds is that the <code>frame</code> property give a <code>CGRect</code> in which the position of the view is with respect to the superview’s coordinate system and the <code>bounds</code> property gives a <code>CGRect</code> in which the position of the view is with respect to its own coordinate system. By default the superview’s coordinate system will have the origin at its top left and with the x axis in the rightwards direction and the y axis downwards.</p>
<p>Since CGRect represents the position and size of a view, resetting a views frame will result in resizing and repositioning a view within its parent. When you create a view programatically in iOS you initialize it with a frame using the <code>init(frame:)</code> initializer. If you don’t provide a frame the default CGRect is CGRectZero which has zero height and width. A view with a zero-size frame is effectively invisible.</p>
<h2 id="Window-coordinates"><a href="#Window-coordinates" class="headerlink" title="Window coordinates"></a>Window coordinates</h2><p>The device screen has no frame, but it has bounds, because there is nothing up the device screen. The main window has no superview, but its frame is set with respect to the screen’s bounds.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> window = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.mainScreen().bounds)</div></pre></td></tr></table></figure></p>
<p>In iOS 9 you can omit the frame parameter it is automatically set the screen bounds. The window’s coordinates is thus essentially the screen coordinates.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Superview-amp-Subview&quot;&gt;&lt;a href=&quot;#Superview-amp-Subview&quot; class=&quot;headerlink&quot; title=&quot;Superview &amp;amp; Subview&quot;&gt;&lt;/a&gt;Superview &amp;amp; Subview&lt;/h2&gt;&lt;p&gt;You can never tell the view hierarchy by just looking at the views in an iOS application. Apple has revised the view architecture from OS X 10.5 and ever since then when dealing with views one must remember the following 2 points.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Meet Yarn - Improvement Over Npm</title>
    <link href="http://rajabishek.com/2016/Meet-Yarn-An-improvement-over-npm/"/>
    <id>http://rajabishek.com/2016/Meet-Yarn-An-improvement-over-npm/</id>
    <published>2016-11-30T14:20:35.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Whats-the-problem-with-npm"><a href="#Whats-the-problem-with-npm" class="headerlink" title="Whats the problem with npm ?"></a>Whats the problem with npm ?</h2><p>It seems like almost every other week there is a new JavaScript library taking the web community by storm. The community is increasingly vibrant, diverse and is moving rapidly on multiple fronts.</p>
<a id="more"></a>
<p>As we all know NPM was introduced to solve dependency management for JavaScript and then it quickly became the default package manager for Node.js. Since inception developers have been using npm for both frontend and backend dependency management. Sometimes good is not good enough. The NPM package manager had the following problems:</p>
<ul>
<li>The packages installed via npm were stored in the <code>node_modules</code> directory. Running <code>npm install</code> from the console after deleting the <code>node_modules</code> directory <strong>re-downloaded each and every package</strong> along with their dependencies, <strong>taking up a lot of time</strong>.</li>
<li>NPM always installs each dependency one after the other. Remember when we were grabbing a coffee after running <code>npm install</code> on console. Why can’t the downloads be parallelized ?</li>
<li>The npm package manager does not provide <strong>offline installation</strong> from any local cache.</li>
</ul>
<h2 id="Meet-Yarn"><a href="#Meet-Yarn" class="headerlink" title="Meet Yarn"></a>Meet Yarn</h2><p>Yarn is the newest package manager from facebook as a replacement for npm. It improves over features provided by the npm package manager. The yarn package manager was designed with keeping 3 principles in mind - Speed, Security &amp; Reliability. Its important to remember here that yarn is an improvement over npm. The packages are the same as on the NPM registry. Yarn is basically a new installer, where NPM structure and <strong>registry is the same</strong>.</p>
<h2 id="Speed"><a href="#Speed" class="headerlink" title="Speed"></a>Speed</h2><p>The yarn package manager is <strong>2 to 7x faster</strong> when compared to npm. This good performance comes from an interesting cache implementation. Whenever we install a package through yarn it caches it, so anytime we request for an installation of a package, it will first try to install it from its cache. By caching the packages in this way the npm packages can be installed without an internet connection with yarn. This comes in handy reducing the build time in Continuous Integration(CI) servers. They no longer rely on an internet connection and the npm registry, and your tests will pass even when npm goes down. It also executes the package downloads in parallel threads to make the best use of resources. </p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>The package installation process is secure. Anytime a package is installed and is about to be executed, it verifies the integrity of the package by using the <strong>package’s checksum</strong>. The same checksum method is also used to check if the caching process of the package was successful or not. When an incorrect checksum is detected, the packages is again re-downloaded from the original source.</p>
<h2 id="Reliability"><a href="#Reliability" class="headerlink" title="Reliability"></a>Reliability</h2><p>When you run <code>yarn</code> from console(equivalent to <code>npm install</code>), it creates <code>yarn.lock</code> file. This file guarantees that an install that worked on one system will work exactly the same way on any other system. The lock file keeps track of the exact package version installed in <code>node_modules</code> directory. It is recommended to add this file to version control since it gives the package version consistency across all environments.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>You can install <code>yarn</code> globally through npm.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yarn</div></pre></td></tr></table></figure></p>
<p>To update and keep up with the latest version of yarn, you can run the following.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn self-update</div></pre></td></tr></table></figure></p>
<h2 id="NPM-vs-Yarn-Cheat-Sheet"><a href="#NPM-vs-Yarn-Cheat-Sheet" class="headerlink" title="NPM vs Yarn Cheat Sheet"></a>NPM vs Yarn Cheat Sheet</h2><p>The yarn CLI replaces npm in your development workflow, either with a matching command or a new, similar command.</p>
<ul>
<li><code>npm install</code> === <code>yarn</code><br>Installation is the default behavior.</li>
<li><code>npm install babel-cli --save</code> === <code>yarn add babel-cli</code><br>The babel-cli package is downloaded in the <code>node_modules</code> directory and saved to the package.json in the dependencies section immediately.</li>
<li><code>npm uninstall babel-cli --save</code> === <code>yarn remove babel-cli</code><br>To not use –save option explicitly while uninstalling a package to remove the entry from the package.json file can be defaulted in NPM by running the command <code>npm config set save true</code> on console. But this is not needed in the yarn package manager, adding and removing entries from package.json is default in yarn.</li>
<li><code>npm install babel-cli --save-dev</code> === <code>yarn add babel-cli --dev</code><br>The babel-cli package is downloaded in the <code>node_modules</code> directory and saved to the package.json in the dev dependencies section immediately.</li>
<li><code>npm update --save</code> === <code>yarn upgrade</code><br>The package version number moves up and an upgrade is happening. Its good that yarn called it <code>upgrade</code> instead of <code>update</code> since that is what is happening.</li>
<li><code>npm install babel-cli --global</code> === <code>yarn global add babel-cli</code><br>This installs the package globally. Infact you can use yarn to manage itself globally by running <code>yarn global add yarn</code> from the console. For following commands, if you know NPM you are ready to go.<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm init        → yarn init</div><div class="line">npm link        → yarn link</div><div class="line">npm outdated    → yarn outdated</div><div class="line">npm publish     → yarn publish</div><div class="line">npm run         → yarn run</div><div class="line">npm cache clean → yarn cache clean</div><div class="line">npm login       → yarn login</div><div class="line">npm logout      → yarn logout</div><div class="line">npm test        → yarn test</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="New-features"><a href="#New-features" class="headerlink" title="New features"></a>New features</h2><p>Yarn has some great new features that NPM doesn’t have. You can check the licenses of your dependencies and you can also generate your license dependencies using the following commands.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yarn licenses </div><div class="line">yarn licenses generate</div></pre></td></tr></table></figure></p>
<p>From the console you can also run <code>yarn why &lt;package-name&gt;</code> to identify why this package is installed and which other packages are dependent on it. If you have some time, thank <a href="https://github.com/ocombe" target="_blank" rel="external">Oliver Combe</a> for this feature.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn why babel-cli</div></pre></td></tr></table></figure></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Yarn in its infancy has already brought significant improvements in the way JavaScript packages are fetched from global registries into local environments, especially with regard to speed and security. As far as I have worked with yarn it looks amazing and I have no complaints. Moreover the project being backed by big tech giants like Google and Facebook makes me feel positive that it can become the official npm package manager soon.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Whats-the-problem-with-npm&quot;&gt;&lt;a href=&quot;#Whats-the-problem-with-npm&quot; class=&quot;headerlink&quot; title=&quot;Whats the problem with npm ?&quot;&gt;&lt;/a&gt;Whats the problem with npm ?&lt;/h2&gt;&lt;p&gt;It seems like almost every other week there is a new JavaScript library taking the web community by storm. The community is increasingly vibrant, diverse and is moving rapidly on multiple fronts.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Programming in Go</title>
    <link href="http://rajabishek.com/2016/Programming-in-go/"/>
    <id>http://rajabishek.com/2016/Programming-in-go/</id>
    <published>2016-10-29T10:47:32.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. It is widely available on a number of platforms and has a robust well documented common library and focuses on good software engineering principles.</p>
<a id="more"></a>
<p>Go was created in 2007 at Google by <strong>Robert Griesemer</strong>, <strong>Rob Pike</strong>, and <strong>Ken Thompson</strong> as an experimental project. Go combines the development speed of working in a dynamic language like Python with the performance and safety of a compiled language like C or C++.</p>
<h2 id="Go-toolset"><a href="#Go-toolset" class="headerlink" title="Go toolset"></a>Go toolset</h2><p>We need to install the Go toolset before we begin working in Go. Before installing the Go toolset lets do some preparation work. The Go toolset uses an environment variable called <code>GOPATH</code> to find the Go source code. We can set the <code>GOPATH</code> to anything we want, but to make things a little bit easier let set it to our home directory. If you are on a mac open the terminal and enter the following.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">'export GOPATH=$HOME\n'</span> &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>Close the terminal, reopen it and enter <code>env</code> to the list of environment variables. You should see an entry for <code>GOPATH</code>. Now head over to the official <a href="golang.org/dl">downloads</a> page and run the installer for your platform. To confirm the installation run <code>go version</code> from the command line. The Go toolset is made up of several different commands and subcommands. You can pull up a list of those commands by <code>go help</code>.</p>
<p>Mac users can also install Go from the command line using homebrew by running <code>brew install go</code>. I have personally installed Go in my machine through homebrew as it will easily allow me to upgrade to a newer version by just running <code>brew upgrade go</code>.</p>
<h2 id="First-program"><a href="#First-program" class="headerlink" title="First program"></a>First program</h2><p>Lets write the typical first hello world program in Go.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"Hello world from Raj Abishek"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You can save the code in a file called <code>code.go</code> and then we can execute the file by running <code>go run code.go</code>. Ok, I see no compiled binary then is Go an interpreted language ? No, the <code>go run</code> command takes the subsequent files (separated by spaces), compiles them into an executable saved in a temporary directory, and then runs the program. Its like Javascript, every time we run the program the code is compiled.</p>
<p>If you had made some mistake somewhere while typing the program, the compiler will give you hints about where the mistake lies. Like most compilers, the Go compiler is extremely scrupulous and does not tolerate any mistakes.</p>
<h2 id="Understanding-Hello-world"><a href="#Understanding-Hello-world" class="headerlink" title="Understanding Hello world"></a>Understanding Hello world</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"Hello world from Raj Abishek"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>package main</code> at the top is a package declaration. Packages are Go’s way of organizing and reusing code. For now, just make sure to include this line in any program you write.</p>
<p>Go doesn’t care about whitespace. We use whitespaces to make programs more readable. The <code>import &quot;fmt&quot;</code> imports the <code>fmt</code> package(short for format). The import keyword is how we include code from other packages to use with our program. The <code>fmt</code> package implements formatting for input and output. The <code>fmt</code> package’s files would contain <code>package fmt</code> at the top of them.</p>
<p>It is important to remember here that when we import a package we always provide a string literal. Notice that <code>fmt</code> is surrounded by double quotes. Anything surrounded in double quotes is known as a string literal, which is a type of expression.</p>
<p>We define functions in Go with the <code>func</code> keyword followed by the name of the function(main, in this case), a list of zero or more parameters surrounded by parentheses, an optional return type, and a body which is surrounded by curly braces. The main function we defined above has no parameters, doesn’t return anything, and has only one statement.</p>
<p>We had to name the function as <code>main</code> because that is the first function that gets called when you execute the Go program. To print the contents out to the console we do <code>fmt.Println(&quot;Output to console&quot;)</code>. We are accessing the Println function inside the fmt package and invoking it using one string argument.</p>
<p>To find documentation details about a specific function in a package run the command <code>godoc &lt;package-name&gt; &lt;function-name&gt;</code>. If we deliberately read out the program that we just wrote out loud, it would go like this.</p>
<blockquote>
<p>Create a new Go program that references the fmt library and contains one function called main. That function takes no arguments and doesn’t return anything. It accesses the Println function from the fmt package and invokes it using one string argument.</p>
</blockquote>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>Go is a statically typed programming language. Variables always have a specific type and that type cannot change. In every programming language you need some way to represent numbers(integers and floating point numbers), strings or characters, and booleans. Lets see how Go deals with these type of data.</p>
<h3 id="Integers"><a href="#Integers" class="headerlink" title="Integers"></a>Integers</h3><p>Generally, we split numbers into two different kinds integers and floating-point numbers. Go’s integer types are <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, and <code>int64</code>. The number at the end of each type tells us how many bits each of the types use. uint means <strong>unsigned integer</strong> while int means <strong>signed integer</strong>. In addition, there two alias types <code>byte</code>(which is the same as <code>uint8</code>) and <code>rune</code>(which is the same as <code>int32</code>).</p>
<p>There are also three machine dependent integer types <code>uint</code>, <code>int</code>, and <code>uintptr</code>. They are machine dependent because their size depends on the type of architecture you are using. Generally, if you are working with integers, you should just use the <code>int</code> datatype type.</p>
<h2 id="Floating-point-numbers"><a href="#Floating-point-numbers" class="headerlink" title="Floating point numbers"></a>Floating point numbers</h2><p>Floating-point numbers are numbers that contain a decimal component. Go has two floating point types <code>float32</code> and <code>float64</code> (also often referred to as single precision and double precision, respectively). Generally, we should stick with <code>float64</code> when working with floating point numbers.</p>
<p>Go also has two additional types for representing complex numbers(numbers with imaginary parts) <code>complex64</code> and <code>complex128</code>.</p>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>A string is a sequence of characters with a definite length used to represent textual data. String literals can be created using double quotes <code>&quot;Raj Abishek&quot;</code> or backticks <code>Raj Abishek</code>. The difference between these is that double quoted version cannot contain newlines but they allow special escape sequences to be used like <code>\n</code> for new line and <code>\t</code> for a tab.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="built_in">len</span>(<span class="string">"Raj Abishek"</span>)) <span class="comment">// gets the length of the string</span></div><div class="line">    fmt.Println(<span class="string">"Raj Abishek"</span>[<span class="number">0</span>]) <span class="comment">// accesses the first character in the string</span></div><div class="line">    fmt.Println(<span class="string">"Raj "</span> + <span class="string">"Abishek"</span>) <span class="comment">// concatenates the two strings together</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Notice that in the output for the second print statement you see <code>82</code> instead of <code>R</code>. This is because the character is represented by a byte in Go (byte is an integer).</p>
<h2 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h2><p>A boolean value is a special 1-bit integer type used to represent <code>true</code> and <code>false</code> (or on and off). Three logical operators are used with boolean values <code>&amp;&amp;</code>, <code>||</code> and <code>!</code> which currespond to the boolean operation <code>AND</code>, <code>OR</code> and <code>NEGATION</code> respectively.</p>
<h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>A variable is a storage location, with a specific type and an associated name. Variables in Go are created by first using the var keyword, then specifying the variable name(message) and the type(string), and finally, assigning a literal value to the variable. A var statement can be at package or function level.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> message <span class="keyword">string</span> = <span class="string">"Hello world from Raj Abishek"</span></div><div class="line">    fmt.Println(message)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Assigning a value is optional. As shown below we can split into two statements, one that declares the variable and another that assigns a value. Variables can change their value throughout the lifetime of a program.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> message <span class="keyword">string</span> <span class="comment">//Declare a variable called message that can hold string values</span></div><div class="line">    message = <span class="string">"Hello world"</span> <span class="comment">//Assigns a value to the message variable</span></div><div class="line">    fmt.Println(message)</div><div class="line"></div><div class="line">    message = message + <span class="string">" from Raj Abishek"</span> <span class="comment">//Re assign a new value to the message variable</span></div><div class="line">    fmt.Println(message)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Because creating a new variable with a starting value is so common, Go also supports a shorter statement.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">message := <span class="string">"Raj Abishek"</span></div><div class="line">age, name, isActive := <span class="number">20</span>, <span class="string">"Raj Abishek"</span>, <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p><code>:</code> is required before the <code>=</code>, this is how Go compiler knows that this is a variable declaration and not an assignment expression. Also observe that no type was specified, the type is not necessary because the Go compiler can infer the type based on the literal value you assign the variable.</p>
<p>Because we are assigning a string literal, message is given the type string. This is called as type inference. This is present in many other modern programming languages like Scala, Swift also. The compiler can also do type inference with the var statement:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">message := <span class="string">"Raj Abishek"</span> <span class="comment">//message is infered as a string</span></div><div class="line">integer := <span class="number">42</span> <span class="comment">//integer is infered as an int</span></div><div class="line">floating := <span class="number">3.142</span> <span class="comment">//floating is infered as a float64</span></div><div class="line"><span class="built_in">complex</span> := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex is infered as a complex128</span></div></pre></td></tr></table></figure></p>
<p>Generally you should use the <code>:=</code> shorter form whenever possible since as it is seen as the idiomatic usage of the language. It is important to remember that type inference will work only if you provide an initial value, because the only way for the compiler to infer the data type in from the initial value. The following Go code is invalid an will not compile.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message</div></pre></td></tr></table></figure></p>
<p>Variable names must start with a letter and may contain letters, numbers, or the underscore symbol. camelCase is the preferred way to name the variables in Go.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name := <span class="string">"Raj Abishek"</span></div><div class="line">fmt.Println(<span class="string">"My name is"</span>, name)</div></pre></td></tr></table></figure></p>
<h2 id="Zero-Values"><a href="#Zero-Values" class="headerlink" title="Zero Values"></a>Zero Values</h2><p>Variables declared without an explicit initial value are given their zero value. The zero value is <code>0</code> for numeric types, <code>false</code> for the boolean type, and <code>&quot;&quot;</code>(the empty string) for strings.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> integer <span class="keyword">int</span></div><div class="line">	<span class="keyword">var</span> floating <span class="keyword">float64</span></div><div class="line">	<span class="keyword">var</span> boolean <span class="keyword">bool</span></div><div class="line">	<span class="keyword">var</span> text <span class="keyword">string</span></div><div class="line">	fmt.Println(integer, floating, boolean, text)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p>Constants are essentially variables whose values cannot be changed later. You use the <code>const</code> keyword instead of the <code>var</code> keyword for creating them.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">"Raj Abishek"</span></div><div class="line">    fmt.Println(name)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If you try to re assign a constant then it results in a compile time error. Constants are a good way to reuse common values in a program without writing out each time. For example, <code>Pi</code> in the <code>math</code> package is defined as a constant.</p>
<p>Go also has another shorthand when you need to define multiple variables. Use the keyword <code>var</code>(or <code>const</code>) followed by parentheses with each variable on its own line as shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">    name = <span class="string">"Raj Abishek"</span></div><div class="line">    message = <span class="string">"Hello world"</span></div><div class="line">    age = <span class="number">20</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><p>The range of places where you are allowed to use a variable is called the scope of the variable. Like Java, C and C++, Go is <strong>lexically scoped using blocks</strong>. This means that the variable exists within the nearest curly braces ({}), or block, including any nested curly braces (blocks), but not outside of them.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line">message := <span class="string">"Hello world"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  name := <span class="string">"Raj Abishek"</span></div><div class="line">  fmt.Println(name)</div><div class="line">  fmt.Println(message)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">another</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(message)</div><div class="line">    fmt.Println(name) <span class="comment">//This statement will result in a compile time error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Iteration-amp-Loops"><a href="#Iteration-amp-Loops" class="headerlink" title="Iteration &amp; Loops"></a>Iteration &amp; Loops</h2><p>The for statement allows us to repeat a list of statements (a block) multiple times. The following is equivalent to while loops present in other programming languages.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    i := <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i &lt;= <span class="number">10</span> &#123;</div><div class="line">        fmt.Println(i)</div><div class="line">        i = i + <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The above code prints the numbers from 1 to 10 in ascending order. Other programming languages have a lot of different types of loops (while, do, until, foreach, …) but Go only has one that can be used in a variety of different ways. The previous program could also have been written like this. This is equivalent to the for loop present in other languages.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i&lt;=<span class="number">10</span>; i++ &#123;</div><div class="line">        fmt.Println(i)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The init and post statement are optional as shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    sum := <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> ; sum &lt; <span class="number">1000</span>; &#123;</div><div class="line">		    sum += sum</div><div class="line">	  &#125;</div><div class="line">    fmt.Println(sum)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="comment">//infinite loop</span></div><div class="line">	  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="The-if-statement"><a href="#The-if-statement" class="headerlink" title="The if statement"></a>The if statement</h2><p>We can choose to do different things based on a condition. For that, we use the if statement. The else part is optional like in other programming languages. If the condition in the if evaluates to true, then the block after the condition is run; otherwise, either the block is skipped, or if the else block is present then that block is run.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">    <span class="comment">// even</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// odd</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The if statement can start with a <strong>short statement</strong> to execute before the condition. Variables declared by the statement are only in scope until the end of the if.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGreetingMessage</span><span class="params">(fullname <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> firstName := strings.Split(fullname, <span class="string">" "</span>)[<span class="number">0</span>]; firstName == <span class="string">"Raj"</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello world from "</span> + firstName</div><div class="line">	  &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Another hello world from "</span> + firstName</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// return firstName - this will result in a compile time error</span></div><div class="line">	  <span class="keyword">return</span> <span class="string">"Hello world"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    message := getGreetingMessage(<span class="string">"Raj Abishek"</span>)</div><div class="line">    fmt.Println(message)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above the <code>firstName</code> variable is only available inside of the if statement. If statements can also have else if parts as shown below. As you can see above variables declared inside an if short statement are also available inside any of the else blocks.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">    <span class="comment">// divisible by 2</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> &#123;</div><div class="line">    <span class="comment">// divisible by 3</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span> &#123;</div><div class="line">    <span class="comment">// divisible by 4</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Like in other languages the conditions are checked top down and the first one to result in true will have its associated block executed and none of the other blocks will execute. A sample program to print only the even number from 1 to 10 is shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</div><div class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</div><div class="line">            fmt.Println(i, <span class="string">" "</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Switch-statement"><a href="#Switch-statement" class="headerlink" title="Switch statement"></a>Switch statement</h2><p>To write a program that printed the English names for numbers from 1 to 5 if we used if statements then we would have a clumsy code. We would have a lot of else if statements and the program would like hard to maintain and make it is less readable. Instead we could use the switch statement in Go. We would write the program like this:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> i &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>: fmt.Println(<span class="string">"Zero"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: fmt.Println(<span class="string">"One"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>: fmt.Println(<span class="string">"Two"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>: fmt.Println(<span class="string">"Three"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">4</span>: fmt.Println(<span class="string">"Four"</span>)</div><div class="line">    <span class="keyword">case</span> <span class="number">5</span>: fmt.Println(<span class="string">"Five"</span>)</div><div class="line">    <span class="keyword">default</span>: fmt.Println(<span class="string">"Unknown Number"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Like an if statement, each case is checked top down and the first one to succeed is chosen. A switch also supports a default case that will happen if none of the cases matches the value (similar to how the else works in an if statement). A case body breaks automatically, unless it ends with a <code>fallthrough</code> statement. A switch statement can also start with a short statement to execute before the condition.</p>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>An array is a ordered sequence of items of a single type with a fixed length.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> data [<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">//declares an array called data of 5 integers</span></div><div class="line">    data[<span class="number">4</span>] = <span class="number">100</span></div><div class="line">    fmt.Println(data)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You should see the output <code>[0 0 0 0 100]</code>. Array elements can be accessed using their indexes. The index starts from zero. To access the nth element we use <code>data[n-1]</code>. A sample program to get the average of the elements of an integer array is shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> data [<span class="number">4</span>]<span class="keyword">float64</span></div><div class="line">    data[<span class="number">0</span>] = <span class="number">10</span></div><div class="line">    data[<span class="number">1</span>] = <span class="number">20</span></div><div class="line">    data[<span class="number">2</span>] = <span class="number">30</span></div><div class="line">    data[<span class="number">3</span>] = <span class="number">40</span></div><div class="line">    <span class="keyword">var</span> total <span class="keyword">float64</span> = <span class="number">0</span> <span class="comment">//Or we could do total := 0.0</span></div><div class="line">    length := <span class="built_in">len</span>(data)</div><div class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; length; i++ &#123;</div><div class="line">            total += data[i] <span class="comment">//#1</span></div><div class="line">    &#125;</div><div class="line">    fmt.Println(total / <span class="keyword">float64</span>(length)) <span class="comment">//#2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>There are some important observations to make in the above code. Firstly we did not declare the variable using shorthand <code>total := 0</code> in the above code because then <code>total</code> would have inferred to be of the type <code>int</code>. Since we want total to be of type <code>float64</code> so that we can add the <code>data[i]</code> while totaling and divide by <code>float64(length)</code> while computing the average, we explicitly mentioned its type as <code>float64</code> using the var statement. If we wrote the code as <code>total := 0</code> then  we would get compile time error due to line 1 and line 2 due to mismatched types <code>int</code> and <code>float64</code>.</p>
<p>But what we can do is <code>total := 0.0</code>. In this way the Go compiler would infer the type of total as <code>float64</code> since <code>0.0</code> literal is seen as a double precision value. Next we have the <code>len</code> function that returns the length of the array as an <code>int</code>. But since <code>total</code> is of type <code>float64</code> we cannot directly divide by <code>length</code>. Go doesn’t allow us to operate between two mismatching data types. We need to convert length into a <code>float64</code> which is done by <code>float64(length)</code>. This is called as type conversion. Unlike in C, in Go assignment between items of different type requires an explicit conversion. In general, to convert between types, you use the type name like a function. The expression <code>T(v)</code> converts the value <code>v</code> to the type <code>T</code>.</p>
<p>We can also use a special form of a for loop with array in Go.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">total := <span class="number">0.0</span></div><div class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> data &#123;</div><div class="line">    total += value</div><div class="line">&#125;</div><div class="line">fmt.Println(total / <span class="keyword">float64</span>(<span class="built_in">len</span>(data)))</div></pre></td></tr></table></figure></p>
<p>As you can see above with this variation of the loop <code>i</code> and <code>value</code> represents the index and the value of each iteration. At every iteration <code>i</code> is the index and <code>value</code> in data[index]. We use the keyword <code>range</code> followed by the name of the variable we want to loop over. But when we compile the above program and run it will result in a compile time error because Go doesn’t allow us to create variables that we never use. The <code>i</code> was never used inside of the for loop and therefore we have to replace it with a single underscore to tell the compiler that we don’t need this. The modified program would be:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">total := <span class="number">0.0</span></div><div class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> data &#123;</div><div class="line">    total += value</div><div class="line">&#125;</div><div class="line">fmt.Println(total / <span class="keyword">float64</span>(<span class="built_in">len</span>(data)))</div></pre></td></tr></table></figure></p>
<p>If you only want the index, drop the “, value” entirely.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> index := <span class="keyword">range</span> data &#123;</div><div class="line">    fmt.Println(<span class="string">"The index is: "</span>, index)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As we had a shorthand syntax to create variables with initial values, we can also in a similar way create array variables with initial values.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data := [<span class="number">4</span>]<span class="keyword">float64</span>&#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span> &#125;</div><div class="line">collection := [<span class="number">4</span>]<span class="keyword">float64</span> &#123;</div><div class="line">    <span class="number">100</span>,</div><div class="line">    <span class="number">200</span>,</div><div class="line">    <span class="number">300</span>,</div><div class="line">    <span class="number">400</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above we need not force the declaration on a single line. We can break up into multiple line however the extra trailing <code>,</code> after 400 is required by Go. It allows us to easily remove an element from the array by commenting out the line.</p>
<p>As you can see above while declaring the array we have to hardcode the length of the array. An array’s length is part of its type, so arrays cannot be resized. Because of this and other limitations, you rarely see arrays used directly in Go code. Instead we usually use something called as a slice, which is data type build on top of an array.</p>
<h2 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h2><p>A slice is a segment of an array. Like arrays, slices are indexable and have a length. Unlike arrays, this length is allowed to change. We declare a slice as follows. We do not put the length or the number of elements inside the square brackets. The type <code>[]T</code> is a slice with elements of type <code>T</code>. Whenever we create a slice internally first the underlying array is created and then Go builds a slice that references it.</p>
<p>A slice has both a <strong>length</strong> and a <strong>capacity</strong>. The length of a slice is the number of elements it contains. The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice. The length and capacity of a slice <code>s</code> can be obtained using the expressions <code>len(s)</code> and <code>cap(s)</code>. The zero value of a slice is nil. A nil slice has a length and capacity of 0 and has no underlying array.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data []<span class="keyword">float64</span></div></pre></td></tr></table></figure></p>
<p>As you can see above we have created a slice called data with a length of zero. To create a size with a length we use the built in make function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data := <span class="built_in">make</span>([]<span class="keyword">float64</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<p>As you can see above we have created a slice that is associated with an underlying <code>float64</code> array of length <code>5</code>. Slices are always associated with some array, and although they can never be longer than the array, they can be smaller. The make function also allows a third parameter that represents the capacity of the underlying array that the slice points to.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data := <span class="built_in">make</span>([]<span class="keyword">float64</span>, <span class="number">5</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p>In the above code we have create a slice of length <code>5</code> that is associated with an underlying <code>float64</code> array of length <code>10</code>. Another way to create slices is to use the <code>[low:high]</code> expression from an existing array. The <code>low</code> is the index of where to start the slice and <code>high</code> is the index of where to end it(but not including the index itself). It is similar to slicing sequences in Python except that we don’t have negative indexing here.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array := [<span class="number">5</span>]<span class="keyword">float64</span>&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;</div><div class="line">slice := array[<span class="number">0</span>:<span class="number">5</span>]</div></pre></td></tr></table></figure></p>
<p>When we do <code>array[0:5]</code> returns <code>[1, 2, 3, 4, 5]</code>, <code>array[1:4]</code> returns <code>[2, 3, 4]</code>. For convenience, we are also allowed to omit low, high, or even both low and high. <code>array[0:]</code> is the same as <code>array[0:len(array)]</code>, <code>array[:n]</code> is the same as <code>array[0:n]</code>, and <code>array[:]</code> is the same as <code>array[0:len(arr)]</code>.</p>
<p>A slice does not store any data, it just describes a section of an underlying array. Changing the elements of a slice modifies the corresponding elements of its underlying array. Other slices that share the same underlying array will see those changes.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    names := [<span class="number">4</span>]<span class="keyword">string</span>&#123;</div><div class="line">		    <span class="string">"Raj"</span>,</div><div class="line">		    <span class="string">"Sailesh"</span>,</div><div class="line">		    <span class="string">"Dev"</span>,</div><div class="line">		    <span class="string">"Kani"</span>,</div><div class="line">	  &#125;</div><div class="line">    fmt.Println(names) <span class="comment">//[Raj Sailesh Dev Kani]</span></div><div class="line">    a := names[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">    b := names[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">    fmt.Println(a, b) <span class="comment">//[Raj Sailesh Sailesh Dev]</span></div><div class="line"></div><div class="line">    b[<span class="number">0</span>] = <span class="string">"new"</span></div><div class="line">    fmt.Println(a, b) <span class="comment">//[Raj new new Dev]</span></div><div class="line">    fmt.Println(names) <span class="comment">//[Raj new Dev Kani]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In addition to indexing Go includes two built in functions to assist with slices: <code>append</code> and <code>copy</code>. To append elements to the end of slice we use the <code>append</code> function. If there is space in the underlying array the element is added after the last element and the length of the slice is incremented. If there is no space in the underlying array then a new array is created and the existing elements are copied over to the new array, the new element is added to the end and then the new slice is returned.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    slice1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">//shorthand form to create a new slice from initial values</span></div><div class="line">    slice2 := <span class="built_in">append</span>(slice1, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">    fmt.Println(slice1, slice2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see from the above code if you omit the length of the elements inside the square bracket that is the shorthand from for creating a new slice with initial values. <code>slice1</code> has <code>[1, 2, 3]</code> and <code>slice2</code> has <code>[1, 2, 3, 4, 5]</code>. The <code>append</code> function creates a new slice by taking an existing slice(the first argument) and appending all the following arguments to it.</p>
<p>The <code>copy</code> function in Go takes two arguments <code>dst</code> and <code>src</code>. All of the entries in <code>src</code> are copied into <code>dst</code> overwriting whatever is there. If the lengths of the two slices are not the same, the smaller of the two will be used.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    slice1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">    slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</div><div class="line">    <span class="built_in">copy</span>(slice2, slice1)</div><div class="line">    fmt.Println(slice1, slice2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>On running the above program <code>slice1</code> has <code>[1, 2, 3]</code> and <code>slice2</code> has <code>[1, 2]</code>. The contents of <code>slice1</code> are copied into <code>slice2</code>, but because <code>slice2</code> has room for only two elements, only the first two elements of <code>slice1</code> are copied.</p>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>A map is an unordered collection of key value pairs (maps are also sometimes called associative arrays, hash tables, or dictionaries). Maps are used to look up a value by its associated key. Here’s an example of a map in Go. To create a map in Go we have to provide the datatype of both the key and the value.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div></pre></td></tr></table></figure></p>
<p>The above code create a map with the type of keys as <code>string</code> and the type of values as <code>int</code>. Maps have to be initialized before they are used in the program, or else we would get a run time error, because the zero value of a map is <code>nil</code>. A nil map has no keys, nor can keys be added. The <code>make</code> function returns a map of the given type, initialized and ready for use.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line">data[<span class="string">"key"</span>] = <span class="number">10</span> <span class="comment">// This is how we insert or update an element in map</span></div><div class="line">fmt.Println(data[<span class="string">"key"</span>])</div></pre></td></tr></table></figure></p>
<p>The length of a map(found by doing len(data)) can change as we add new items to it. We can use the <code>delete</code> function to delete items from a map.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">delete</span>(data, <span class="string">"key"</span>)</div></pre></td></tr></table></figure></p>
<p>Suppose we tried to look up an element that doesn’t exist then a map returns the zero value for the value type(which for strings is the empty string). The zero value for integer type is 0. Although we could check for the zero value in a condition (data[“jsjsjs”] == 0), Go provides a better way.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">number, ok := data[<span class="string">"jsjsjs"</span>]</div><div class="line">fmt.Println(number, ok)</div></pre></td></tr></table></figure></p>
<p>The first value is the result of the lookup, the second tells us whether or not the lookup was successful. Here since we have no key called <code>jsjsjs</code> <code>number</code> will be zero and <code>ok</code> will be false. In Go programs we would often see code like this.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> number, ok := data[<span class="string">"jsjsjs"</span>]; ok &#123;</div><div class="line">    fmt.Println(number, ok)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We try to get the value from the map, if successful then we execute the code block. The shorthand form to create map in Go is like this.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">numbers := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;</div><div class="line">    <span class="number">1</span>: <span class="string">"One"</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">"Two"</span>,</div><div class="line">    <span class="number">3</span>: <span class="string">"Three"</span>,</div><div class="line">    <span class="number">4</span>: <span class="string">"Four"</span>,</div><div class="line">    <span class="number">5</span>:  <span class="string">"Five"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Go supports nesting of maps as well. To nest maps we could do the following.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">        <span class="string">"13bce1106"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"name"</span>:<span class="string">"Raj Abishek"</span>,</div><div class="line">            <span class="string">"state"</span>:<span class="string">"Tamil Nadu"</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"13bce1118"</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</div><div class="line">            <span class="string">"name"</span>:<span class="string">"Sailesh Dev"</span>,</div><div class="line">            <span class="string">"state"</span>:<span class="string">"Tamil Nadu"</span>,</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> student, ok := data[<span class="string">"13bce1106"</span>]; ok &#123;</div><div class="line">        fmt.Println(student[<span class="string">"name"</span>], student[<span class="string">"state"</span>])</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Function definition starts with the <code>func</code> keyword, followed by the function’s name followed by the parameters followed by the return type. Collectively, the parameters and the return type are known as the function’s signature. The following code defines a function called average that takes takes in a slice of type <code>float64</code> and returns one <code>float64</code>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">average</span><span class="params">(data []<span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">    total := <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> data &#123;</div><div class="line">        total += value</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total / <span class="keyword">float64</span>(<span class="built_in">len</span>(data))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    slice := []<span class="keyword">float64</span>&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">    fmt.Println(average(slice))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In Go we can also return multiple values from a function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFullName</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"Raj"</span>, <span class="string">"Abishek"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  firstName, lastName := getFullName()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Multiple value returning functions are commonly used in code to return the error value along with the result, or sometimes a boolean value to indicate the success of the operation.</p>
<p>Go’s return values may be named. If so, they are treated as variables defined at the top of the function. These names should be used to document the meaning of the return values. A return statement without arguments returns the named return values. This is known as a <strong>naked return</strong>. Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">  <span class="comment">//as though x and y variables are declared here</span></div><div class="line">	x = sum * <span class="number">4</span> / <span class="number">9</span></div><div class="line">	y = sum - x</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(split(<span class="number">17</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above <code>x</code> and <code>y</code> are treated as variables that we defined at the start of the <code>split</code> function. When we do <code>return</code> Go returns the named return values, it is as though we do <code>return x, y</code>.</p>
<h2 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h2><p>A defer statement defers the execution of a function until the surrounding function returns. The deferred call’s arguments are evaluated immediately, but the function call is not executed until the surrounding function returns. The following code gives hello world as the output.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"world"</span>)</div><div class="line">	  fmt.Println(<span class="string">"hello"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Print(<span class="string">"counting"</span>, <span class="string">" "</span>)</div><div class="line">	  <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</div><div class="line">		    <span class="keyword">defer</span> fmt.Print(i, <span class="string">" "</span>)</div><div class="line">	  &#125;</div><div class="line">    fmt.Print(<span class="string">"done"</span>, <span class="string">" "</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The above code will produce the output <code>counting done 10 9 8 7 6 5 4 3 2 1</code>.</p>
<h2 id="Variadic-Parameters"><a href="#Variadic-Parameters" class="headerlink" title="Variadic Parameters"></a>Variadic Parameters</h2><p>The last parameter of a function in Go can be a variadic parameter.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(args ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    total := <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</div><div class="line">        total += v</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see in the above code the args parameter is a variadic parameter meaning while calling the functions we can pass multiple arguments zero or more to the <code>add</code> function and all of those will be available in the <code>args</code> array. The <code>...</code> called as ellips is used before the type name of the last parameter to identify it as a variadic parameter.</p>
<p>Do you remember the <code>Println</code> function from the <code>fmt</code> package we can pass any number of variable to output the values right, internally it uses a variadic parameter. The <code>Println</code> function takes any number of values of any type(the special interface{} type). This is precisely how the fmt.Println function is implemented.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></div></pre></td></tr></table></figure></p>
<p>We can also pass a slice followed by ellipsis while calling a function with a variadic parameter as shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">    fmt.Println(add(data...))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Functions can also be defined recursively in Go. Here is one way to compute the factorial of a number.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(x <span class="keyword">uint</span>)</span> <span class="title">uint</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> x== <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x * factorial(x<span class="number">-1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><p>Functions are values too. They can be passed around just like other values. Function values may be used as function arguments and return values. Go functions may be closures.</p>
<p>A closure is a function value that references variables from outside its body. It can capture constants and variables from the surrounding context in which it is defined. The closure can then refer to and modify the values of those constants and variables from within its body, even if the original scope that defined the constants and variables no longer exists.</p>
<p>In Go, the simplest form of a closure that can capture values is a nested function, written within the body of another function. A nested function can capture any of its outer function’s arguments and can also capture any constants and variables defined within the outer function.</p>
<p>Here’s an example of a function called <code>makeIncrementer</code>, which contains a nested function called <code>incrementer</code>. The nested <code>incrementer</code> function captures two values, <code>runningTotal</code> and <code>amount</code>, from its surrounding context. After capturing these values, <code>incrementer</code> is returned by <code>makeIncrementer</code> as a closure that increments <code>runningTotal</code> by <code>amount</code> each time it is called.</p>
<p>As you can see below the <code>makeIncrementer</code> function returns a closure. Each closure is bound to its own <code>runningTotal</code> variable.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeIncrementer</span><span class="params">(amount <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">    runningTotal := <span class="number">0</span></div><div class="line">    incrementer := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">        runningTotal += amount</div><div class="line">        <span class="keyword">return</span> runningTotal</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> incrementer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    incrementByTen := makeIncrementer(<span class="number">10</span>)</div><div class="line">    fmt.Println(incrementByTen()) <span class="comment">// returns a value of 10</span></div><div class="line">    fmt.Println(incrementByTen()) <span class="comment">// returns a value of 20</span></div><div class="line">    fmt.Println(incrementByTen()) <span class="comment">// returns a value of 30</span></div><div class="line"></div><div class="line">    incrementBySeven := makeIncrementer(<span class="number">7</span>)</div><div class="line">    fmt.Println(incrementBySeven()) <span class="comment">// returns a value of 7</span></div><div class="line"></div><div class="line">    fmt.Println(incrementByTen()) <span class="comment">// returns a value of 40</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The return type of <code>makeIncrementer</code> is <code>func() int</code>. This means that it returns a function, rather than a simple value. The function it returns has no parameters, and returns an <code>int</code> value each time it is called. When considered in isolation, the nested <code>incrementer</code> function might seem unusual.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">incrementer := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">    runningTotal += amount</div><div class="line">    <span class="keyword">return</span> runningTotal</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <code>incrementer</code> function doesn’t have any parameters, and yet it refers to <code>runningTotal</code> and <code>amount</code> from within its function body. It does this by <strong>capturing a reference</strong> to <code>runningTotal</code> and <code>amount</code> from the surrounding function and using them within its own function body.</p>
<p>Capturing by reference ensures that <code>runningTotal</code> and <code>amount</code> do not disappear when the call to <code>makeIncrementer</code> ends, and also ensures that <code>runningTotal</code> is available the next time the <code>incrementer</code> function is called. Closure and recursion are powerful programming techniques that form the basis of a paradigm known as <strong>functional programming</strong>.</p>
<h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><p>When we pass a variable to a function it is passed by copy.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sample</span><span class="params">(a <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    a = <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    b := <span class="number">5</span></div><div class="line">    sample(b)</div><div class="line">    fmt.Println(b) <span class="comment">// b is still 5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As we can see above even though the sample function will not modify the original b variable in the main function. But what if we wanted to ? One way to accomplish this is through pointers. A pointer holds the memory address of a variable. The type <code>*T</code> is a pointer to a <code>T</code> value. Its zero value is <code>nil</code>. The statement <code>var pointer *int</code> declares an integer pointer will <code>nil</code> value. The <code>&amp;</code> operator generates a pointer to its operand.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pointer *<span class="keyword">int</span></div><div class="line">integer := <span class="number">42</span></div><div class="line">pointer = &amp;integer</div></pre></td></tr></table></figure></p>
<p>When we precede <code>&amp;</code> before a variable name we get the address of the variable in memory that we can store using a pointer. To give you a formal definition a <strong>pointer</strong> is a programming object that refers to (or “points to”) another value stored elsewhere in the computer memory using its memory address. A pointer references a location in memory. Thus what a pointer actually stores is an address of a memory location. Obtaining the value stored at that location is known as <strong>dereferencing</strong> or <strong>indirecting</strong> the pointer. Unlike C, Go has no pointer arithmetic.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="comment">//(a *int, b *int) is the same as (a, b *int)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b *<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">  temp := *a</div><div class="line">  *a = *b</div><div class="line">  *b = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    a := <span class="number">5</span></div><div class="line">    b := <span class="number">10</span></div><div class="line">    swap(&amp;a, &amp;b)</div><div class="line">    fmt.Println(a, b) <span class="comment">// a is 10 and b is 5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In Go when two or more consecutive named function parameters share a type, you can omit the type from all but the last as shown above. Pointers reference a location in memory where a value is stored rather than the value itself. By using a pointer <code>*int</code> the swap function is able to modify the original variables.</p>
<p>In Go, a pointer is represented using an asterisk followed by the type of the stored value <code>*type</code>. As you can see above we have two integer pointer in the <code>swap</code> function. An asterisk is also used to dereference pointer variables. Dereferencing a pointer gives us access to the value the pointer points to. We we did <code>temp := *a</code> we are saying store the value that the integer pointer a is pointing to in temp variable. We use the <code>&amp;</code> operator to find the address of a variable. <code>&amp;a</code> returns a <code>*int</code> (pointer to an int) because a is an <code>int</code>. <code>&amp;a</code> in main and <code>a</code> in <code>swap</code> refer to the same memory location.</p>
<p>The <code>new</code> built in function in Go also returns a pointer.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setValue</span><span class="params">(pointer *<span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    *pointer = value</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    pointer := <span class="built_in">new</span>(<span class="keyword">int</span>)</div><div class="line">    setValue(pointer, <span class="number">10</span>)</div><div class="line">    fmt.Println(*pointer) <span class="comment">// Output is 1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see from the above code the <code>new</code> built in function takes a type as an argument and allocates enough memory to fit a value of that type, and returns a pointer to it. We pass this pointer to the <code>setValue</code> function which dereferences the pointer to assign a value <code>10</code> to the memory location.</p>
<p>We don’t have to worry about deallocating memory in Go because like Java the Go programming language has a wonderful garbage collector in which memory is cleaned up automatically. Pointers are rarely used with Go’s built-in types, but they are extremely useful when paired with structs.</p>
<h2 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h2><p>A struct is a collection of fields.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</div><div class="line">    rollno <span class="keyword">string</span></div><div class="line">    name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    marks <span class="keyword">float64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We are defining a new data type called <code>Student</code> which is a struct that encapsulates 4 fields. Fields are like a set of grouped variables. Each field has a name and a type and is stored adjacent to the other fields in the struct. Like with functions, we can collapse fields that have the same type:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</div><div class="line">    rollno, name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    marks <span class="keyword">float64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We can create an instance of the <code>Student</code> in a variety of ways.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s Student</div></pre></td></tr></table></figure></p>
<p>The statement above will create a local <code>Student</code> variable that is by default set to zero. The above statement allocates memory for the struct instance on the stack(where all local variables go). There is generally less memory available for the stack. If you allocate too many objects, there is a risk of stack overflow. For a struct, zero means each of the fields is set to their corresponding zero value (0 for ints, 0.0 for floats, “” for strings, nil for pointers, etc.).</p>
<p>We can also use the <code>new</code> function to dynamically allocate memory for the <code>Student</code> instance. This allocates memory for the object on the free store(also called as heap).<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s := <span class="built_in">new</span>(Student) <span class="comment">//s is of type *Student</span></div></pre></td></tr></table></figure></p>
<p>This allocates memory for all the fields, sets each of them to their zero value, and returns a pointer to the struct <code>*Student</code>.</p>
<p>Pointers are often used with structs so that functions can modify their contents. But typically this is not the way we instantiate a struct because we usually provide initial values for the fields in the struct.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s := Student&#123;rollno: <span class="string">"13bce1106"</span>, name: <span class="string">"Raj Abishek"</span>, age: <span class="number">20</span>, marks: <span class="number">70.4</span>&#125; <span class="comment">//s is of type Student</span></div></pre></td></tr></table></figure></p>
<p>We can leave off the field names and provide the values in the same order as we defined them.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s := Student&#123;<span class="string">"13bce1106"</span>, <span class="string">"Raj Abishek"</span>, <span class="number">20</span>, <span class="number">70.4</span>&#125; <span class="comment">//s is of type Student</span></div></pre></td></tr></table></figure></p>
<p>If we instead wanted to dynamically create a struct instance and initialize it at the same time then we can use the following method. We should use the <code>&amp;</code> operator as shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s := &amp;Student&#123;<span class="string">"13bce1106"</span>, <span class="string">"Raj Abishek"</span>, <span class="number">20</span>, <span class="number">70.4</span>&#125; <span class="comment">//here s is of type *Student</span></div></pre></td></tr></table></figure></p>
<p>We can access the fields using the <code>.</code> operator as shown below.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s := Student&#123;<span class="string">"13bce1106"</span>, <span class="string">"Raj Abishek"</span>, <span class="number">20</span>, <span class="number">70.4</span>&#125; <span class="comment">//s is of type Student</span></div><div class="line">p := &amp;s</div><div class="line">fmt.Println(s.rollno, s.number, s.age, s.marks)</div><div class="line">fmt.Println(p.rollno, p.number, p.age, p.marks)</div></pre></td></tr></table></figure></p>
<p>To access the field <code>X</code> of a struct when we have the struct pointer <code>p</code> we could write <code>(*p).X</code>. However, that notation is cumbersome, so the language permits us instead to write just <code>p.X</code> as shown above, without the explicit dereference.</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><p>Go does not have classes. However, you can define methods on types. A method is a function with a special <strong>receiver argument</strong>. The receiver appears in its own argument list between the <code>func</code> keyword and the method name. The receiver is like a parameter, it has a name and a type but by creating the function in this way, it allows us to call the function using the <code>.</code> operator from an instance of the type.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"strings"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</div><div class="line">    rollno, name <span class="keyword">string</span></div><div class="line">    age <span class="keyword">int</span></div><div class="line">    marks <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Student)</span> <span class="title">getFirstName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> strings.Split(s.name, <span class="string">" "</span>)[<span class="number">0</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    s := Student&#123;<span class="string">"13bce1106"</span>, <span class="string">"Raj Abishek"</span>, <span class="number">20</span>, <span class="number">70.4</span>&#125;</div><div class="line">    fmt.Println(s.getFirstName())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above when we call <code>s.getFirstName()</code> from main we no longer need the &amp; operator (Go automatically knows to pass a pointer to the student for this method), and because this function can only be used with Students.</p>
<p>We can declare a method on non struct types too. You can only declare a method with a receiver whose type is defined in the same package as the method. You cannot declare a method with a receiver whose type is defined in another package (which includes the built in types such as <code>int</code>).<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</div><div class="line">		    <span class="keyword">return</span> <span class="keyword">float64</span>(-f)</div><div class="line">	  &#125;</div><div class="line">	  <span class="keyword">return</span> <span class="keyword">float64</span>(f)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    f := MyFloat(-math.Sqrt2)</div><div class="line">	  fmt.Println(f.Abs())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The output of the above program is <code>1.4142135623730951</code>. We have defined a type called <code>MyFloat</code> which is a <code>float64</code>. Since <code>MyFloat</code> is declared in this package we can declare a method called <code>Abs</code> that computes the absolute value of the number.</p>
<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><p>Every Go program is made up of packages. Programs start running in package <code>main</code>. An important part of high-quality software is code reuse. Its is best to stick with the <em>Don’t Repeat Yourself</em> principle. As we saw earlier functions are one way in which we can reuse code. Packages provide another mechanism for reusing code.</p>
<p>If you remember in almost every program we included the fmt package using <code>import &quot;fmt&quot;</code>. By convention, the package name is the same as the last element of the import path. For instance, the <code>math/rand</code> package comprises files that begin with the statement <code>package rand</code>.</p>
<p><code>fmt</code> is the name of a package that includes a variety of functions related to formatting<br>and output to the screen. Bundling such related code and functions as a part of a package gives us the following benefits.</p>
<ul>
<li>Avoids overlapping names - keeping functions names short and succinct</li>
<li>Organizes code - Easier to find code for reuse</li>
<li>Speeds up compiler - Eg. every time we compiler the fmt package need not be compiled</li>
</ul>
<h2 id="Exported-Names"><a href="#Exported-Names" class="headerlink" title="Exported Names"></a>Exported Names</h2><p>In Go, a name is exported if it begins with a capital letter. For example, <code>Pizza</code> is an exported name, as is <code>Pi</code>, which is exported from the <code>math</code> package. <code>pizza</code> and <code>pi</code> do not start with a capital letter, so they are not exported. When importing a package, you can refer only to its exported names. Any unexported names are not accessible from outside the package.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(math.Pi)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The above program works because we have a exported name called <code>Pi</code> in the <code>math</code> package. If we had some programming object in the <code>math</code> package that starts with a lowercase then that will not be accessible from outside of the package.</p>
<h2 id="Strings-Package"><a href="#Strings-Package" class="headerlink" title="Strings Package"></a>Strings Package</h2><p>Instead of writing out everything from scratch it is better if we can interface with existing libraries. Lets look at some of the commonly used packages in the Go language.</p>
<p>Go includes a large number of functions to work with strings in the <code>strings</code> package. To search for a smaller string in a bigger string, use the Contains function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.Contains(<span class="string">"test"</span>, <span class="string">"es"</span>)) <span class="comment">//true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Contains</code> function is <code>func Contains(s, substr string) bool</code>. The first parameter is the larger string, second is the string to search for and the function returns a boolean.</p>
<p>As you can see from the above code we can import multiple packages by placing the packages inside parenthesis. This is called as a <strong>factored import statement</strong>. It is good style to use the factored import statement over writing multiple import statements like.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"strings"</span></div></pre></td></tr></table></figure></p>
<p>To count the number of times a smaller string occurs in a bigger string we use the <code>Count</code> function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.Count(<span class="string">"test"</span>, <span class="string">"t"</span>)) <span class="comment">//2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Count</code> function is <code>func Count(s, substr string) int</code>. The first parameter is the larger string, the second is the smaller string and the function returns the count as <code>int</code>. To determine if a bigger string starts with a smaller string, use the <code>HasPrefix</code> function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.HasPrefix(<span class="string">"test"</span>, <span class="string">"te"</span>)) <span class="comment">//true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>HasPrefix</code> function is <code>func HasPrefix(s, prefix string) bool</code>. The first string is the larger string, the second is the smaller string and the function returns a boolean. Similarly to determine if a bigger string ends with a smaller string, use the <code>HasSuffix</code> function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.HasSuffix(<span class="string">"test"</span>, <span class="string">"st"</span>)) <span class="comment">//true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>HasSuffix</code> function is <code>func HasSuffix(s, prefix string) bool</code>. The first string is the larger string, the second is the smaller string and the function returns a boolean. To find the position of a smaller string in a bigger string, use the <code>Index</code> function (it returns -1 if not found).<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// func Index(s, sep string) int</span></div><div class="line">    fmt.Println(strings.Index(<span class="string">"test"</span>, <span class="string">"s"</span>)) <span class="comment">//2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Index</code> function is <code>func Index(s, sep string) int</code>. The first string is the larger string, the second is the smaller string and the function returns a <code>int</code> the index of the smaller string in the larger string. To take a list of strings and join them together in a single string separated by another string (e.g., a comma), use the Join function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.Join([]<span class="keyword">string</span>&#123;<span class="string">"a"</span>,<span class="string">"b"</span>&#125;, <span class="string">"-"</span>)) <span class="comment">//"a-b"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Join</code> function is <code>func Join(a []string, sep string) string</code>. To repeat a string, use the Repeat function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.Repeat(<span class="string">"a"</span>, <span class="number">5</span>)) <span class="comment">//"aaaaa"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Repeat</code> function is <code>func Repeat(s string, count int) string</code>. To replace a smaller string in a bigger string with some other string, use the Replace function. In Go, Replace also takes a number indicating how many times to do the replacement (pass -1 to do it as many times as possible).<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.Replace(<span class="string">"aaaa"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="number">2</span>)) <span class="comment">//"bbaa"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Replace</code> function is <code>func Replace(s, old, new string, n int) string</code>. To split a string into a list of strings by a separating string (e.g., a comma), use the Split function (Split is the reverse of Join).<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.Split(<span class="string">"a-b-c-d-e"</span>, <span class="string">"-"</span>))) <span class="comment">//[]string&#123;"a","b","c","d","e"&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>Split</code> function is <code>func Split(s, sep string) []string</code>. To convert a string to all lowercase letters, use the ToLower function and to convert a string to all uppercase letters, use the ToUpper function.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"strings"</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(strings.ToUpper(<span class="string">"test"</span>)) <span class="comment">//"TEST"</span></div><div class="line">    fmt.Println(strings.ToLower(<span class="string">"TEST"</span>)) <span class="comment">//"test"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The signature of the <code>ToUpper</code> function is <code>func ToUpper(s string) string</code>. The signature of the <code>ToLower</code> function is <code>func ToLower(s string) string</code>. Sometimes we need to work with strings as binary data. To convert a string to a slice of bytes (and vice versa), do this.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr := []<span class="keyword">byte</span>(<span class="string">"test"</span>)</div><div class="line">str := <span class="keyword">string</span>([]<span class="keyword">byte</span>&#123;<span class="string">'t'</span>,<span class="string">'e'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Creating-packages"><a href="#Creating-packages" class="headerlink" title="Creating packages"></a>Creating packages</h2><p>Create a folder in ~/src/code called program. Inside that folder, create a file called <code>main.go</code> using the following code.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main <span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"code/program/math"</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    xs := []<span class="keyword">float64</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</div><div class="line">    avg := math.Average(xs)</div><div class="line">    fmt.Println(avg)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Now create another folder inside of the <code>program</code> folder called <code>math</code>. Inside of this folder, create a file called <code>math.go</code> that contains this.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> math</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Average</span><span class="params">(xs []<span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line">    total := <span class="keyword">float64</span>(<span class="number">0</span>)</div><div class="line">    <span class="keyword">for</span> _, x := <span class="keyword">range</span> xs &#123;</div><div class="line">        total += x</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total / <span class="keyword">float64</span>(<span class="built_in">len</span>(xs))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>From the change directory into the <code>math</code> folder you just created and run go install. This will compile the <code>math.go</code> program and create a linkable object file: ~/pkg/os_arch/code/program/math.a (where os is something like windows and arch is something like amd64). Now change back into the <code>program</code> folder and run <code>go run main.go</code>.</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>Writing tests for our code is a good way to ensure quality and improve reliability. Go includes a special program that makes writing tests easier <code>go test</code>. The Go compiler knows to ignore code in any files that end with <code>_test.go</code>, so the code defined in this file is only used by go test (and not go install or go build). In the <code>program/math</code> folder, create a new file called <code>math_test.go</code> and add the following code.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> math</div><div class="line"><span class="keyword">import</span> <span class="string">"testing"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAverage</span><span class="params">(t *testing.T)</span></span> &#123;</div><div class="line">    v := Average([]<span class="keyword">float64</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)</div><div class="line">    <span class="keyword">if</span> v != <span class="number">1.5</span> &#123;</div><div class="line">        t.Error(<span class="string">"Expected 1.5, got "</span>, v)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>We import the special testing package and define a function that starts with the word Test (case matters) followed by whatever we want to name our test. To actually run the test, run the following in the same directory <code>go test</code>. The go test command will look for any tests in any of the files in the current folder and run them. Tests are identified by starting a function with the word Test and taking one argument of type <code>`*testing.T</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Go is an open source programming language that makes it easy to build simple, reliable, and efficient software. It is widely available on a number of platforms and has a robust well documented common library and focuses on good software engineering principles.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Functional Thinking - Scala</title>
    <link href="http://rajabishek.com/2016/Functional-Thinking-Scala/"/>
    <id>http://rajabishek.com/2016/Functional-Thinking-Scala/</id>
    <published>2016-10-17T15:00:49.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Scala stands for “Scalable Language”. Its a language that is meant to grow with its users. It can be used for building large systems and frameworks of reusable components. It runs on the standard Java platform and is interoperable with all Java libraries. It is statically typed with a blend of object-oriented and functional programming.</p>
<a id="more"></a>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To get the official Scala installation, you can visit the official <a href="http://www.scala-lang.org/downloads" target="_blank" rel="external">downloads</a> page and follow the directions for your platform. You can also use a Scala plug-in for Eclipse, IntelliJ, or NetBeans. To check if Scala is installed correctly you can run <code>scala -version</code> on the command line to check the version installed.</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>All of Java’s primitive types have corresponding classes in the <code>scala</code> package. For instance <code>scala.Boolean</code> corresponds to Java’s boolean. <code>scala.Float</code> corresponds to Java’s float. When we compile the Scala code to Java bytecodes, the Scala compiler will use Java’s primitive types where possible to give you the performance benefits of the primitive types.</p>
<p>Scala has two kinds of variables, vals and vars. A val is like a constant which once initialized can never be reassigned. A var, by contrast, is a normal variable that can be reassigned throughout its lifetime.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> message = <span class="string">"Helloworld from Raj Abishek"</span></div></pre></td></tr></table></figure></p>
<p>The type of message is <code>java.lang.String</code>, because Scala strings are implemented by Java’s String class. But if you notice above we never mentioned the type while creating the message val. This is called as type inference. The Scala interpreter(or compiler) can infer types based on the initial value that we assign while declaring the variable. In fact it is often best to let the compiler do so rather than specifying a type explicitly using type annotation.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> name: java.lang.<span class="type">String</span> = <span class="string">"Raj Abishek"</span></div><div class="line"><span class="keyword">val</span> friend: <span class="type">String</span> = <span class="string">"Sailesh Dev"</span> <span class="comment">//using the simple name for type annotation</span></div></pre></td></tr></table></figure></p>
<p>As you see above here we have used type annotations to explicitly explicitly the type of name. The <code>java.lang</code> types are visible with their simple names in Scala. The simple name of <code>java.lang.String</code> is <code>String</code>. As I had mentioned earlier what we can’t do with message or name or friend, given that it is a val, not a var, is reassign it.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Good morning!"</span></div><div class="line">greeting = <span class="string">"Good evening!"</span> <span class="comment">//Perfectly valid since greeting is a var</span></div></pre></td></tr></table></figure></p>
<p>We start function definitions with the <code>def</code> keyword. The function’s name as shown below is minimum and it is followed by a comma separated list of parameters in parentheses with type annotations for every parameter. After the close parenthesis of minimum’s parameter list we type annotate the result type of the function. In Scala the type of value returned from a function is called as result type(In Java we call it return type). Following the function’s result type is an equals sign and pair of curly braces which contains the function body.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimum</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y)</div><div class="line">    x</div><div class="line">  <span class="keyword">else</span></div><div class="line">    y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Scala’s if expression can result in a value, just like Java’s ternary operator. The <code>if(x &lt; y) x else y</code> expression in Scala behaves similarly to <code>(x &lt; y) ? x : y</code> in Java. The result type of the function is not always required to be mentioned. If we leave the result type off and the compiler can infer it. But in some cases like recursive functions the Scala compiler will require you to explicitly specify the result type of a function. Also in Scala if the function consists of just one statement, you can leave off the curly braces.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimum</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = <span class="keyword">if</span> (x &lt; y) x <span class="keyword">else</span> y</div></pre></td></tr></table></figure></p>
<p>As you can see above the result type of the function is omitted and the curly brace is removed since function body just has a single if statement.<br>Nevertheless, it is often a good idea to indicate function result types explicitly, even when the compiler doesn’t require it. Such type annotations can make the code easier to read. Another developer working on the project need not study the function body to figure out the inferred result type.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span></span>() = println(<span class="string">"Helloworld from Raj Abishek"</span>)</div></pre></td></tr></table></figure></p>
<p>The above is an example of function declaration the accepts no parameters and returns nothing. The result type of greet function is <code>Unit</code>. Scala’s <code>Unit</code> type is similar to Java’s void type. Every <code>void</code> returning method in Java is mapped to a <code>Unit</code> returning method in Scala.<br>As we will see later the above <code>greet</code> function is not pure. A pure function is a function where the result value is only determined by its input values, without observable side effects. Its takes input through parameters, processes the input and returns a value. As we will see later a pure function always gives the same output for a given input, it produces no side effects and does not rely on any external state. In simpler terms a function is impure is if it makes sense to call it without using its return value. Methods with the result type of <code>Unit</code>, therefore, are only executed for their side effects. In the case of <code>greet</code> function, the side effect is a friendly greeting printed to the standard output.</p>
<p>While executing the Scala file we can pass command line arguments which is in the <code>args</code> array. Arrays are zero based and can be positionally indexed with parentheses. So the ith element in a Scala array named data is <code>data(i-1)</code>, not <code>data[0]</code>, as in Java.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"Hello world from "</span> + args(<span class="number">0</span>)) <span class="comment">//get the command line argument</span></div></pre></td></tr></table></figure></p>
<p>In all of the above shown sample code we never wrapped the code within a main method of a class like how we do it in Java. Thats because even though Scala is designed to help developers build very large-scale systems, it also scales down nicely to scripting. A script is just a sequence of statements in a file that will be executed sequentially.</p>
<p>Just like comments behave the same way in Scala. The Scala compiler will ignore characters between <code>//</code> and the next end of line and any characters between <code>/*</code> and <code>*/</code>.</p>
<p>To loop through the elements of the array using a while loop we do the following.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Non idiomatic code</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> (i &lt; args.length) &#123;</div><div class="line">  println(args(i))</div><div class="line">  i += <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You should understand here that although while loops are explained here, they do not demonstrate the best Scala style. Later we shall see better approaches that avoid iterating through arrays with indexes. The above code that loops through the array through positional indexing via a while loop is not seen as the natural way of lopping through an array in Scala. Note here that Java’s ++i and i++ don’t work in Scala, to increment in Scala we either do i = i + 1 or i += 1. There is also a <code>print</code> function in Scala that prints out a string without a line break. So to print out the command line arguments on the same line we can do the following.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> (i &lt; args.length) &#123;</div><div class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>)</div><div class="line">    print(<span class="string">" "</span>)</div><div class="line">    print(args(i))</div><div class="line">    i += <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">println()</div></pre></td></tr></table></figure></p>
<p>Like Java, in Scala you must put the boolean expression for a while or an if in parentheses.(You can’t do things like if i &lt; 10 as you can in a languages such as Python, Ruby). Another similarity to Java is that if a block has only one statement, you can optionally leave off the curly braces. Also in Scala adding semicolons at the end of a line is optional(Scala won’t complain if you prefer adding semicolons). But semicolons are required if you want to write multiple statements on a single line.</p>
<p>When we wrote the while loops above we were programming in an imperative style. In languages such a Java, C, C++ we give one imperative command at a time, iterate with loops, and often mutate state shared between different functions. One of the main characteristics of a functional language is that functions are first class constructs. Although Scala allows us to program in imperative style as we saw above(positional indexing with while), we will find ourselves using functional style more as we dive deeper into Scala.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach(arg =&gt; println(arg))</div></pre></td></tr></table></figure></p>
<p>The above code is how we would achieve the same result functionally. We call the <code>foreach</code> method on the <code>args</code> array and pass in a function. Here we are passing a function literal that takes one parameter names <code>arg</code>. The body of the function is the single statement <code>println(arg)</code>. The syntax for a function literal is a list of named parameters, in parentheses, a right arrow, and then the body of the function. As you can see above the Scala interpreter infers the type of <code>arg</code> as <code>String</code>, since <code>String</code> is the element type of the array on which we called the foreach.<br>But if you would like be verbose we can explicitly type annotate the <code>arg</code> parameter as a <code>String</code>. And remember to add the parentheses when you explicitly type the parameter.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach((arg: <span class="type">String</span>) =&gt; println(arg))</div></pre></td></tr></table></figure></p>
<p>If you would like to be concise and not explicit, you can use a shorthand form called as partially applied function. If a function literal consists of one statement that takes a single argument, you need not explicitly name and specify the argument.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach(println)</div></pre></td></tr></table></figure></p>
<p>Ok but now you may think, what about the very famous imperative style for loops that we use in Java or C++. In an effort to guide Scala programmers in a functional direction, only a functional relative of the imperative for(called as for expression) is available in Scala.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(arg &lt;- args)</div><div class="line">    println(arg)</div></pre></td></tr></table></figure></p>
<p>The <code>arg</code> is a val and not a var here. Although <code>arg</code> may seem to be a var, it gets a new value on each iteration, it really is a val. <code>arg</code> can’t be reassigned inside the body of the for expression. A new <code>arg</code> val will be created and initialized to the element value during every iteration.</p>
<p>In Scala you can instantiate objects of a class using the <code>new</code> keyword. While instantiating a class you can also configure it with values and types. This is called as <strong>parameterization</strong>.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> bigInteger = <span class="keyword">new</span> java.math.<span class="type">BigInteger</span>(<span class="string">"99637"</span>)</div></pre></td></tr></table></figure></p>
<p>The above code instantiates a new <code>java.math.BigInteger</code> and parameterizes it with the value “99637”. In the above case the instantiation process required only a value, but in some cases while instantiating you will have to provide the type also. You parameterize an instance with types by specifying one or more types in square brackets.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> messages = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">4</span>)</div><div class="line">messages(<span class="number">0</span>) = <span class="string">"Hello"</span></div><div class="line">messages(<span class="number">1</span>) = <span class="string">" world"</span></div><div class="line">messages(<span class="number">2</span>) = <span class="string">" from"</span></div><div class="line">messages(<span class="number">3</span>) = <span class="string">" Raj Abishek!\n"</span></div><div class="line"><span class="keyword">for</span>(i &lt;- <span class="number">0</span> to <span class="number">3</span>)</div><div class="line">  print(messages(i))</div></pre></td></tr></table></figure></p>
<p>As you can see above when we parameterize an instance with both a type and a value, the type comes first in its square brackets, followed by the value in parentheses. The type parameterization portion(the type names in square brackets) forms part of the type of the instance, the <code>messages</code> val created above is of type <code>Array[String]</code>. The type of <code>messages</code> is <code>Array[String]</code>, not <code>Array[String](4)</code>.</p>
<p>When you define a variable with val, the variable can’t be reassigned, but the object to which it refers could potentially still be changed. The below code is perfectly valid. The messages variable cannot be reassigned to a different array, it will always point to the same <code>Array[String]</code> instance with which it was initialized, but we can change the elements of that <code>Array[String]</code> over time, so the array itself is mutable.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">messages(<span class="number">0</span>) = <span class="string">"Bye"</span></div><div class="line">messages(<span class="number">1</span>) = <span class="string">" change"</span></div><div class="line">messages(<span class="number">2</span>) = <span class="string">" into"</span></div><div class="line">messages(<span class="number">3</span>) = <span class="string">" new text!\n"</span></div></pre></td></tr></table></figure></p>
<p>In Scala if a method takes only one parameter, you can call it without a dot or parentheses. This wouldn’t have been very evident, but when we wrote the for expression to loop through the array the code 0 to 3 is transformed into the method call (0).to(3).<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(i &lt;- <span class="number">0</span> to <span class="number">3</span>)</div><div class="line">  print(messages(i))</div></pre></td></tr></table></figure></p>
<p>Its important to note here that this syntax will only works if you explicitly specify the receiver of the method call. You cannot write <code>println 10</code>, but we can write <code>Console println 10</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Scala stands for “Scalable Language”. Its a language that is meant to grow with its users. It can be used for building large systems and frameworks of reusable components. It runs on the standard Java platform and is interoperable with all Java libraries. It is statically typed with a blend of object-oriented and functional programming.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Groovy Essentials</title>
    <link href="http://rajabishek.com/2016/Groovy-Essentials/"/>
    <id>http://rajabishek.com/2016/Groovy-Essentials/</id>
    <published>2016-09-18T07:19:19.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-learn-groovy"><a href="#Why-learn-groovy" class="headerlink" title="Why learn groovy ?"></a>Why learn groovy ?</h2><p>Anyone who is comfortable working in Java can pickup groovy very easily. It is a general-purpose programming language which compiles down to Java byte code. It is an object oriented programming language with functional capabilities.</p>
<p>Even if you don’t want to write applications with groovy leaning this technology can be helpful while working with gradle. Gradle is a modern open source build tool for continuous delivery for applications written in Java, C++, Native android, Python, Hadoop and many more. </p>
<a id="more"></a>
<p>The Gradle build files consist largely of a Domain Specific Language, written in Groovy, for builds. In addition to the DSL, any legal Groovy code can be added to the build. In 2013 Google also chose gradle as the go to build tool for android application with internal support in Android Studio. There is a plugin for gradle that allows us to configure android applications. There are various build types available, we could build a release build or a debug build. We could setup an automatic signing configuration, so that we can digitally sign the output apks in preparation for uploading them to the google play store. We can also define additional build types if we want. We will also look at the concept of flavors.</p>
<p>A flavor allows you to essentially build the same app in multiple different ways with slight changes to the look and feel or even changes to the application itself. A combination of a flavour and a build type is known as a variant. We will also look at using our own android library projects as part of a larger android application, so that we can split functionality into reusable components that can be part of other applications as well.</p>
<h2 id="A-bit-of-history"><a href="#A-bit-of-history" class="headerlink" title="A bit of history"></a>A bit of history</h2><p>When android applications were first created was first created there was no real separate build toll available. At that time build for android was an IDE build, i.e we would build an application in an IDE rather than having some separate execution process for building the application itself. Previously there was a plugin for eclipse called ADT(Android developer tools). Back then once you download the ADT plugin and add it to the eclipse IDE, that would take care about building the project. But this was something that the Java community had moved away from for the last 10-15 years, because doing this way would be difficult to reproduce outside an IDE and for example trying to build something on a CI server becomes something that is very difficult. One of the issues was that we could not build different types of the same application at the same time.</p>
<p>So in 2013 Android decided to switch to a real build tool called as gradle and they replaced the IDE to Android Studio which a free version of IntellijIDEA that understands gradle better. In the background Android studio is running the gradle tasks. You can even think the android studio as a UI wrapper around the gradle build tool. The android plugin for gradle runs independent of Android studio, so you could build your app from the command line also or on machines where android studio is not installed (such as CI servers). With gradle we can handle build variants, dependencies, manage manifest entries, deal with signing configurations, run the proguard tool and perform testing.</p>
<h2 id="Groovy-Classes-amp-Objects"><a href="#Groovy-Classes-amp-Objects" class="headerlink" title="Groovy - Classes &amp; Objects"></a>Groovy - Classes &amp; Objects</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person person = <span class="keyword">new</span> Person()</div><div class="line">person.setFirst(<span class="string">'Raj'</span>)</div><div class="line">person.last = <span class="string">'Abishek'</span></div><div class="line">println <span class="string">"$&#123;person.getFirst()&#125; $&#123;p.last&#125;"</span></div></pre></td></tr></table></figure>
<p>This is a sample groovy code show above. In groovy fields are private by default(in Java they are package-private by default). Also in groovy methods are public by default and class itself is public by default. Now if you want a public field or a private method you have to use those access modifiers while defining them. In groovy if you don’t provide an access modifier for the fields then it automatically generates getters and setters for them. Ok Raj, you told me that the fields are private by default then how are you able to access the last field shown above. The thing is that groovy automatically converts to the corresponding getter or setter method whenever you are trying to access the fields directly. So actually the line person.last = ‘Abishek’ is internally interpreted as person.setLast(‘Abishek’) and similarly the p.last is interpreted as p.getLast(). Infact if you had defined a setLast method on the class manually like this<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> setLast(String last) &#123;</div><div class="line">	println <span class="string">'inside set last'</span></div><div class="line">	<span class="keyword">this</span>.last = last</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>then while executing the statement person.last = ‘Abishek’, the string inside set last will be printed. So when it looks like you are doing property access you are indirectly using the getters and setters. Infact even if you don’t have a property called test in the class and you try to access it via an instance the groovy will internally call the instance.getTest method. So it is important to note here that you could get away with just having the the getters and setters and not the property itself and accessing the property will invoke the getters and setters.</p>
<p>In Java if you don’t get a constructor you just get one default constructor, but in groovy you get 2 default costrcutor one is like how you have in Java and another one is a default memberwise initialization constructor(Like the default constructor for structures in Swift programming language). But the beauty here is that unlike the swift memberwise constructor you need not provide values for all the fields also. You can just provide the values for those fields that you want and for others groovy will assign default values null for references, 0 for numerics and false for booleans just like Java. Therefore for the person class defined above you could create an instance using <code>Person person = new Person(first: &#39;Raj&#39;, last: &#39;Abishek&#39;)</code>. And as I said previously we can also just provide the values for the fields that we want and for others groovy will give a default value <code>Person person = new Person(first: &#39;Raj&#39;)</code> will create a person object with first as ‘Raj’ and the last field will be given a default value of null.But it is important to note here that when you are using this member wise constructor the values for the property are assigned using the setter methods for the properties. Therefore we would get the inside set last string output. Therefore the member wise initialization constructor uses the setter methods to assign values for the properties.</p>
<p>You could also have a toString method on the class that will be automatically called when you pass an instance to the println function.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String toString() &#123; <span class="string">"$&#123;first&#125; $&#123;last&#125;"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>In groovy if you observer you don’t even need the return statement because it will automatically return the last evaluated expression in the block and not only that it will look at the return type of the method and try to convert the last evaluated expression to the return type if the types are not matching.</p>
<p>Now lets take a look at AST transformation i.e Abstract syntax tree transformation. To look at this concept first we need to look at import statements. Its important to understand here is that by default groovy imports a couple of packages, like <code>java.lang.*</code>, <code>java.util.*</code>, <code>java.io.*</code>, <code>java.net.*</code>, <code>groovy.lang.*</code>, <code>groovy.util.*</code> and other important packages. Now AST transformation allows groovy developers to typehint annotations at the top of a class and groovy will automatically provide that functionality.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@ToString</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line"></div><div class="line">	String toString() &#123; <span class="string">"$&#123;first&#125; $&#123;last&#125;"</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The @ToString annotation will automatically provide a toString method for a class. In our cause since we have manually provided a method groovy will not overwrite it. Groovy will only provide a method if its already not there. But if remove this toString method from the class then groovy will provide a toString method.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@ToString</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div><div class="line">Person person = <span class="keyword">new</span> Person(<span class="string">first:</span> <span class="string">'Raj'</span>, <span class="string">last:</span> <span class="string">'Abishek'</span>)</div><div class="line">println person</div></pre></td></tr></table></figure></p>
<p>Now we would get the output as <code>Person(Raj, Abishek)</code>, because this is the way how groovy provides the toString method internally. We can actually typehint multiple annotations to provide multiple functionalities. @EqualsAndHashCode method will generate an equals method and a hashCode method on the Person class according to the normal condition layed out in the Effective Java book. When you actually compare two instances in groovy using the == operator it is operator overloading in action internally groovy calls the equals method on the first instance and passes the 2nd instance as a parameter. Therefore by typehinting the <code>@EqualsAndHashCode</code> annotation above the Person class we can actually use the == operator for comparing two instances of the person class to check whether the values are equal.(Unlike java that compares the references).<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@ToString</span></div><div class="line"><span class="meta">@EqualsAndHashCode</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div><div class="line">Person person1 = <span class="keyword">new</span> Person(<span class="string">first:</span> <span class="string">'Raj'</span>, <span class="string">last:</span> <span class="string">'Abishek'</span>)</div><div class="line">Person person2 = <span class="keyword">new</span> Person(<span class="string">first:</span> <span class="string">'Raj'</span>, <span class="string">last:</span> <span class="string">'Abishek'</span>)</div><div class="line">println person1 == person2</div></pre></td></tr></table></figure></p>
<p>The output of the above code is true because the values are being compared. The == operator is actually calling the equals method on the <code>Person</code> class. There is another transformation called as @TupleConstructor that generates a new constructor that allows us to specify the values for the fields in the same order without providing the parameters names while calling the constructor.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@TupleConstructor</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div><div class="line">Person person1 = <span class="keyword">new</span> Person(<span class="string">'Raj'</span>,<span class="string">'Abishek'</span>)</div></pre></td></tr></table></figure></p>
<p>As you can see in the above code, type hinting <code>@TupleConstructor</code> generates a new constructor for providing the values for the fields in the same order in which they were defined without the need for naming the parameters. The combination of the @ToString, @EqualsAndHashCode and @TupleConstructor is so popular that there is another transformation called as @Canonical that is functionally equivalents to writing these 3 transformations together.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@ToString</span></div><div class="line"><span class="meta">@EqualsAndHashCode</span></div><div class="line"><span class="meta">@TupleConstructor</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The above code is the same as the below code.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@Canonical</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Groovy-Closures-amp-Collections"><a href="#Groovy-Closures-amp-Collections" class="headerlink" title="Groovy - Closures &amp; Collections"></a>Groovy - Closures &amp; Collections</h2><p>Lets make a collection of person references.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@Canonical</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> people = [</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Raj'</span>,<span class="string">'Abishek'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Sailesh'</span>,<span class="string">'Dev'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Dev'</span>,<span class="string">'Prakash'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Kani'</span>,<span class="string">'Amuthu'</span>)</div><div class="line">]</div><div class="line"></div><div class="line">println people.<span class="keyword">class</span>.name</div></pre></td></tr></table></figure></p>
<p>As you know by now when accessing properties, internally the methods are called. There it is functionally equivalent to calling people.getClass().getName() which will print <code>java.util.ArrayList</code>. So the people above is a collection, its an array list of person objects. But what if we wanted a linkedlist instead, you could use <code>LinkedList</code> instead of the def keyword above or you can do.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> people = [</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Raj'</span>,<span class="string">'Abishek'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Sailesh'</span>,<span class="string">'Dev'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Dev'</span>,<span class="string">'Prakash'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Kani'</span>,<span class="string">'Amuthu'</span>)</div><div class="line">] <span class="keyword">as</span> LinkedList</div></pre></td></tr></table></figure></p>
<p>The people variable above is a instance of <code>java.util.LinkedList</code> now. If used as <code>Set</code> then we would get an instance of <code>LinkedHashSet</code>, which will make sure that we don’t have any duplicates, thank to the @Canonical transformation for providing the equals and hashCode method using which the set collection is able to maintain a list of unique elements alone. We could also do <code>as TreeSet</code> which will give us a sorted set but we haven’t implemented the comparable interface that allows the tree set to decide on how its going to sort. In groovy we needn’t manually implement the comparable interface as there is an AST transformation for that too called as @Sortable.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.transform.*</div><div class="line"></div><div class="line"><span class="meta">@Canonical</span></div><div class="line"><span class="meta">@Sortable</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></div><div class="line">	String first</div><div class="line">	String last</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">def</span> people = [</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Raj'</span>,<span class="string">'Abishek'</span>), <span class="comment">//#1</span></div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Raj'</span>,<span class="string">'Abishek'</span>), <span class="comment">//#2</span></div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Raj'</span>,<span class="string">'Dev'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Sailesh'</span>,<span class="string">'Dev'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Dev'</span>,<span class="string">'Prakash'</span>),</div><div class="line">	<span class="keyword">new</span> Person(<span class="string">'Kani'</span>,<span class="string">'Amuthu'</span>)</div><div class="line">] <span class="keyword">as</span> TreeSet</div><div class="line"></div><div class="line">println people</div></pre></td></tr></table></figure></p>
<p>First of all since its a set we won’t have any duplicates so only one of #1 or #2 will be there. Secondly its will make sure that the list is sorted. It will sort the instances based on the first name and then the last name alphabetically.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line">println nums</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();++i) &#123; println nums[i] &#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above the normal for loop with the subscript sytax works fine even though the collection is an array list because internally when you use the subscript nums[i] groovy calls the <code>get</code> method on the array list collection. Another option to loop through the list is we can use java’s foreach operator.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> <span class="string">num :</span> nums) &#123; println num &#125;</div></pre></td></tr></table></figure></p>
<p>We also have something called as a for in loop in groovy where we can do the following. This is similar to the foreach lopp in java but we need not typehint the datatype of the array element in the index.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line"><span class="keyword">for</span>(num <span class="keyword">in</span> nums) &#123; println num &#125;</div></pre></td></tr></table></figure></p>
<p>The another interesting way in which we would do this in groovy would be with the help of clousures. The curly brace is like the curly brace inside a method or a function. It takes one argument by default and it is called as it.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line">nums.each &#123; println it &#125;</div><div class="line">nums.each &#123; n -&gt; println n &#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above if we want to give a different name for the parameter then we can give a different name followed by right arrow. As you can see above doing this, only <code>n</code> is available and <code>it</code> is not available. The each method also returns the collection itself. One of the trends that has become very popular in computer science is the idea of moving towards functional programming. The benefits of functional programming are many but it especially works with small easily composable functions that can be combines with immutable classes inorder to make something that is easy to parallelize and optimize. Its is a very nice system that can minimize a lot of side effects. Groovy is an object oriented language with the concept of closures it can actually do certain functional things. We also have a collect method on the collection that returns a new collection based on the closure that we provide. It applies the closure to each element and returns a new collection based on that. This is similar to the map method present in other programming languages.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line">nums.collect &#123; it * <span class="number">2</span> &#125;</div></pre></td></tr></table></figure></p>
<p>There is another method called findAll that finds all elements in the collection that satisfies the closure. This is similar to the filter method that is present in other programming languages. The sum method will calculate the sum of all the elements in the collection.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line">nums.collect &#123; it * <span class="number">2</span> &#125;</div><div class="line">	.findAll &#123; it%<span class="number">3</span> == <span class="number">0</span> &#125;</div><div class="line">	.sum()</div></pre></td></tr></table></figure></p>
<p>The output of the above code is 24. First we find the twice of every number and then filter the elements that is divisible by 3 and they find the sum of those elements. We have seen about linear collections so far, now lets take a look at maps or dictionaries.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map = [<span class="string">k1:</span><span class="number">1</span>, <span class="string">k2:</span><span class="number">2</span>, <span class="string">k3:</span><span class="number">3</span>]</div><div class="line">println map.getClass().name</div></pre></td></tr></table></figure></p>
<p>The output we get is <code>java.util.LinkedHashMap</code>. As you see above we had to use the getClass() method and not the class property because, in a map the . operator is overloaded for putting and getting values from the map. Therefore if we would have used the class property then the map would have looked for a key called class which does not exist and would have returned null, it woudn’t have actually called the getClass method internally. We can put values into the map using the . operator or using the subscript syntax as shown below.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map = [<span class="string">k1:</span><span class="number">1</span>, <span class="string">k2:</span><span class="number">2</span>, <span class="string">k3:</span><span class="number">3</span>]</div><div class="line">map.k4 = <span class="number">1</span></div><div class="line">map[<span class="string">'k5'</span>] = <span class="number">2</span></div><div class="line">println map</div></pre></td></tr></table></figure></p>
<p>To iterate over the map we can use the each function.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map = [<span class="string">k1:</span><span class="number">1</span>, <span class="string">k2:</span><span class="number">2</span>, <span class="string">k3:</span><span class="number">3</span>]</div><div class="line">map.each &#123; e -&gt; println <span class="string">"$&#123;e.key&#125; maps to $&#123;e.value&#125;"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>The e.key internally calls the e.getKey() and the e.value calls the e.getValue() method, normal property access calls the methods internally. The each methods also supports a two argument closure that will pass the key and the value to the closure.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map = [<span class="string">k1:</span><span class="number">1</span>, <span class="string">k2:</span><span class="number">2</span>, <span class="string">k3:</span><span class="number">3</span>]</div><div class="line">map.each &#123; k,v -&gt; println <span class="string">"$k maps to $v"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>As you can see above during string interpolation we need not use the {} after the $ if we are just outputting the value and not accessing a property or method. If we use the collect method on the map it transforms it into a list by applying the closure to each element.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map = [<span class="string">k1:</span><span class="number">1</span>, <span class="string">k2:</span><span class="number">2</span>, <span class="string">k3:</span><span class="number">3</span>]</div><div class="line">map.collect &#123; k,v -&gt; <span class="string">"$k=$v"</span> &#125;</div></pre></td></tr></table></figure></p>
<p>The output is [k1=1, k2=2, k3=2]. The list also has a method called join that joins the elements of the list using the separator given.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> map = [<span class="string">k1:</span><span class="number">1</span>, <span class="string">k2:</span><span class="number">2</span>, <span class="string">k3:</span><span class="number">3</span>]</div><div class="line">map.collect &#123; k,v -&gt; <span class="string">"$k=$v"</span> &#125;.join(<span class="string">'&amp;'</span>)</div></pre></td></tr></table></figure></p>
<p>The output is k1=1&amp;k2=2&amp;k3=2. The collect methods transforms the map to a list and the join method on the list combines the elements using the &amp; separator.</p>
<h2 id="Accessing-a-RESTFUL-web-service"><a href="#Accessing-a-RESTFUL-web-service" class="headerlink" title="Accessing a RESTFUL web service"></a>Accessing a RESTFUL web service</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> groovy.json.*</div><div class="line"></div><div class="line">String url = <span class="string">'http://api.icndb.com/jokes/random?'</span></div><div class="line"><span class="keyword">def</span> params = [<span class="string">limitTo:</span><span class="string">'[nerdy]'</span>, <span class="string">firstName:</span> <span class="string">'Raj'</span>, <span class="string">lastName:</span> <span class="string">'Abishek'</span>]</div><div class="line">String queryString = params.collect &#123; k,v -&gt; <span class="string">"$k=$v"</span> &#125;.join(<span class="string">'&amp;'</span>)</div><div class="line">String jsonTxt = <span class="string">"$url$queryString"</span>.toURL().text</div><div class="line"><span class="keyword">def</span> json = <span class="keyword">new</span> JsonSlupper().parseText(jsonTxt)</div><div class="line">println json.value.joke</div></pre></td></tr></table></figure>
<p>As you can see in the above example first we store the parameters for the request in the map. Then we convert in unto a query string and append it to the end of the url. Then groovy have a <code>toURL</code> method on string object to convert a string to a <code>java.net.URL</code> instance and then we access the text property to call the <code>getText</code> method on the url instance. This gives us the JSON result as a string which needs to be parsed. To parse the JSON string we create an instance of <code>JsonSlupper</code> class from the <code>groovy.json</code> package and then call the <code>parseText</code> method to convert the JSON string to a map.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-learn-groovy&quot;&gt;&lt;a href=&quot;#Why-learn-groovy&quot; class=&quot;headerlink&quot; title=&quot;Why learn groovy ?&quot;&gt;&lt;/a&gt;Why learn groovy ?&lt;/h2&gt;&lt;p&gt;Anyone who is comfortable working in Java can pickup groovy very easily. It is a general-purpose programming language which compiles down to Java byte code. It is an object oriented programming language with functional capabilities.&lt;/p&gt;
&lt;p&gt;Even if you don’t want to write applications with groovy leaning this technology can be helpful while working with gradle. Gradle is a modern open source build tool for continuous delivery for applications written in Java, C++, Native android, Python, Hadoop and many more. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Snackbar - Android Material Design</title>
    <link href="http://rajabishek.com/2016/Snackbar-Android-Material-Design/"/>
    <id>http://rajabishek.com/2016/Snackbar-Android-Material-Design/</id>
    <published>2016-09-16T05:54:34.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Better-notifications"><a href="#Better-notifications" class="headerlink" title="Better notifications"></a>Better notifications</h2><p>Snackbar notifications in Android are helpful in providing lightweight feedback about an operation. They show a brief message at the bottom of the screen on mobile and lower left on larger devices. They appear above all other elements on screen and only one can be displayed at a time.</p>
<a id="more"></a>
<p>Material design includes another interesting component called as a snackbar. They are just like toast messages except they also provide action to interact with. And unlike toast notification which can exist independently of the application(even after the application was closed), snackbar messages feel more tied up with the application’s user interface, as they are presented as a small bar sliding from the bottom of the screen. We can even swipe them off to dismiss them.</p>
<h2 id="Plain-snackbar"><a href="#Plain-snackbar" class="headerlink" title="Plain snackbar"></a>Plain snackbar</h2><p>Below is the syntax of a simple snackbar. First step would be to import the <code>Snackbar</code> class from the material design package by placing <code>import android.support.design.widget.Snackbar</code> at the top of the java file. The <code>Snackbar</code> class has a factory method called as <code>make</code> that returns us an instance of <code>Snackbar</code>. The make method accepts three parameters. A view instance, message to display and the duration of the message.</p>
<p>The view instance passed as the first parameter is the view to find a parent from. Snackbar will try and find a parent view to hold Snackbar’s view from the value given to view parameter. Snackbar will walk up the view tree trying to find a suitable parent, which is defined as a <code>CoordinatorLayout</code> or the window decor’s content view, whichever comes first. If you would like to reduce this work done by android to find the parent you can instead directly pass the reference to the <code>CoordinatorLayout</code> as view parameter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> CoordinatorLayout coordinatorLayout;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    coordinatorLayout = (CoordinatorLayout) findViewById(R.id</div><div class="line">            .coordinatorLayout);</div><div class="line">    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">    setSupportActionBar(toolbar);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Once you have set the content view you can get the reference of the coordinator layout. In the XML file on the frontend make sure that the coordinator layout has the xml attribute <code>android:id=&quot;@+id/coordinatorLayout&quot;</code>. Here the coordinatorLayout field is a variable on the Activity class that is of type <code>android.support.design.widget.CoordinatorLayout</code>. You can even make this field as private as it will be used only inside this class as shown above.</p>
<p>Having a <code>CoordinatorLayout</code> in your view hierarchy allows Snackbar to enable certain features, such as swipe-to-dismiss and automatically moving of widgets like <code>FloatingActionButton</code>. Therefore always try using a <code>CoordinatorLayout</code> view group whenever working with material design components.</p>
<p>The message parameter is a String object which is the message to be displayed by the snackbar. The duration parameter is of type <code>int</code> and you can provide either 0 or -1 or -2. 0 for longer time, -1 for shorter time and -2 for a message of indefinite time. For better code clarity and to make sure you are providing only either of these 3 values it is a recommended practice that you use one of the static final fields on the <code>Snackbar</code> class. The duration should be <code>Snackbar.LENGTH_SHORT</code>, <code>Snackbar.LENGTH_LONG</code> or <code>Snackbar.LENGTH_INDEFINITE</code>. Internally these static final fields on the <code>Snackbar</code> class map to these curresponding integer values. When <code>Snackbar.LENGTH_INDEFINITE</code> is used, the snackbar will be displayed indefinite time and can be dismissed with swipe off.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Snackbar snackbar = Snackbar.make(coordinatorLayout, <span class="string">"Helloworld from Raj Abishek"</span>, Snackbar.LENGTH_LONG);</div><div class="line">snackbar.show();</div></pre></td></tr></table></figure></p>
<h2 id="Snackbar-with-an-action"><a href="#Snackbar-with-an-action" class="headerlink" title="Snackbar with an action"></a>Snackbar with an action</h2><p>You can also mention a callback interaction method using <code>setAction(CharSequence, android.view.View.OnClickListener)</code> method. This allows us to take certain action when user interacts with the snackbar action button. The <code>setAction</code> method takes two parameters, first one is the name of the action button and the 2nd parameter is an instance of a class that implements the <code>OnClickListener</code> functional interface. Since lambda expressions are not yet supported in android we can make use of anonymous classes instead. As you can see below we are creating an object of an anonymous class that implements the <code>OnClickListener</code> and overrides the <code>onClick</code> method and passing it as the 2nd parameter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Snackbar deletedMessage = Snackbar</div><div class="line">        .make(coordinatorLayout, <span class="string">"Message is deleted"</span>, Snackbar.LENGTH_LONG)</div><div class="line">        .setAction(<span class="string">"UNDO"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar restoredMessage = Snackbar.make(coordinatorLayout, <span class="string">"Message is restored!"</span>, Snackbar.LENGTH_SHORT);</div><div class="line">                restoredMessage.show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line">deletedMessage.show();</div></pre></td></tr></table></figure></p>
<h2 id="Customizing-the-snackbar"><a href="#Customizing-the-snackbar" class="headerlink" title="Customizing the snackbar"></a>Customizing the snackbar</h2><p>Snackbar comes with default white color text and <code>#323232</code> background color. You can override these colors as mentioned below.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Snackbar snackbar = Snackbar.make(coordinatorLayout, <span class="string">"Helloworld from Raj Abishek"</span>, Snackbar.LENGTH_LONG);</div><div class="line">snackbar.setAction(<span class="string">"RETRY"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Changing action button text color</span></div><div class="line">snackbar.setActionTextColor(Color.BLUE);</div><div class="line"></div><div class="line">View snackbarView = snackbar.getView();</div><div class="line"><span class="comment">// Changing background color of the snackbar</span></div><div class="line">snackbarView.setBackgroundColor(Color.GREEN);</div><div class="line">TextView textView = (TextView) snackbarView.findViewById(android.support.design.R.id.snackbar_text);</div><div class="line"><span class="comment">// Changing message text color</span></div><div class="line">textView.setTextColor(Color.BLACK);</div><div class="line">snackbar.show();</div></pre></td></tr></table></figure></p>
<h2 id="Listening-for-snackbar-visibility-changes"><a href="#Listening-for-snackbar-visibility-changes" class="headerlink" title="Listening for snackbar visibility changes"></a>Listening for snackbar visibility changes</h2><p>To be notified when a snackbar has been shown or dismissed, you can provide a <code>Snackbar.Callback</code> via <code>setCallback(Callback)</code> method on the snackbar instance. The <code>setCallback</code> method expects an instance of a class that extends the <code>Callback</code> class. The <code>Callback</code> class is actually a nested public static abstract class of the <code>Snackbar</code> class. You pass an instance of a class that extends this abstract class to the <code>setCallback</code> method. We essentially set a callback to be called when this the visibility of this Snackbar changes.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Snackbar snackbar = Snackbar.make(coordinatorLayout, <span class="string">"Helloworld from Raj Abishek"</span>, Snackbar.LENGTH_LONG);</div><div class="line">snackbar.setAction(<span class="string">"RETRY"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">snackbar.setCallback(<span class="keyword">new</span> Snackbar.Callback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismissed</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> event)</span> </span>&#123;</div><div class="line">        Log.v(<span class="string">"MainActivity"</span>, <span class="string">"The snackbar has been dismissed."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShown</span><span class="params">(Snackbar snackbar)</span> </span>&#123;</div><div class="line">        Log.v(<span class="string">"MainActivity"</span>, <span class="string">"The snackbar has been presented."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">snackbar.show();</div></pre></td></tr></table></figure></p>
<p>The abstract <code>Callback</code> nested class of <code>Snackbar</code> class has empty implementations for both the <code>onDismissed</code> and the <code>onShown</code> method. Therefore we can override that empty implementations to provide our custom functionality when a snackbar is dismissed or presented on screen. The <code>onDismissed</code> method is called when the snackbar moves away from the screen(manually swiping or automatically after the time period.)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Better-notifications&quot;&gt;&lt;a href=&quot;#Better-notifications&quot; class=&quot;headerlink&quot; title=&quot;Better notifications&quot;&gt;&lt;/a&gt;Better notifications&lt;/h2&gt;&lt;p&gt;Snackbar notifications in Android are helpful in providing lightweight feedback about an operation. They show a brief message at the bottom of the screen on mobile and lower left on larger devices. They appear above all other elements on screen and only one can be displayed at a time.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BoxMail - Design to Production</title>
    <link href="http://rajabishek.com/2016/BoxMail-Design-to-Production/"/>
    <id>http://rajabishek.com/2016/BoxMail-Design-to-Production/</id>
    <published>2016-08-25T08:35:03.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Usefulness-Simplicity"><a href="#Usefulness-Simplicity" class="headerlink" title="Usefulness + Simplicity"></a>Usefulness + Simplicity</h2><p>I was very particular in not reinventing the wheel. I wanted to use interface elements that all mobile users are already used to. Users must be able to recognize what it’s for and how to use it.<br><a id="more"></a></p>
<p>Usefulness and simplicity is the key. If the application is not useful, there is no reason why the user will want to use it, and at the same time no one would bother spending time learning how to use your app. The app has to be simple and self explanatory. </p>
<p>Before starting out with the UI design for the screens I had a few ideas in mind. Not that I am unhappy with the current email clients for iOS, I wanted the app to be intuitive and at the same time aesthetically appealing in nature. The user shouldn’t be navigating multiple screens for performing the common tasks and at the same time we can’t clutter all the options on the main screen also, there has to be a balance.</p>
<h2 id="Typical-workflow"><a href="#Typical-workflow" class="headerlink" title="Typical workflow"></a>Typical workflow</h2><p>Engineering time is precious. After weeks of programming we can’t ask the developer to change the elements suddenly and rework on what they have done. This is why designing and prototyping is so essential is a software development life cycle. Its makes everyones life easier. The typical work flow that I carry out while building a project is:</p>
<ol>
<li>Ideation and brainstorming </li>
<li>Listing out the functional &amp; non-functional requirements</li>
<li>Wire framing and deciding user flows</li>
<li>User experience &amp; designing interfaces</li>
<li>Giving visual finesse &amp; Pixel perfecting the designs</li>
<li>Prototyping interactions</li>
<li>Programming &amp; Implementation</li>
</ol>
<blockquote>
<p>If a picture is worth 1000 words, a prototype is worth 1000 meetings.<br>– <strong>@ideo</strong></p>
</blockquote>
<p>Today its not enough showing the design screens alone to the client. What if the client can actually touch and use a dummy version of the app to get a feel of it. All of this happens even before we write even a single line of code. Today’s tools and software are so powerful that they allow us to make prototypes that are so close to the original app. Developing prototypes and getting approval during inception can save so much time, effort and money. The final working app would look exactly the same as the prototype but will have all of the functionality built in.</p>
<h2 id="On-boarding-Screens"><a href="#On-boarding-Screens" class="headerlink" title="On-boarding Screens"></a>On-boarding Screens</h2><p>The on boarding process is a critical step in setting your users up for success with your product, but there are a number of considerations and hard decisions to be made when you are designing your on boarding to define how best to get your users familiar with your product and its value.</p>
<p><img src="/img/inbox-mail-app/onboarding-screens.png" alt="Screenshot 1"></p>
<p>To keep the on boarding process interesting and short its better to provide guidance as the users use the app rather than presenting all the features upfront. The startup tutorial can be used to explain just the main feature of the app. Its a good practice to keep the number of screens fewer than five.</p>
<p><img src="/img/inbox-mail-app/getting-started.png" alt="Screenshot 2"></p>
<p>To also help the user identify the current screen we should always highlight the corresponding bottom circle. This gives them information about the number of such screens and also an idea about how much they have progressed. The user may already be familiar with the app, probably they are installing it on their new phone. Therefore there should always be a way for the users to skip through the tutorial and use the app directly.</p>
<h2 id="Inbox-Screens"><a href="#Inbox-Screens" class="headerlink" title="Inbox Screens"></a>Inbox Screens</h2><p>The inbox screen in the most important screen of all in the mail application. People receive hundreds of emails everyday, they have to deal with all this data and be able to take quick actions based on the message. At the very basic the user must have the following options.</p>
<ul>
<li>User should be able to differentiate between unread and unread emails</li>
<li>The sender, subject and the date of the email should be visible</li>
<li>It should be also clear whether the mail has any attachments</li>
<li>User must be able to see the date of the email</li>
<li>The message should also indicate whether its a conversation and if so the number of conversations</li>
<li>A part of the body must be visible</li>
<li>The photo of the sender has to be visible for easy identification</li>
<li>The user must be able to differentiate between normal and scheduled emails</li>
<li>The emails need to be separated (Primary/Social/Promotions)</li>
<li>Navigate to compose mail screen easily.</li>
</ul>
<p>As you can see above all these information needs to be shown on the inbox screen for every email. Thats a lot of information to deal with and it needs to be presented in a nice way. It should appear natural.<br><img src="/img/inbox-mail-app/inbox-screens.png" alt="Screenshot 3"><br>The users can bring the compose email screen by clicking the pencil icon. This design idea was taken from the principles of material design. A floating action button can be used to represent the primary action in an application. Only one floating action button is recommended per screen to represent the most common action.</p>
<h2 id="Inbox-Actions"><a href="#Inbox-Actions" class="headerlink" title="Inbox Actions"></a>Inbox Actions</h2><p>Users find it useful if they can quickly takes actions for the email. Actions such as archiving and rescheduling and an email are common tasks. Swiping an element in a list is a common action that iOS users are already aware of.<br><img src="/img/inbox-mail-app/inbox-actions.png" alt="Screenshot 4"><br>The users can swipe rightwards to schedule an email and they can swipe leftwards to archive an email. The swiping method is perfectly suitable for scheduling or archiving an email because it is a common task that users would do frequently, but not for a group of emails. If it was a action that is usually performed for a group of emails then the better interface would be to allow them to select the emails first and then perform the action.</p>
<h2 id="Compose-Mail"><a href="#Compose-Mail" class="headerlink" title="Compose Mail"></a>Compose Mail</h2><p>The another important screen in the mail app is the screen that allows users to type out email and send them. As the user types out the recipient’s email address the email address would change to a pill that contains the photo and the name of the recipient. By adding the photo of the recipient the user can quickly verify the details and send the email. The right side screen shows the notification message when the email has been successfully sent. By keeping the color translucent the notification seems to be more pleasant and less annoying in nature.<br><img src="/img/inbox-mail-app/compose-mail.png" alt="Screenshot 5"><br>Its also a good practice to give a reasonable amount of padding on the left and right hand side of the message text box. As you can see above we have a lot of inputs to take in from the user such as email addresses, subject, message, cc, bcc. Adding labels for each elements would occupy a lot of space and would be distracting for the user, placeholder texts can come in handy in such places.</p>
<h2 id="Message-amp-Sidebar"><a href="#Message-amp-Sidebar" class="headerlink" title="Message &amp; Sidebar"></a>Message &amp; Sidebar</h2><p>Reading lengthly emails is hard, lets make the process enjoyable. The email screen needs to show the email and provide an option to download the file. Placing an icon for the type of attachment such as pdf, image, word files cam be useful because in most cases users will be expecting certain files via email. Showing the number of attachments can be helpful especially when there are lot of attachments in the email. The three action icons at the bottom help in replying, replying to all and forwarding the message. These are common actions that a user would take and deserves an explicit place on the screen instead of being hidden somewhere.<br><img src="/img/inbox-mail-app/message.png" alt="Screenshot 6"><br>The sidebar is a common user interface in mobile apps to bring navigation links for the user. The right side screen shows the navigation bar which slides from the left. It helps the user in navigating to the different screens of the app and also show the recent notifications. When presenting any type of navigation element its important that we highlight the current place where the user.</p>
<p>The number inside the small circle can help choose the need for navigation. If there are no mails in drafts why should I bother navigating to that screen. These small little things can make a lot of difference in the user experience. If the small circle was there the user would need to navigate to the drafts screen and then find out that there are no emails there. The small drop down icon near the profile image of the user can be used to switch email accounts.</p>
<h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>The user must be able to customize the app to suit their needs. This is the place where the user would add and remove email accounts. Customize the notifications and get support from the company. Since there are a lot of settings that the user can customize its a good idea to divide into sections as shown below.<br><img src="/img/inbox-mail-app/settings.png" alt="Screenshot 6"><br>Account management in one section, navigation in another and social interaction in another. Similarly the disclosure indicator in the settings can be helpful to the user to let that know that there is more and they will be navigated to another screen. This is a common practice followed in iOS apps in general.</p>
<h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>Keeping engineering in mind is also an important quality while designing. There is no point in designing something if can’t be actually made. No designer would like to work on something only to be told that it can’t be practically done. But anyway the designs that we have worked on are very simple and requires only a reasonable amount of effort to bring them to life.<br><img src="/img/inbox-mail-app/xcode-screenshot.png" alt="Screenshot 7"><br>The above image shows the screenshot taken after writing code in Xcode and running the app in iPhone 6 simulator. Since the design that we created is a lot different from what a typical boilerplate that Apple would give for iOS apps, every little user interface element like a button, or navigation bar or the placement of icons needs to be completely customized. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Usefulness-Simplicity&quot;&gt;&lt;a href=&quot;#Usefulness-Simplicity&quot; class=&quot;headerlink&quot; title=&quot;Usefulness + Simplicity&quot;&gt;&lt;/a&gt;Usefulness + Simplicity&lt;/h2&gt;&lt;p&gt;I was very particular in not reinventing the wheel. I wanted to use interface elements that all mobile users are already used to. Users must be able to recognize what it’s for and how to use it.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Version Control With Git</title>
    <link href="http://rajabishek.com/2016/Version-control-with-git/"/>
    <id>http://rajabishek.com/2016/Version-control-with-git/</id>
    <published>2016-08-15T03:30:00.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-version-control"><a href="#What-is-version-control" class="headerlink" title="What is version control ?"></a>What is version control ?</h2><p>It is a system that records and stores the changes made to the project over time thereby allowing us to go back to a previous state at any time.</p>
<a id="more"></a>
<h2 id="Why-do-we-need-version-control"><a href="#Why-do-we-need-version-control" class="headerlink" title="Why do we need version control ?"></a>Why do we need version control ?</h2><p>Think about the days when we used to have folder names for our projects like project-start, project-final, project-final2, project-last-final etc. We used to duplicate the project folder every time we needed a backup. Version control solves this problem. Developers have been using this method for a long time (it exists from the 70s) and it is now unthinkable to write software without this technology.</p>
<p>With a good version control system you should get the below features for a very little overhead.</p>
<ul>
<li>Revert files back to a previous state.</li>
<li>Revert the entire project back to a previous state.</li>
<li>Compare changes over time.</li>
<li>See who last modified something that might be causing a problem.</li>
<li>Who introduced an issue and when.</li>
<li>Recover files when you screw up things or lose files</li>
</ul>
<h2 id="Local-Version-Control-Systems"><a href="#Local-Version-Control-Systems" class="headerlink" title="Local Version Control Systems"></a>Local Version Control Systems</h2><p>The technique that developers used back then was to duplicate project folders. This approach is very simple but highly error prone. It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to. To deal with these problems programmers developed local version control systems that had a simple database that stored the changes made over time. One of the most popular local version control systems back then was a system called RCS.</p>
<p><img src="/img/version-control-git/local-version-control.png" alt="Screenshot 1"></p>
<p>RCS works by keeping patch sets (i.e the differences between files) in a special format on disk. If you asked RCS for a file at a particular point in time, it would recreate that file by adding up all the patches stored in the database.</p>
<h2 id="Centralized-Version-Control-Systems"><a href="#Centralized-Version-Control-Systems" class="headerlink" title="Centralized Version Control Systems"></a>Centralized Version Control Systems</h2><p>Next developers started working with centralized version control systems that allowed them to collaborate with their peers working on other systems. The idea is to have a single server that contains all the versioned files and a number of clients check out files from this central place. Systems such as CVS, Subversion and Perforce were based on this idea. This system was better than local version control system because team members to a certain extent know what others are working on and now administrators have better control over who can do what.</p>
<p><img src="/img/version-control-git/central-version-control.png" alt="Screenshot 1"></p>
<p>But there are some down sides too. If the server goes down for sometime, then during that period nobody can collaborate and save versioned changes to anything they’re working on. But even worse what if the hard disk on the server gets corrupted ? You absolutely loose everything except for whatever single snapshots people happen to have kept on their local machines.</p>
<p>Both local version control system and centralized version control system suffers from this problem. Whenever you have the entire history of the project in a single place you have the risk of losing everything.</p>
<h2 id="Distributed-Version-Control-Systems"><a href="#Distributed-Version-Control-Systems" class="headerlink" title="Distributed Version Control Systems"></a>Distributed Version Control Systems</h2><p>In a distributed version control system such as Git, Mercurial, Bazaar or Darcs, the clients fully clone the repository, they don’t just check out the latest snapshot of the files. Every clone is really a full backup of all the data. Every clone consists of both the latest code files and the information about the different versions and how to generate them. Thus if the central server dies then any of the client repositories can be copied back to the server to restore it.</p>
<h2 id="Little-bit-of-history"><a href="#Little-bit-of-history" class="headerlink" title="Little bit of history"></a>Little bit of history</h2><p>Git is the most popular version control system used today. The history of git is pretty interesting since it started in a controversy. The Linux kernel is a fairly large open source project. In 2002 the Linux kernel project began using <strong>BitKeeper</strong> for version control which was a proprietary DVCS. In 2005 the relationship between the commercial company that developed BitKeeper and the community that developed the Linux kernel broke down, and thus no more the Linux kernel community could use the tool for free of charge. This provoked the Linux community and especially the creator of Linux kernel(Linus Torvalds) to develop their own version control tool keeping in mind the lessons they had learned while using BitKeeper. Some of the goals for designing the new system that they had in mind was:</p>
<ul>
<li>Free &amp; open source</li>
<li>Fast</li>
<li>Simple design</li>
<li>Efficient with large projects</li>
<li>Strong support for non-linear development</li>
<li>Fully distributed</li>
</ul>
<p>Git project was completed with the above features in 2005. Since inception it has been in wide adoption. It is extremely fast and can handle large projects efficiently. Its branching system which we will look into later provides strong support for non linear development.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Before installing git you might want to check whether git is already installed. You can open the terminal and type <code>git --version</code> to check the exact version that you have or you could do <code>which git</code> to find the location of git.<br>If you are on a Linux machine you can use the package manager that comes with your installation. If you’re on Fedora for example, you can use yum:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install git-all</div></pre></td></tr></table></figure></p>
<p>If you’re on a Debian-based distribution like Ubuntu, try apt-get:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git-all</div></pre></td></tr></table></figure></p>
<p>If you are on mac then the easiest way to install git is to install command line tools from Xcode. If you want a more updated version of git then you can head over to the downloads section of the <a href="https://git-scm.com/downloads" target="_blank" rel="external">official git website</a> and download the git installer. The installation process is pretty simple and the installer will guide you through.</p>
<h2 id="Snapshots-Not-Differences"><a href="#Snapshots-Not-Differences" class="headerlink" title="Snapshots, Not Differences"></a>Snapshots, Not Differences</h2><p>Other version control systems(CVS, Subversion, Perforce, Bazaar, and so on) store information as a list of file based changes. The information they keep and store is the changes made to each file over time.</p>
<p>Git handles data in a completely different way. Git thinks of its data more like a set of snapshots of a miniature filesystem. Whenever you save the state of your project in Git, it basically takes a snapshot. It takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.</p>
<h2 id="Almost-everything-is-done-locally"><a href="#Almost-everything-is-done-locally" class="headerlink" title="Almost everything is done locally"></a>Almost everything is done locally</h2><p>Most of the operations done in Git is performed locally, no information is needed from another computer on your network. This is possible because the entire history of the project is right there on the local disk. This is why almost every operation seems instantaneous(no network latency overhead).</p>
<p>For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you, it simply reads it directly the your local database.</p>
<h2 id="Initial-Configuration"><a href="#Initial-Configuration" class="headerlink" title="Initial Configuration"></a>Initial Configuration</h2><p>Before we start using git for our projects we need to configure git to suit our needs, just like how we would configure a text editor before we start writing code. You should have to do these things only once on any given computer and they’ll even stick around between upgrades. Its important to note here that git allows us to provide configuration at 3 different levels.</p>
<ul>
<li><strong>System</strong> - Configurations at this level apply to all the users of the system</li>
<li><strong>User</strong> - Configurations at this level apply to a specific user of the system</li>
<li><strong>Project</strong> - Configurations at this level apply to a specific project</li>
</ul>
<p>The system level configurations are stored at <code>/etc/gitconfig</code>, the user level configurations are stored at <code>~/.gitconfig</code> or <code>~/.config/git/config</code>, the project level configurations are stored at <code>project-root/.git/config</code>. Each level overrides values in the previous level, so values in <code>.git/config</code> trump those in <code>/etc/gitconfig</code>. These configuration files are just plain text files. To change the configuration at any particular level we could very well just go and edit the corresponding file manually, but the issue here is that we should also know the format in which we must write the configurations. To simplify this process git provides us with some commands to add/remove configurations at any level.</p>
<p>We run the command <code>git config --system &lt;configuration&gt;</code> for a system wide configuration, or <code>git config --global &lt;configuration&gt;</code> for a user level configuration, and <code>git config &lt;configuration&gt;</code> for a project level configuration.</p>
<p>Lets add a few user level configurations to start with. The first thing is, you need to tell git about yourself i.e your name and email address. When you are working on a project with multiple team members and when you make a change, git marks that change with your identity. In this way any team member can know the person who was responsible behind writing/changing a particular piece of code.</p>
<p>You can also tell git the default text editor that you want it to use. Git uses that text editor to open files when it wants you to enter some message. If not configured, git uses your system’s default editor. Along with the text editor we also provide it with 2 options <code>w</code> meaning telling unix to wait till we complete entering the message(if we don’t do this unix will not wait till we complete writing the message and it will keep going with what it needs to do) and <code>l1</code> means put the cursor at line number 1. Another configuration that we can add is to tell git to use colors when outputing things to the command line, if we don’t add this configuration it will just give us plain monochromatic text.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"Raj Abishek"</span></div><div class="line">git config --global user.email <span class="string">"rajabishek@hotmail.com"</span></div><div class="line">git config --global core.editor <span class="string">"sublime -wl1"</span></div><div class="line">git config --global color.ui <span class="literal">true</span></div><div class="line">git config --global --list <span class="comment">#Show all the configurations</span></div><div class="line">git config --global user.name <span class="comment">#Show's the name</span></div><div class="line">git config --global user.email <span class="comment">#Show's the email address</span></div></pre></td></tr></table></figure></p>
<p>After running the above command git will automatically write these configurations to the <code>~/.gitconfig</code> file. Infact if you look at the contents of the configuration file by running <code>cat ~/.gitconfig</code> we can indeed see the configurations added. The contents of the configuration file are show below. As you can see below git expects the configurations in a specific format. Thanks to the <code>git config</code> command, we need not worry about any of this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">       	email = rajabishek@hotmail.com</div><div class="line">       	name = Raj Abishek</div><div class="line">[core]</div><div class="line">       	editor = sublime -wl1</div><div class="line">[color]</div><div class="line">        ui = true</div></pre></td></tr></table></figure>
<p>When you run the <code>git config --list</code> command it shows the settings the are applicable for the project. Git starts reading the settings from the system level downwards. As a result you may see keys more than once, because git is reading the same key from different files (/etc/gitconfig and ~/.gitconfig, and then <project-root>/.git/config). First it reads from the system level, then it reads from the user level and then it reads from the project level. Git uses the last value for each unique key it sees.</project-root></p>
<h2 id="Getting-help-from-git"><a href="#Getting-help-from-git" class="headerlink" title="Getting help from git"></a>Getting help from git</h2><p>You can use the <code>git help</code> command to get help from git. This will list the commonly used commands that git provides along with a short note on each one of them. To know more about how to use a specific command we can do <code>git help &lt;verb&gt;</code> or <code>git &lt;verb&gt; --help</code>. It actually brings out the git manual page for that command, the page has the description about that command and the options that we can use along with it. Use can use <code>f</code> key to move forward and <code>b</code> to move backward in the git man page.</p>
<p>When you are finally done you can hit <code>q</code> to come out. Now unix users will recognize that the manual page that was opened looked something similar to the unix man page.  In fact its was the very same thing, you could have also opened it using <code>man git-log</code>. Git just gives you an easier way to look at those manual pages through its command line tool.</p>
<h2 id="Initializing-a-repository"><a href="#Initializing-a-repository" class="headerlink" title="Initializing a repository"></a>Initializing a repository</h2><p>Before we start using git for a project we need to initialize a repository, what I mean is that we need to tell git which is the folder that it needs to keep track of. The first step that we do is we navigate to the project’s root folder and run the <code>git init</code> command there. This tell git to do the initialization process, i.e we are essentially telling it to start doing what it needs to do, to track this folder.</p>
<p>What git internally does is that it creates a <code>.git</code> folder in the project’s root where it stores all the information for tracking purpose. Its important to note here that this <code>.git</code> folder is the only place where git stores all the information, unlike other version control systems like SVN it doesn’t include a tracking file in every single directory down the line (To remove SVN we would have to go through every sub directory in the project and pull out the tracking file present in it). Since this is the only place where git stores all the information for tracking, in future if we needed to remove version control from our project, all that we need to do is remove this folder by running <code>sudo rm -rf .git</code>.</p>
<h2 id="Basic-git-workflow"><a href="#Basic-git-workflow" class="headerlink" title="Basic git workflow"></a>Basic git workflow</h2><p>Now that we have initialized git, the basic work flow that one would follow is shown below.</p>
<ol>
<li>Make the changes in files</li>
<li>Add the changes ( Adds the files to the staging area - more on this later )</li>
<li>Commit changes to the repository with a message</li>
</ol>
<p>To add the changes we use the git add command, we run <code>git add &lt;path&gt;</code>. Once the files are added to the staging area we commit them with a message. You can think of commit as taking a photograph or capturing a screen shot. Commits are what that allows us to get a previous version of file. Every time you commit you are creating a backup of the files. To commit with a message we run <code>git commit -m &quot;Commit message&quot;</code>.</p>
<p>The commit message is very important and it needs to be descriptive. In the commit message you write what that change set does and not what you did or what you were asked to do. For example if you are asked animate a screen in a mobile app. Then first you write code for the animation. You add those files to the staging area. And then you commit this change set with a message like “Animates the login screen before presenting it”. As you can see here, the commit message describes what the change set is and not what you actually did(“I added the animation for the login screen”). If someone else pulls in this change set in their project, commit message should let them know what will happen.</p>
<h2 id="Looking-through-the-commits-made"><a href="#Looking-through-the-commits-made" class="headerlink" title="Looking through the commits made"></a>Looking through the commits made</h2><p>The git log command allows us to see the commits that have been made so far. For example to see the recent 5 commits we run <code>git log -n 5</code> to get the last 5 commits that have been made. <code>git log --since=2016-08-1</code> will show the commits that have been made after 1st of August 2016.(This is exclusive doesn’t include commits made on 1st of August). Similarly the command <code>git log --until/before=2016-08-1</code> will show commits that have been made before 1st August 2016.(This is inclusive, includes the commits made on 1st of August). You can also pass something interesting values for the dates. You can do something like <code>git log --since=&quot;2 weeks ago&quot;</code> to get the commits from the last 2 weeks. You can even combine since and util options in the git log command. <code>git log --since=&quot;2 weeks ago&quot; --until=&quot;3 days ago&quot;</code> shows the commits that have happened since 3 weeks ago and it will show the results only till 3 days ago, the commits made during the last 3 days wont be shown. And another way you can write this command is <code>git log --since=2.weeks --until=3.days</code>.</p>
<p>You also look for commits that have been made by a specific author, you need not search by the full name, you can just provide git a part of the author’s name and git will search for you. <code>git log --author=&quot;Raj&quot;</code> will search for all commits that have been made by authors who’s name contains the word “Raj”. We can also search the commits by the commit message, <code>git log --grep=&quot;hello&quot;</code> will bring out all commits that have the word hello in the commit message. <code>grep</code> stands for global regular expression.</p>
<h2 id="Three-tree-architecture"><a href="#Three-tree-architecture" class="headerlink" title="Three tree architecture"></a>Three tree architecture</h2><p>Git uses a three tree architecture, i.e we have 3 trees the <strong>working copy</strong>, <strong>staging area</strong>, and the <strong>repository</strong>. We call each one of them a tree because each one of them represents a folder structure. When we run the git add command we are adding files to the staging area. From there we commit to the repository. It is also possible to go ahead and commit directly to the repository and skip the staging step, we will look into that in a moment.</p>
<p>The whole point of having a staging area is to make and get things ready, lets say we have 10 files that haves changes in our project(working copy), now if we don’t want to commit all these changes at once as a single change set(a commit), then this is where the staging area comes in handy. We can just add those files to the staging area that we want to be a part of the next commit and commit them alone. Next we can take the remaining changes from the working copy and do the same.</p>
<p>The staging area acts like a workplace where we can arrange and group things that we want to be a part of one change set. When we commit only the changes present in the staging area will be recorded. Now we also have the option to pull changes from the repository to the staging index, and then from there to the working copy, buts that’s not usually the way we work. Whenever we are pulling changes from the repository we pull it directly into the working copy.</p>
<p>The <code>.git</code> directory is where git stores the metadata and object database for your project. This is the most important part of git, and it is what is copied when you clone a repository from another computer. The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database from the <code>.git</code> directory and placed on disk for you to use or modify. If a particular version of a file is in the <code>.git</code> directory, it’s considered committed. If it has been modified and was added to the staging area, it is staged. And if it was changed since it was checked out but has not been staged, it is modified.</p>
<h2 id="How-git-refers-to-the-change-sets"><a href="#How-git-refers-to-the-change-sets" class="headerlink" title="How git refers to the change sets ?"></a>How git refers to the change sets ?</h2><p>Git generates a checksum for each change set. Checksum algorithms convert data into a simple number called as a checksum. How many ever times you feed in the data to the checksum algorithm, the same data always generates the same checksum. Changing the data would result in a different checksum. Git uses SHA-1 hash algorithm for generating the checksum. It is a 40 character hexadecimal string.</p>
<p>We have seen this checksum before if you remember, when we do git log we see this checksum that is generated for each commit. Therefore every commit has a meta information attached to it which includes the checksum, the author details and a reference to the checksum of the previous commit(parent). In fact we can use these checksums for searching a particular commit.</p>
<h2 id="Demystifying-the-HEAD-pointer"><a href="#Demystifying-the-HEAD-pointer" class="headerlink" title="Demystifying the HEAD pointer"></a>Demystifying the HEAD pointer</h2><p>We also have something called as the HEAD pointer in git. HEAD always points to the tip of the current branch in the repository. It is the last state of the repository, what was last checked out. Or you can visualize HEAD as a pointer that is pointing to the parent of the next commit, i.e where the writing will start taking place. Its the place where we left off, its the place from where we are going to make any further changes.</p>
<p>Inside the <code>.git</code> folder there is a file called HEAD and that is what git uses to know where the HEAD is pointing. If you see the contents of the file you find a path, if you follow that path, you would actually lead to the SHA value of the most recent commit made in the current branch. When we are doing <code>git log</code> its the same thing as doing <code>git log HEAD</code> i.e we are telling git to log the commits starting from the HEAD going backwards. Instead if we do <code>git log &lt;sha-value-of-a-commit&gt;</code> then it would log all the commits previous to that commit.</p>
<h2 id="Revisiting-some-basic-git-commands"><a href="#Revisiting-some-basic-git-commands" class="headerlink" title="Revisiting some basic git commands"></a>Revisiting some basic git commands</h2><p>One of the most important commands in git is the <code>git status</code> command, it reports us the difference between the three trees in git. Whenever you don’t know what to do while working with git, this command will help you with the available options that you have. It shows the difference between the working area, staging area and the repository. Its also shows the current branch that we are on. Lets say that you add 2 new files, now when you run <code>git status</code> it says that you have 2 untracked files. All that it is trying to tell you is that it knows about the repository and it has found 2 new files in the working copy that are not there in the repository. Working copy has new things that git is not currently tracking.</p>
<p>Now to add files to the staging index we do <code>git add &lt;path-to-file&gt;</code> or we can add all files in a folder by running <code>git add &lt;path-to-folder&gt;</code>. This will add all the files in the path to the staging area from where we can make a commit. Now when we do <code>git status</code> the things under the changes to be committed section are the files that are there in the staging area.</p>
<p>Now to commit the changes in the staging area we run <code>git commit -m &quot;This is the commit message&quot;</code> the <code>-m</code> option is used to provide a message along with a commit. When you do a commit you are essentially taking a snapshot of the changes that you have made to files present in the staging area. Lets say you have 5 files ready to be committed in the staging area, when you do a commit you are taking a snapshot of the changes that you have made to these 5 files and giving a message that describes the change.</p>
<p>There is another git command to add the files to the staging area and then commit it in a single step. You can do that by <code>git commit -am &quot;This is the message&quot;</code>. This command is equivalent to running the following command from the root folder <code>git add . &amp;&amp; git commit -m &quot;This is the message&quot;</code>. There are some caveats here, first this adds all the files in the working directory, so if there are some changes that you didn’t want to include in the first change set that you are commiting, then this might not be the best option that you are looking for. Secondly, the files that are deleted and the files that are not tracked(new files) doesn’t get included in this. This only works well for files that have been modified.</p>
<h2 id="Show-the-differences"><a href="#Show-the-differences" class="headerlink" title="Show the differences"></a>Show the differences</h2><p>Lets say you have made some changes in the working copy. Now we can use the <code>git diff</code> command for showing the changes that you have made. It shows us the difference between the working copy and the staging index. By the way staging area and staging index is the same, the terms are used interchangeably. It just reports the changes that we have in the working copy, i.e what is unique is the working copy, how is the working copy different from the staging index and the repository. It tells on a line by line basis on what was changed. <code>git diff &lt;path-to-file&gt;</code> will just report that changes that have occurred to the particular file. <code>git diff --staged</code> command compares the staging area with repository, i.e how is the staging are different from the repository. <code>git diff --cached</code> is the equivalent to the <code>git diff --staged</code> command. There is also another option called as <code>--color-words</code> that you can use with the git diff command to show the changes side by side on the same line and to use color to differentiate the changes, instead of the changes on different lines. We run the command <code>git diff --color-words &lt;path-to-file&gt;</code>.</p>
<h2 id="Deleting-a-file"><a href="#Deleting-a-file" class="headerlink" title="Deleting a file"></a>Deleting a file</h2><p>Lets say your working copy is in sync with the repository. Now lets say you are removing a file from the working copy, let say you are removing sample.text file. First you delete the file on disk. Now when you run git status, git tells you that I knew a file that I was tracking called as sample.txt but its not present in the working area now. Now as usual to add the file to the staging index you can do <code>git rm/add sample.txt</code>. Now if you do git status it shows you that the file that was deleted. Next to commit this change you can do a git commit.</p>
<p>Now you also have another way to do it. Instead of you deleting the file manually on disk, git can take care of that work for you. You can do <code>git rm sample.txt</code> this will essentially do <code>rm sample.txt &amp;&amp; git add sample.txt</code>, i.e its does a Unix delete on the file and adds the change to the staging area. What is happening here is that the file is removed from the staging area and removed from your working copy. Now you can just do git commit to capture this change set. If you modified the file and added it to the index already, you must force the removal with the -f option. This is a safety feature to prevent accidental removal of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from git. When it comes to deleting files I would suggest the 2nd approach, let git handle the work for you. Its more easy and quick way to achieve the result. But of course if you are removing multiple files and would like to capture that change you can use the first method.</p>
<h2 id="Moving-or-Renaming-a-file"><a href="#Moving-or-Renaming-a-file" class="headerlink" title="Moving or Renaming a file"></a>Moving or Renaming a file</h2><p>If you think about it renaming is essentially moving a file. Its like deleting the old file and adding the new file. So when you move a file in the working copy you have to do this <code>git rm/add &lt;old-path&gt;</code> and then <code>git add &lt;new-path&gt;</code>, i.e delete the old file and add the new untracked file. Now if you do git status it shows that the file has be moved. To commit this change you can do a git commit as usual.</p>
<p>Instead of doing these work manually there is another way in which git can help you in this process. You can do <code>git mv &lt;old-path&gt; &lt;new-path&gt;</code> and git will move the file on disk and add the changes to the staging area. Now to can just git commit to complete the process. When it comes to moving files I would suggest the 2nd approach, let git handle the work for you. Its more easy and quick way to achieve the result.</p>
<h2 id="Undoing-changes-made-to-the-working-copy"><a href="#Undoing-changes-made-to-the-working-copy" class="headerlink" title="Undoing changes made to the working copy"></a>Undoing changes made to the working copy</h2><p>This is the most useful feature in git, in fact this is the reason why we use version control at all. The ease to move back to any previous state is what makes this tool very popular. Lets take a look at how we can undo changes in git. The changes that you made in the working directory, changes that you made staged in the staging index or changes that you have even committed in the repository. First lets take a look at how we can undo changes that we have made in the working directory. Lets say we have a file called sample.txt and we make some change in it and save it. But we didn’t do it on purpose, now we want the backup version of sample.txt that is in our repository, we want the saved version that git has stored for us in the backup. So we want git to essentially go to the repository checkout the sample.txt file from there and replace what we have in the working directory with it. To do that we use the following command <code>git checkout sample.txt</code>.</p>
<p>The git checkout command is used for more that one purpose, its also used along with branches that we will see later. What checkout does is that goes to the repository and gets the named thing that we give it and makes our working directory look like that. So if that named thing is a branch it brings a branch down, if the named thing is a file it brings the file down.</p>
<p>Lets say we have a folder called sample in our working directory in which we have changes in many files, now if we do <code>git checkout sample</code> it will checkout the sample folder from the repository and replace the sample folder in the working copy with it. Which means that now all changes that we made in the sample folder are lost. This is all great, but what if we also had a branch called sample. Then its difficult for git to decided whether we mean a branch or a folder, so git decides to give us the branch by default. Thats why its a good practice to use the <code>--</code> option while not checking out a branch. So the best way to checkout the sample folder here would be to <code>git checkout -- sample</code>. The <code>--</code> option is just to indicate git that we are not checking out a branch, we are just talking about a file or folder in the current branch.</p>
<h2 id="Undoing-changes-made-to-the-staging-index"><a href="#Undoing-changes-made-to-the-staging-index" class="headerlink" title="Undoing changes made to the staging index"></a>Undoing changes made to the staging index</h2><p>Lets say we have a sample.txt file in which we have made some changes and now we have added that file to the staging index. Now how do we unstage this file, i.e how do we remove this file from the staging index. We don’t want to loose the changes that we made to this file, we still want the changes to be present in the working directory, all that we want to do it remove this file from the staging index, i.e make the sample.txt file in the staging index look the same as the sample.txt file from the repository.</p>
<p>The time when you most often will be doing this is when you are trying to put files together for a commit and you have accidentally added a file to the staging index that you didn’t want to a part of the change set that you will be commiting. The way to unstage a folder/file is <code>git reset HEAD &lt;path&gt;</code>. What we are telling is go and look at the HEAD pointer, the HEAD pointer points to the last commit in the current branch, go look at that commit and reset the file to the same as what that has.</p>
<h2 id="Undoing-changes-made-to-the-repository"><a href="#Undoing-changes-made-to-the-repository" class="headerlink" title="Undoing changes made to the repository"></a>Undoing changes made to the repository</h2><p>Now how do we go about undoing changes made to the repository itself. This is not as easy as you might think, it gets a bit trickier here. Because if you think about it, it makes sense. Lets say we have some commit x in the history that we would like to change, now if you remember if we change the data the the checksum will change(checksum depends on the changes made in the files, the commit message, date, author details, parent value of the commit), but checksums are what used to identify commits in git. If checksum of x changes then the parent of the next commit following x needs to change, if the parent value changes then checksum for it must also be changed, and therefore the checksum of every commit following x in the commit history needs the change. All the way down the chain from x every single commit object will need to be changed, we have completely broken the integrity of data thats in git. Git doesn’t allow us to do that. However it is possible for us to just change the last commit because there are not commits following that. So the most recent commit, the commit that HEAD points to alone has the ability to change.</p>
<p>So lets say we make a change to the sample.txt file and commit that, but thats not how we wanted the change set to be, so what we can do is make the rework on how we want the changes to be in our working copy and add that to the staging index and then do <code>git commit --amend -m &quot;This is the message for the commit&quot;</code>. Doing this removes the last commit and adds this new one. We can also use this if we would like to just change the commit message alone, lets say we have a spelling error in the last commit message that we made the we can just do <code>git commit --amend -m &quot;This is the new message for the commit&quot;</code>.</p>
<h2 id="Retrieving-old-versions"><a href="#Retrieving-old-versions" class="headerlink" title="Retrieving old versions"></a>Retrieving old versions</h2><p>Previously as we have seen that its difficult to amend older commits since it would violate the data integrity in git. But what we can do is we can make a new commit to revert the changes made in a commit. Lets say we have a commit x, but we are not happy with the change set that in creates, now what we can do is we can checkout the file from the commit previous to commit x(lets say commit y) and make the changes as we want and commit the changes as a new commit, when we commit this its a good practice to mention that this commits reverts the commit x, so that other people can understand the purpose of this commit. By default when do a <code>git checkout -- &lt;path&gt;</code> were actually doing <code>git checkout HEAD -- &lt;path&gt;</code> i.e getting the file from the latest commit, instead we could also get a version of file from a previous commit. In our case we need to checkout the file from the commit y, because in commit x the file actually changed. Now to checkout files from the commit y we do the following <code>git checkout &lt;part-of-sha-value-of-commit-y&gt; -- &lt;path&gt;</code>. Now when we do this i.e get the version of a file from previous commit the file gets added to the staging area, making it ready for us to commit.</p>
<p>Git also has a revert command that make it easy for us to revert a particular commit lets say as we wanted here we need to revert the commit y, then when we do <code>git revert &lt;part-of-sha-value-of-commit-y&gt;</code> it will take all the changes made during commit y and flip it around, it will do exact opposite of the changes anything added will be deleted and anything deleted will be added back again, anything that was modified will be changed back to the previous state. When we execute this command, it going to make that commit. It will pop up the default text editor that we gave and give us an option to change the commit message if we want. Now you can pass the <code>-n</code> option with revert and it won’t actually do the commit, it will just stage it, wait for you to commit by yourself. Now git revert works really well when things are simple, but if in the mean time other things have changes files have moved perhaps, things were renamed, then it would be harder to make an exact mirror image revert. Now to deal with it git will use a complex set of rules for how to deal with those changes, and the set of the rules that we use is the rules for merging. But if you revert something very complex you are essentially gonna find yourself doing a merge between the current branch and the new set of changes that you are trying to merge into it.</p>
<h2 id="Undoing-many-commits"><a href="#Undoing-many-commits" class="headerlink" title="Undoing many commits"></a>Undoing many commits</h2><p>Git reset command is a very powerful tool to undo multiple commits. Always remember that more powerful a tool is the more careful and responsible we have to be while using it. With great power comes great responsibility. Git reset always moves the HEAD pointer. But there are 3 different options that we can use with git reset.</p>
<ul>
<li><strong>soft</strong> - Doesn’t change the staging area or the working directory</li>
<li><strong>mixed</strong>(default) - Changes staging index to match repository, doesn’t change the working directory</li>
<li><strong>hard</strong> - Changes the staging index and the working directory to match the repository</li>
</ul>
<h2 id="Soft-reset"><a href="#Soft-reset" class="headerlink" title="Soft reset"></a>Soft reset</h2><p>Whenever you are working with git reset, its a good idea to take a screen shot of the git log before you proceed any further. Noting down the SHA values can be helpful if you mess up with anything. Lets say we have b as the most recent commit and commit c was made before commit b. Now the HEAD points to the SHA value of commit b. You can check that with <code>cat .git/refs/heads/master</code>. Now if you do <code>git reset --soft &lt;part-of-sha-value-of-commit-c&gt;</code>, then HEAD will point to the commit c. You can check that with <code>cat .git/refs/heads/master</code>, that the value would have changed. Now in fact if you do <code>git log</code> you won’t find commit b. c will be like the last commit that was made. The working directory will have the changes that we made after commit c. The changes will be ready in the staging area for us to make a commit.</p>
<h2 id="Mixed-reset-Default"><a href="#Mixed-reset-Default" class="headerlink" title="Mixed reset(Default)"></a>Mixed reset(Default)</h2><p>With this type of git reset the staging area will match the repository after the HEAD pointer was made to point to a different one. Just like the previous example lets say we have b as the most recent commit and commit c was made before commit b. Now the HEAD points to the SHA value of commit b. You can check that with <code>cat .git/refs/heads/master</code>. Now if you do <code>git reset --mixed &lt;part-of-sha-value-of-commit-c&gt;</code>, then HEAD will point to the commit c. You can check that with <code>cat .git/refs/heads/master</code>, that the value would have changed. Now in fact if you do <code>git log</code> you won’t find commit b. c will be like the last commit that was made. The working directory alone will have the changes that we made after commit c. The staging index will not have the changes, it will be identical to the repository. The changes will be ready in the working area for us to stage and make a commit.</p>
<p>In fact if you remember when you need to unstage a file from the staging index you do <code>git reset HEAD &lt;filename&gt;</code>, what is essentially happening here is a mixed reset. Since mixed is the default reset you don’t actually need the –mixed option if you want to do a mixed reset. Here we are reseting the HEAD pointer to HEAD itself and making the staging area’s file match with the repository’s version of the file. This is what happens when we additionally give a filename. Not the entire staging area is made to match the repository, only that particular file that was provided is checked out from the repository to the staging index.</p>
<h2 id="Hard-reset"><a href="#Hard-reset" class="headerlink" title="Hard reset"></a>Hard reset</h2><p>With this type of git reset the staging area and the working directory will match the repository after the HEAD pointer was made to point to a different one. Just like the previous example lets say we have b as the most recent commit and commit c was made before commit b. Now the HEAD points to the SHA value of commit b. You can check that with <code>cat .git/refs/heads/master</code>. Now if you do <code>git reset --hard &lt;part-of-sha-value-of-commit-c&gt;</code>, then HEAD will point to the commit c. You can check that with <code>cat .git/refs/heads/master</code>, that the value would have changed. Now in fact if you do <code>git log</code> you won’t find commit b. c will be like the last commit that was made. Use this with caution because you will loose all the changes that you made after commit c, there is no place in which we will have the changes that we made after commit c.</p>
<h2 id="Removing-untracked-files"><a href="#Removing-untracked-files" class="headerlink" title="Removing untracked files"></a>Removing untracked files</h2><p>This is where the git clean command comes in handy. Lets say you have a bunch of new files that you have added to the project and you would like to remove them, then you could do it manually, but git clean simplifies this process. You cannot use the git clean option as such you have to use it with either the <code>-n</code> or the <code>-f</code> option. When you do <code>git clean -n</code> it will show you the list of new files that git will remove. When you do <code>git clean -f</code> git would actually remove the new file from the working copy. Its important to note here that git clean only removes the untracked files, i.e lets say you have added 3 new files sample1.txt, sample2.txt and sample3.txt then let says you add sample3.txt to the staging area. Now when you run <code>git clean -f</code> git will remove only the sample1.txt and the sample2.txt file. So git clean removes the untracked files that are there in your working directory.</p>
<h2 id="Ignoring-files"><a href="#Ignoring-files" class="headerlink" title="Ignoring files"></a>Ignoring files</h2><p>Lets say we are working on a project and we don’t want git to track a particular file or a folder. It may be a log file thats constantly changing, or a temporary file, or a folder that contains the project dependencies which is something that we don’t wanna be a part of version control. We need a way to tell git to ignore certain files all together. To tell the list of these files and folders that we want git ignore we create a <code>.gitignore</code> file in the project root. We can even use very basic regular expressions in the gitignore file. We can negate expression using the <code>!</code> character. The following rules means that ignore all html files except the index.html file. The order of writing the rules is important. Git reads the file from top to bottom and keeps overwriting the rules which are already there.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*.html</div><div class="line">!index.html</div></pre></td></tr></table></figure></p>
<p>You can also tell git to ignore all files in a directory by just having a trailing slash. The following rules says git to ignore all files in the photos directory, which is inside of the assets directory.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">assets/photos/</div></pre></td></tr></table></figure></p>
<p>In the gitignore file comments should start with # character, and blank lines in the gitignore files are skipped. Make sure that you commit the gitignore file to the repository. This is a file that we want git to track and maintain, it is as important as any other project files or folders.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">assets/*.png</div></pre></td></tr></table></figure></p>
<p>The above rules will only ignore the png files in the assets folder, if the assets folder has a folder that contains some other png files, those png files will not be ignored, i.e * only applies to the filenames.</p>
<h2 id="What-to-ignore"><a href="#What-to-ignore" class="headerlink" title="What to ignore ?"></a>What to ignore ?</h2><ul>
<li>Compiled source code</li>
<li>Packages &amp; compressed files</li>
<li>Logs &amp; Databases</li>
<li>Operating system generated files</li>
<li>User uploaded assets (images, PDFs, videos)</li>
</ul>
<p>To start writing gitignore files for your project you can visit <a href="https://www.gitignore.io/" target="_blank" rel="external">this website</a> and type a programming language, or operating system as tags to get started with some boilerplate code. They even have a consistent endpoint naming system allowing developers to even access it via APIs. You way also wanna look at github <a href="https://help.github.com/articles/ignoring-files/" target="_blank" rel="external">article</a> on ignoring files and the gitignore <a href="https://github.com/github/gitignore" target="_blank" rel="external">project</a> created by github.</p>
<h2 id="Ignoring-files-globally"><a href="#Ignoring-files-globally" class="headerlink" title="Ignoring files globally"></a>Ignoring files globally</h2><p>If find yourself ignoring certain files over and over for every project, for example like the operating system files then you can configure git globally to ignore certain files. Doing this will allow to ignore files in all repositories. The settings that we add for configuring to ignore files globally will not live inside of our project, its gonna be outside. Since it wont be a part of the repository, any other person who is working, when they download our project it will not have this configuration. What we are doing is instead or repository specific ignores we have create user specific ignores. Thats good because having things like .DS_Store in the gitgnore is not good if not every team member is using a mac based operating system. Each person in team can have their own gitignore file specific to their operating system on their machines. There are 2 steps that needs to be done to globally ignore files.</p>
<ol>
<li>Make a global gitignore file in some location</li>
<li>Tell git where to look for the global gitignore file</li>
</ol>
<p>Lets say we create a new file in the home folder called as .gitignore_global that represents the global gitignore file. Next to tell git about that we add the following user level configuration <code>git config --global core.excludesfile ~/.gitignore_global</code>.</p>
<h2 id="Ignoring-tracked-files"><a href="#Ignoring-tracked-files" class="headerlink" title="Ignoring tracked files"></a>Ignoring tracked files</h2><p>If you want to ignore files that are already being tracked, then what can we do ? First step would be to add it to the list in the gitignore file. But doing this alone will not help. Git will still keep track of the changes. One option is that you can do <code>git rm &lt;filename&gt;</code> which would remove the file from the working copy and add the changes to the staging index ready for us to commit. Now we can also add the .gitignore file to the staging area, if we commit now, the file would be removed from the working copy and the repository, and even if we add that file again to the project git will not track it.</p>
<p>But what if we do not want to loose the working copy that we had. Well you can delete that file from the staging index alone with the command <code>git rm --cached &lt;filename&gt;</code>, now add the .gitgnore file to the staging area and make a commit. Now the file would be delete from the repository also. The only place where the file would be present in the working copy, but again it will not show as an untracked file because now we have git ignored it.</p>
<h2 id="Tracking-empty-directories"><a href="#Tracking-empty-directories" class="headerlink" title="Tracking empty directories"></a>Tracking empty directories</h2><p>By default git does not track empty directories. That is because git was designed to be a file tracking system, its purpose is to track files and content in those files. So it tracks files and tracks the directories that it takes to get to those files. But it ignores directories that have no files at all. Now lets say we have an empty folder, but we want git to track that folder, how do we tell git to do that. So the trick that we use here to keep track of empty directories in so put a file in them. By convention the filename that is used for this purpose is a <code>.gitgnore</code> or a <code>.gitkeep</code> file. <code>.gitkeep</code> is the most widely used conventions, you can think of it has a way of telling git to track that folder.</p>
<p>Now you can just add that folder to staging index and commit this change set. There is nothing magical happening here we could have named that file anything we want, we just followed a method that everyone uses. The idea behind doing all this is to add a dummy file in the empty folder which git can track (in turn tracking the folder it takes to read that dummy file).</p>
<h2 id="Looking-through-commit-history"><a href="#Looking-through-commit-history" class="headerlink" title="Looking through commit history"></a>Looking through commit history</h2><p>Before we proceed lets look at the ways in which we can reference commits in git. In the git documentation you often see the reference to the word tree-ish. What does this mean ? We know that tree is a folder structure in a git repository. In git tree-ish means something that references a part of the tree. Its ish because that something can vary widely. In simpler terms a tree-ish is a reference to a commit. Because that commit in turn references the tree, git repository and the files in there at that point. So if you hard time thinking about all the things a tree-ish can be, the simplest version is that its just something that points at a commit. So lets look at the ways in which we can reference a commit.</p>
<ul>
<li>full SHA-1 hash of a commit</li>
<li>part of SHA-1 hash of a commit (at least 4 characters)</li>
<li>HEAD pointer ( to reference the latest commit )</li>
<li>Branch reference ( to point to the tip of the branch )</li>
<li>Tag reference</li>
<li>Ancestry</li>
</ul>
<p>In ancestry we have 2 options. One is that we can use the <code>^</code> as a suffix character to refer to a parent of a reference.<br>Like <code>HEAD^</code>,<code>master^</code>,<code>acf9339^</code>. To get the parent of parent we can use the <code>^</code> symbol twice. Second option is we can use the <code>~</code> as suffix with number of generations to go up. Like <code>HEAD~1</code>, <code>master~</code>. If there is no number after ~ it is assumed to be 1, so we can leave off number 1 i.e <code>HEAD~</code> is equivalent to <code>HEAD~1</code>.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HEAD^ == HEAD~1 == HEAD~ <span class="comment"># refers to the 2nd last commit</span></div><div class="line">HEAD^ == HEAD~1 == HEAD~ == master^ == master~  == master~1 <span class="comment"># if the currently checked out branch is master</span></div><div class="line"></div><div class="line">HEAD^^ == HEAD~2 <span class="comment"># refers # refers to the 3rd last commit</span></div><div class="line">HEAD^ == HEAD~2 == master^^  == master~2 <span class="comment"># if the currently checked out branch is master</span></div></pre></td></tr></table></figure></p>
<h2 id="Exploring-the-commit-tree"><a href="#Exploring-the-commit-tree" class="headerlink" title="Exploring the commit tree"></a>Exploring the commit tree</h2><p>We can use the git ls-tree command to look at a tree-ish. We use the command like this <code>git ls-tree &lt;tree-ish&gt;</code>. So when we do <code>git ls-tree HEAD</code>, since HEAD points to the tip of the currently checked out branch, it will return the list of files at that point. In the left you can see that we see blob or tree. A blob is a simple file whereas a tree is nothing but a folder. If were we checked out these are the files that we would get from the repository. We can also tell git to show us the file structure from inside a particular path alone, we can do <code>git ls-tree HEAD^ assets/</code>, this means that show me the file structure inside the assets folder before making the last commit.</p>
<h2 id="Navigating-the-commit-log"><a href="#Navigating-the-commit-log" class="headerlink" title="Navigating the commit log"></a>Navigating the commit log</h2><p>We have already seen the basics of git log. You should take a look at the git help pages for log because there are so many options there, and you can exactly fine tune the information that you are looking for. Let me walk you through some of the important ones. <code>git log --online</code> gives a one line information about every commit. The command <code>git log --format=oneline</code> is also equivalent to the previous one but the only difference is that it returns the full SHA instead of partial. There are other formats also <code>short</code>, <code>medium</code>(default), <code>full</code>, <code>fuller</code>,<code>email</code>,<code>raw</code>. <code>git log -3</code> can be used to the number of the recent commits to show. Since every commit has a SHA value we can even provide a range of commits. <code>git log j8129dh..r3919fh</code> will show the commits in this range, this range is exclusive of the first and inclusive of the second. We can leave the second SHA value, then it would mean all the way till end i.e it will use HEAD as the default for 2nd one.</p>
<p>We can also provide a path here <code>git log j8129dh.. index.html</code> would mean show me all the commits in which index.html file was changes since the commit with SHA value j8129dh was made. We can also provide the <code>-p</code> meaning patch option to the git log command to show is the details as to what changes in every commit. It will show the diff in each commit. Similarly the <code>--stat</code> will give you some statistics on each commit like the number of lines changes etc and the <code>--summary</code> will give a summary on each commit, i.e the number of deletions, additions, and the files changed. There is also a <code>--graph</code> option that we can use with the git log command which shows a graphical view of each one of the commits, when we start working with branches this will be very useful, cause it will show the places where we branched out and did the merges. A good combination for the graphical view would be <code>git log --online --graph --all --decorate</code> which is worth remembering cause this will show the tip of every branch and also where the HEAD currently points to.</p>
<h2 id="Looking-at-a-specific-commit"><a href="#Looking-at-a-specific-commit" class="headerlink" title="Looking at a specific commit"></a>Looking at a specific commit</h2><p>Git show command it used to look a a specific commit, what changes we made in a particular commit. <code>git show &lt;commit-reference&gt;</code> is used to show details about a particular commit. Its shows the full SHA value of the commit, the author details, the date, the commit message, the diff i.e the changes in the file. As discussed previously we can pass the <code>--format</code> option here along with the git show command. Git show can actually show various types of objects, it can show blobs, trees, tags and commits. We were working with commits here, but if we passed in a tree it would show the names of the files and folders inside it, it is equivalent to doing <code>git ls-tree --only-names &lt;tree&gt;</code>. For blobs i.e files it shows plain contents. Remember that we can’t do <code>git show index.html</code> to show the contents of the index.html file. Because index.html is not a tree-ish, it is not a reference what we have to do to see the contents with the git show command is first do <code>git ls-tree HEAD</code> and in that get the SHA value of the reference of the index.html file and then do <code>git show &lt;sha-of-index.html-file&gt;</code>.</p>
<h2 id="Comparing-commits"><a href="#Comparing-commits" class="headerlink" title="Comparing commits"></a>Comparing commits</h2><p>When we are comparing commits x and y what we are essentially doing is comparing the file trees at x and y, i.e the state of the project at commit x and the state of the project at commit y, thats what we are essentially comparing, we are not actually comparing the files that changed during commit x and during commit y, this is very important to understand and remember. So comparing the latest commit with the commit made 1 week before will show us all the changes to the project that happened during the past 1 week. When we take a look at what branches are we can even compare two different branches.</p>
<p>To compare commits we again use the git diff command in a different way. Lets say HEAD~10 refers to the commit that was made before 1 week, then running <code>git diff HEAD~10</code> would show us the all the differences between the directory 1 week ago and now. We can also be specific about what the git diff command reports. We can do <code>git diff HEAD~10 assets</code> means that show the changes that happened in the assets folder since the past 1 week. We can also pass in a range lets say HEAD~5 refers to the commit made 2 days ago then running <code>git diff HEAD~10..HEAD~5</code> will show the differences between the directories at 1 week ago and 2 days before, i,e what all changes happened in between that period of 5 days.</p>
<p>The <code>--stat</code> and the <code>--summary</code> command can be used as options along with this command. We can also use the <code>-b/--ignore-space-change</code> options which means ignore showing changes where there was a single space as a change and the <code>-w/--ignore-all-space</code> option means ignore showing changes where spaces were changed. These are useful because space changes are not somethings that you care about most often and its a way of telling git to not show those changes to you while running the diff command. With the git diff command you can use the <code>--color-words</code> options to show the changes on the same line, but with the changes highlighted with different colors.</p>
<h2 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h2><p>Getting the most of git means using branches more often and effectively. In git branches are cheap, they don’t cause a lot of headaches, its not a overhead at all when you create branches, they don’t take a lot of processing power, not a lot of storage space, they are easy to create, delete and work with. The main purpose of using a branch is that they allow you to try out new ideas.</p>
<p>Lets say that you would like to try out a new idea, instead of doing it in the master branch and undoing commits if the new idea did not go out well, you can create a new branch and work on that. If the idea doesn’t come out well then you can throw away that branch. If it did come out well then you can merge the new branch in which you were working with the master branch, meanwhile other people can be working on the master branch. This is the kind of flexibility that you get when you start using branches. When working with branches we just have one working copy, when we switch branches git will do fast context switching its going to take all of the files and folders in the working directory and match with the branch.</p>
<h2 id="Creating-amp-showing-branches"><a href="#Creating-amp-showing-branches" class="headerlink" title="Creating &amp; showing branches"></a>Creating &amp; showing branches</h2><p>Running the command <code>git branch</code> will list all the branches of the project that are there in the local machine. The <code>*</code> character indicates which is the current branch that we are on. Its referred to as the current branch or the currently checked out branch. The point where HEAD points to can be found at <code>cat ~/.git/HEAD</code> which will show <code>ref: refs/heads/master</code>. What this file contains is reference to one of the branches, the master branch in this case. The output above means that I am pointing right now to the tip of the master branch. When we do <code>ls -alh ~/.git/refs/heads</code> we see a file listing of all the branches listed there. Every time you create a branch a new file in created in this folder and the contents of the file is the SHA value of the last commit in that branch. To create a new branch you do <code>git branch &lt;branch-name&gt;</code>. Some companies using hyphens to separate the words of the branch name and some use underscores. Creating a branch doesn’t mean that you will automatically switch to that branch.</p>
<h2 id="Switching-branches"><a href="#Switching-branches" class="headerlink" title="Switching branches"></a>Switching branches</h2><p>To switch to the new branch that we create we have to do <code>git checkout &lt;branch-name&gt;</code>. Once you switch to the new branch the HEAD will point to the tip of this new branch. So when we do <code>cat ~/.git/HEAD</code> it will show <code>ref: refs/heads/&lt;new-branch&gt;</code>. If you follow that file and see the contents the SHA value will be the same because till now the tip of master branch and the new branch is the same, since we haven’t added any new commits in the new branch of the master branch.</p>
<p>You’re working directory must be mostly clean before you switch to a new branch. If your working directory has some changes that have not be commited yet the got will not allow you to switch branches. Because if you think about it lets say you have the master branch and a branch called sample, and you are currently in the sample branch and you have one file called index.html which has some changes. Now if you do <code>git checkout master</code> you are telling git to make your working directory look like the master branch, by which you will loose all the changes that you have made to the index.html file. You have got three options here.</p>
<ul>
<li>Discard the changes to the index.html file by <code>git checkout -- index.html</code></li>
<li>Commit the changes made to the index.html file to the current branch <code>git add index.html &amp;&amp; git commit -m &quot;Commit message&quot;</code></li>
<li>You can stash the changes - we will talk about this later, it is like a pocket were we can put things in until later needed.</li>
</ul>
<p>As I told you the working directory only needs to be mostly clean, because it doesn’t have to be completely clean. It should be clean enough that there are no conflicts. For example lets say you are adding a new file in the current branch and you are switching to a new branch that wouldn’t be a problem at all. Git won’t allow the switching to happen if there is a possibility of loosing data.</p>
<h2 id="Creating-amp-switching-simultaneously"><a href="#Creating-amp-switching-simultaneously" class="headerlink" title="Creating &amp; switching simultaneously"></a>Creating &amp; switching simultaneously</h2><p>We have seen how to create a new branch and then switch to the new branch. In this we will take a look at how we can create and switch to that new branch simultaneously. To do this we run <code>git checkout -b &lt;new-branch-name&gt;</code> which will create and checkout to that new branch in a single step. You can think of the <code>-b</code> option as saying check this out as a new branch, its like put this stuff in my directory as a new branch. Its important to note here that whenever you create a new branch you are always creating from the branch that you are currently on. We can create branches from new branches that we create. So lets say you are on the master branch and you checkout to a new branch called x then you make 5 commits in the branch x, now after that you create a new branch from the branch x called y and make 5 more commits in the branch y. Now if you checkout to the master branch neither of the 10 changes will be there, if you checkout to the branch x then the last 5 changes will not be there. If you checkout to the branch y then all the changes will be there. So just remember that its important when creating a branch to see which branch you are currently working on, cause the new branch always branches out from the current branch.</p>
<h2 id="Comparing-branches"><a href="#Comparing-branches" class="headerlink" title="Comparing branches"></a>Comparing branches</h2><p>If you remember we can use the git diff command to compare the two tree-ishes. A branch is also a tree-ish. So we can use the same command to compare two branches. Running the command <code>git diff master..new-branch</code> will just us the file changes between the tip of the master branch and the tip of the new-branch. Remember that we can pass any tree-ish this would also work <code>git diff master..new-branch^</code> which would give us the file changes between the tip of the master branch and the 2nd last commit of the new branch. Now we can also find whether one branch completely contains another branch or not. So when we run <code>git branch --merged</code> which will all branches that are completely included in the current branch we are on. So when we are in the new branch and execute the command it will show the master branch and the new branch (every branch is completely contained in itself). So lets say we have a master branch and we branch out of it called as x and we make 5 commits, then we branch out of x called as y and make 5 commits in it. Now when we run <code>git branch --merged</code> this will list master,x and y. If we checkout to the branch x and run the command it will list master and x. If we checkout to master and run the command it will list the master branch alone. While listing it will also indicate the current branch we are in with the <code>*</code> character.</p>
<p>The <code>--merged</code> is an option to the git branch command, git branch by default will list all the branches in the current working copy and the merged option restricts the results to just show the branches which are contained in the current branch. We can delete any branch that is contained by the current branch and the current branch won’t be affected because it have all the commits of the branches that it contains, i.e when we are in branch y deleting x will not affect y because branch y contains all the commits that are in branch x. So the way how <code>git branch --merged</code> works is that it goes the way up the ancestor chain and sees which all branch tip is present, those branches alone are the branches that the current branch contains.</p>
<h2 id="Renaming-branches"><a href="#Renaming-branches" class="headerlink" title="Renaming branches"></a>Renaming branches</h2><p>To rename a branch you use the git branch command with the <code>-m</code> or the <code>--move</code> option. Lets say we have the master branch from which we are branching out to a branch called new-feature and then we make 5 commits to clean the code. Well new-feature is really not a good name for a branch, we have to be descriptive about why we created a branch. To rename a branch <code>git branch -m &lt;old-name&gt; &lt;new-name&gt;</code>.</p>
<h2 id="Deleting-branches"><a href="#Deleting-branches" class="headerlink" title="Deleting branches"></a>Deleting branches</h2><p>To delete a branch 1st you have to move to a different branch. Then you have to use the <code>-d</code> or the <code>--delete</code> option. Running the command <code>git branch -d &lt;branch-name&gt;</code> will delete the branch entirely. Its just like how you have to move to a different branch in a tree before you cut the branch that you are currently sitting on. Another things is that lets say we are in the master branch and we branch out to a new one called as x. Now lets say we make 5 commits here. Now lets say we checkout to the master branch and if we try to delete the branch x from here git will fail and it will tell you that you have made some changes in the branch x (those 5 commits) and those changes are not yet merged in the current branch, so you would loose the data of you delete that branch.</p>
<p>So if you really wanted to destroy those 5 change sets that you made and want to delete the branch x then git wants you to explicitly tell that by using the <code>-D</code> option instead of the <code>-d</code> option. You can think of the <code>-D</code> as the force delete option. The <code>-d</code> option will only work if the branch you are deleting is fully merged with the current branch you are on and the <code>-D</code> option doesn’t require this condition. Its pretty easy to delete branches as you see in git, the only thing is that git gives you certain checks so that you don’t do something dumb.</p>
<h2 id="Merging-branches"><a href="#Merging-branches" class="headerlink" title="Merging branches"></a>Merging branches</h2><p>Its good to make branches and try out new ideas, but now its time to learn how to merge the changes made in one branch to another. Lets say we have the master branch and to try out a new idea we branch out to a new branch called as branch x and lets say we work on our new feature there and we are committing the changes that we make along the way. Now we are done with this feature and we would like to merge the changes that we made in the branch x to the master branch. The first step is you must checkout to the branch in which you would like to bring in the changes. In this case we would like to bring in the changes made in the branch x to the master branch. So first we checkout to the master branch with <code>git checkout master</code>. To to merge the branch x into it we run the command <code>git merge x</code>. Now the branch x in merged into the branch master. We can check that by doing <code>git diff master..x</code> there will be no output, or we can also check that by running <code>git branch --merged</code> and we will see the branch x in the listing. Now if we want to we can completely delete the branch x by running <code>git branch -b x</code>.</p>
<p>Now in this case merging was easy actually, but merging can be a bit complicated and we should know how to deal with them. Because of this always make sure that you run git merge in a clean working directory, make sure you don’t have any uncommitted changes before you run git merge, you can even stash them (we will see this a bit later), but always make sure you have a clean working directory which will give you a good clean workplace where you can sort out any problems which you might have while merging.</p>
<h2 id="Fast-forward-merge"><a href="#Fast-forward-merge" class="headerlink" title="Fast-forward merge"></a>Fast-forward merge</h2><p>Before we proceed any further we need to understand the difference between a fast forward merge and a real merge. In the last example we looked at when we did a merge what actually happened was a fast forward merge. When merging the new branch back to master, the master branch did not have any commits after the point from where we branched out to the new branch. Master branch was just idle, we did not commit any changes to the master branch at all, as a result what we ended up with a fast forward merge. What git does is that when we merge a new branch into the current branch git starts from the tip of the new branch and goes up the ancestor chain to see if anywhere it can find the HEAD pointer. If it finds the HEAD pointer along the way the merge that happens is called as a fast forward merge, it is the safest of all, there are no problems that we need to deal with.</p>
<p>In a fast forward merge what happens that the HEAD pointer now is just made to point to the tip of last commit of the new branch. In other type of merges this is not actually the case, what actually happens is that git uses a set of merging rules and makes a commit called as the merge commit. In a fast forward merge there is no need to make a new commit.</p>
<p>When you know that a fast forward merge is what is going to happen, you can pass a couple of options to the git merge command. The <code>--no-ff</code> option meaning no fast forward tells forces git to make a merge commit anyway. You would run it like <code>git merge --no-ff &lt;branch-name&gt;</code>, which prevents a fast forward and make a merge commit anyway. The main reason why you wanna do is that if needed some kind of documentation in the git history that you in fact did do a merge. You have another <code>--ff-only</code> which means that do the merge only if you are able to do a fast forward merge. So if you are unsure whether or not a fast forward will happen or not and you want the merge to happen only if fast forwarding is possible then you can use this option.</p>
<h2 id="Real-merge"><a href="#Real-merge" class="headerlink" title="Real merge"></a>Real merge</h2><p>A real merge is that kind of merge that happens when git is not able to find the HEAD pointer when it looks up the ancestor chain from the tip of the branch that we are trying to merge. In these cases git creates a new commit called as a merge commit and it does a really good job on choosing the best strategy for merging the changes. But sometimes in spite of its best efforts git fails. In these cases we will have to help git out to resolve the merge conflicts.</p>
<p>Lets say we have a master branch from which we branched out to a branch called as x. Now in branch x we make a change to the index.html file at the top and commit this change, now we checkout to the master branch and change the index.html file somewhere at the bottom and then commit this change, now if we try to merge the branch x into master branch git will not have any problems in merging them and it will do the real merge by itself. Conflicts only occurs when the code has changed in two branches in the same line numbers, because in this case git can’t decide which one to use and we will have to help it. This is called as resolving a merge conflict. This is one issue that we have to take care when merging branches.</p>
<h2 id="Resolving-merge-conflicts"><a href="#Resolving-merge-conflicts" class="headerlink" title="Resolving merge conflicts"></a>Resolving merge conflicts</h2><p>Whenever you trying merging and there is a merge conflict git reports the files in which the merge conflict occurred. Now when you run <code>git status</code> it will show you the unmerged paths. We are now in the middle of a merge, the merge is not yet completed, git needs some help to complete this real merge. So we need to open the file and fix the problem. Lets say you are trying to merge the sample branch into the master branch and there was a merge conflict in the index.html file. Now in the index.html file the contents would look like this after you run <code>git merge sample</code> from the master branch.</p>
<p>There are choices that you have when you need to resolve a merge</p>
<ul>
<li>Abort the merge (I don’t want the merge to happen, I wasn’t not anticipating these problems get me out of here)</li>
<li>Resolve the conflicts manually (Initially when  you are learning I suggest you to start out with this)</li>
<li>Use a merge tool to resolve the conflicts</li>
</ul>
<p>To abort the merge you just run the command <code>git merge --abort</code>. You will go back to the state before you ran the git merge command, the merge will be aborted. You can resolve the conflicts manually by opening the index.html file and the editing the way it needs to look. Now save the file and add index.html file to the staging index <code>git add index.html</code>. If you have 10 files with merge conflict then you have to manually change all the 10 files and then add all of them to the staging area before you make a commit. Normally when you commit you give it a message, here also you can give a message but you don’t need to, when you are in the middle of a merge git has a standard default message that it would use. So just run <code>git commit</code>, it might pop up the default text editor and ask give you an option if you would like to change the commit message, you can just click save and close for the merge to complete. The merge was successful you can check that by running <code>git branch --merged</code> and see that the sample branch is there in the list. Now you can remove the sample branch if you want to.</p>
<p>You could also use a merge tool to resolve conflicts instead of doing it manually. To see the list of merge tools available you can run <code>git mergetool</code> to see the list of merge tools available. When you are in the middle o a merge and you want to use the merge tool for the merge you can run <code>git mergetool --tool=&lt;tool-name&gt;</code>. You can also add a merge toll to your git config file if you want to always use a certain tool.</p>
<h2 id="Strategies-to-reduce-conflicts"><a href="#Strategies-to-reduce-conflicts" class="headerlink" title="Strategies to reduce conflicts"></a>Strategies to reduce conflicts</h2><p>The following strategies can be helpful to reduce the possibility of a merge conflict and also make it easier to resolve a merge conflict.</p>
<ol>
<li>Keep lines short</li>
<li>Keep commits small and focused</li>
<li>Beware stray edits to white space</li>
<li>Merge often</li>
<li>Track changes to master - as changes happen in master, keep bringing those changes into your branch</li>
</ol>
<p>The last technique is very important when you are working with a lot of team members. When you are working in a new branch and other are changing the master branch, its a good idea to merge the master branch into the new branch and keep in in sync with the master branch, this will help to reduce the merge conflicts when you merge the new branch into the master branch. Since the new branch has most of the changes that are incorporated in the master already and it will reduce the number of conflicts you when you merge back the new branch in master.</p>
<h2 id="Saving-in-the-stash"><a href="#Saving-in-the-stash" class="headerlink" title="Saving in the stash"></a>Saving in the stash</h2><p>The stash is a place where we can store changes temporarily without having to commit them to the repository. Its a lot like putting something in a locker to save it for a later. The stash is not a part of the working area, staging index or the repository, its a separate full area in git separate from others. The things that we put into it aren’t commits, bu they are a lot like commits. They work in a very similar way. There are still a snapshot of the changes but they don’t have a SHA value associated with them. Lets try making a change and storing it in the stash.</p>
<p>One typical use case of when stashing would come in handy would be when you needs to switch to a different branch but you have some changes that you are not quite ready to turn into a commit yet, so you can stash them instead. You run the following command to add the changes to the stash <code>git stash save &quot;This is the message&quot;</code>, note here that you need not provide the <code>-m</code> option for the message you can give it directly. After it puts the changes into the stash git does a <code>git reset --hard HEAD</code> to take whatever is in the repo and put it in the staging index and the working area. If you had untracked file to stash them also you need to pass the <code>--include-untracked</code> option, but you rarely you this options because having untracked files doesn’t prevent you from switching branches.</p>
<h2 id="Looking-at-the-stash"><a href="#Looking-at-the-stash" class="headerlink" title="Looking at the stash"></a>Looking at the stash</h2><p>To see the list of things in the stash you can run <code>git stash list</code> to see the changes added to the stash. You see the message that you added while saving to the stash in the listing. In the listing every stash has an identifier that we need to use to refer to a stash. The identifier have a naming rule they follow the pattern <code>stash@{index}</code> where index in the number starting from 0.</p>
<p>Next it also shows the name of the branch from which we saved the changes to the stash, because stash is available in all branches. This is very handy because lets say you start working on a branch and you realize that this isn’t the branch in which you wanna make the commit then you can add the changes to the stash, checkout to a new branch and pull the changes from the stash there, and then make a commit in that branch. This is another use case of when you would use a stash. To know more about a stash run the command <code>git stash show &lt;stash-identifier&gt;</code>, and by default it comes and shows whats called as a diff stat, i.e shows only statistics on what was changed. To see more information about the stash you can use the <code>-p</code> patch option.</p>
<h2 id="Pulling-from-the-stash"><a href="#Pulling-from-the-stash" class="headerlink" title="Pulling from the stash"></a>Pulling from the stash</h2><p>Now lets take a look at how we can pull the change set from the stash. Now in whichever branch we are on pulling the changes set from the stash is going to bring the changes to the working directory. It will try to bring in the files from the stash and apply it in the working directory, just like merges there may be conflicts. There are two commands that we can use to pull items from the stash, we can use the <code>git stash pop &lt;stash-identifier&gt;</code> or the <code>git stash apply &lt;stash-identifier&gt;</code> command, both of them will pull whats in the stash and put it in the working directory.</p>
<p>The differences between these two commands is the stash pop will also pull the change set out from the stash and stash apply will leave the copy of change set there in the stash. If we don’t give a stash identifier by default git is going to use the first one. Git stash apply is used in places where we would like a change set to be applied to multiple branches so we switch between branches and apply it in one by one, or in places where you would like at apply a change some after doing some commits and then again after doing some commits and so on, but mostly these uses cases are very rare and you will be only using <code>git stash pop &lt;stash-identifier&gt;</code> command.</p>
<h2 id="Deleting-from-the-stash"><a href="#Deleting-from-the-stash" class="headerlink" title="Deleting from the stash"></a>Deleting from the stash</h2><p>To remove a change set from the stash we run the command <code>git stash drop &lt;stash-identifier&gt;</code>. Clearing everything in the stash would be useful in certain cases like, lets say you are working on a feature and you stashed that, but someone else on the team has already completed that feature and you no longer have to work on that anymore. We can delete everything in the stash all at once simply by running the command <code>git stash clear</code>.</p>
<h2 id="Remotes"><a href="#Remotes" class="headerlink" title="Remotes"></a>Remotes</h2><p>Remote repositories in git are also called as remotes. Everything that we have worked on so far is on our local computer, we don’t require network connection. We can just do version control locally and not share it with anyone, its perfectly fine and git allows us to do that. But it becomes even more powerful when we start collaborating with others and thats what remotes allow us to do. The basic concept it that we have a remote server in which we will put our changes so that others can see them. They can the download the changes that we have made to their repositories make changes on theirs and upload them to the remote server and we can pull those changes down to our repository to get their changes. The remote repository if just a git repository, nothing magical is going on here. Git is distributed version control there is no real difference between different repositories. It makes the remote repository as a sort of the central clearing house for all the changes that are going on.</p>
<p>So lets say we have our master branch with us in our local copy. So when we do a push the remote server creates the same master branch with the same commits. At the same time git also makes a branch called <code>origin/&lt;branch-name&gt;</code> (called as a remote branch) in our local working copy, this is by default we can change that name it doesn’t need to be origin, this new branch references the remote server branch. It always tries to stay in sync with that. So every time when we do a push the local copy makes a note of the change in the remote server and syncs the remote branch with it. When other people push their changes to the remote server we need to know about them and pull that down in our working copy. This is called as a fetch, when we do this the new changes comes in the remote branch.</p>
<p>Fetch is essentially telling git sync my remote branch with the remote server, but it does not bring it into our master branch. We have to manually do a merge to bring the changes into our master branch. The remote branch is not duplicated, the commit objects are not duplicated by git, git is always smart enough to use pointer effectively instead of duplication. The remote branch is just like other branch, the only thing is that whenever you do a push or a fetch it tries to stay in sync with the remote branch. This is the usual work flow when you are working with a remote repository.</p>
<ol>
<li>Do the changes locally</li>
<li>Fetch the latest from the remote server - gets the remote branch in sync</li>
<li>Merge any work you did with just what came down from the server</li>
<li>Push the result back up to the remote server</li>
</ol>
<h2 id="Adding-remotes"><a href="#Adding-remotes" class="headerlink" title="Adding remotes"></a>Adding remotes</h2><p>You can run the <code>git remote</code> command to get the list of remotes that git knows about. To add a remote we run the following command <code>git remote add &lt;alias&gt; &lt;url&gt;</code>, the alias is what name we wanna give the remote and the url is the endopint where git can find that remote. So if we give the alias as origin then this name <code>origin</code> will be the way in which we reference the remote repository, because since we have have many remotes we don’t want to keep giving the full url to identify a remote every time we want to use it. By convention we call the primary remote as <code>origin</code>, this is just convention. Once you have run this command of adding a remote, when you run the <code>git remote</code> command you can find the alias in the listing to confirm it.</p>
<p>You can also the <code>-v</code> option to get more information while listing the remotes, it will show the url that its going to use for fetching and url that it will use for pushing, typically these are going to be the same urls but it doesn’t have to be, we can even have them as different endpoints, git is so much flexible and powerful. For example we could have a read only remote that we are fetching from and for pushing we can link to the endpoint with write access.</p>
<p>When you do <code>cat ~/.git/config</code> it will show the list of remotes there. To remove a remote all that you do is <code>git remote rm &lt;alias&gt;</code>. Adding a remote is just to let the local repository know about the presence of the remote repository, adding a remote does not pull or push the changes. So far all that we have done is just create a way in which the local repository has the ability to communicate with the remote repository.</p>
<h2 id="Creating-a-remote-branch"><a href="#Creating-a-remote-branch" class="headerlink" title="Creating a remote branch"></a>Creating a remote branch</h2><p>When you run the command <code>git push -u origin master</code>, this means that push the master branch to the remote called origin. It compresses the master branch and pushes it to the remote, and then writes the objects on the remote server and once its done with all of these it creates a new branch locally. When you do <code>cat ~/.git/config</code> these is a branch definition here and the branch has a remote which is origin. When you do <code>ls -alh ~/.git/refs/remotes</code> you can see that there is a directory create for every remote you create. We see the branches normally with <code>git branch</code> command, you can use the <code>-r</code> option to see the remote branches, to see all the branches you can use the <code>-a</code> option.</p>
<h2 id="Cloning-a-remote"><a href="#Cloning-a-remote" class="headerlink" title="Cloning a remote"></a>Cloning a remote</h2><p>Earlier we already has a project that were working on and we added a remote in that. Now lets say we are a new team member joining a company and we want to start contributing so how to we pull down the existing project first. We would run the <code>git clone &lt;url&gt; &lt;folder-name&gt;</code>, the folder name argument is optional and if we don’t give that git will automatically use the project name as the folder name. By default git will pull down only the default branch that is set on the remote, github sets the default branch as the master branch, which we can change if we want. To bring down specific branches from the remote we can use the <code>-b</code> option and specify the branches while doing git clone.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-version-control&quot;&gt;&lt;a href=&quot;#What-is-version-control&quot; class=&quot;headerlink&quot; title=&quot;What is version control ?&quot;&gt;&lt;/a&gt;What is version control ?&lt;/h2&gt;&lt;p&gt;It is a system that records and stores the changes made to the project over time thereby allowing us to go back to a previous state at any time.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>What&#39;s New in Swift 3</title>
    <link href="http://rajabishek.com/2016/Whats-new-swift-3/"/>
    <id>http://rajabishek.com/2016/Whats-new-swift-3/</id>
    <published>2016-08-05T11:45:46.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What’s-new-amp-what’s-gone"><a href="#What’s-new-amp-what’s-gone" class="headerlink" title="What’s new &amp; what’s gone"></a>What’s new &amp; what’s gone</h2><p>To be honest Swift 3 has lot of changes. If you compile in Xcode 8 beta, it will complain at your code. Apple integrated Swift 3 into Xcode 8 beta at WWDC 2016. Swift 3 is coming later this year. If you haven’t been following the Swift Evolution <a href="https://github.com/apple/swift-evolution" target="_blank" rel="external">project</a> closely, you may wonder what are the new changes and how it will affect your code, and when you should start porting your code to Swift 3. This article can help you with that.</p>
<a id="more"></a>
<h2 id="Getting-hands-on"><a href="#Getting-hands-on" class="headerlink" title="Getting hands on"></a>Getting hands on</h2><p>So where do we run Swift 3 and experiment with it ? Swift 3 preview is available in Xcode 8 beta which developers can download and try now. As Swift 3 is not officially released by Apple yet, developers have to wait till the year’s end before they can publish an app to the store that is written in Swift 3.</p>
<p>As of now along with Xcode 8 beta, Apple has included Swift 2.3 &amp; Swift 3. Swift 2.3 is the same as Swift 2.2 but with support for many of the new SDKs and Xcode features announced at WWDC 2016. Once Xcode 8 comes out of beta, you will be able to submit apps using Swift 2.3 if you have not yet migrated your code to Swift 3.</p>
<p>Its a good thing that Apple will include Swift 2.3 also in Xcode 8 stable release not creating problems for people who aren’t learning Swift 3 yet. They have really made the migration process smooth and easy. Apple has also included a Migration Assistant in Xcode to port your existing applications to Swift 3. I highly recommend you to create a new git branch and use that to get a feel of what has changed. But since you can’t release an app to the App Store until Xcode 8 is out of beta and Swift 3 is officially released, it is better to wait porting the codebase to Swift 3 until things calm down a bit.</p>
<p>Or if you would just like to experiment and try out the language now, I highly recommend the <a href="https://swiftlang.ng.bluemix.net/#/repl" target="_blank" rel="external">IBM Sandbox</a>. Its a REPL that is available online in cloud to experiment with Swift 3.</p>
<p>The best news of all is that Swift 3 aims to be the last release with breaking source changes. So looking forward, you should be able to keep your Swift code from version to version. Swift core team has promised that if they do need to break source compatibility, they will offer long deprecation cycles. That means the language has achieved source stability that will encourage more conservative companies to adopt it.</p>
<h2 id="The-changes"><a href="#The-changes" class="headerlink" title="The changes"></a>The changes</h2><p>As I said earlier they are 2 broad categories of changes that have been made. The things that are gone as of Swift 2.3 &amp; things that are new in Swift 3. Let’s start with the removed ones, since they are easier to understand and you may have encountered them before as warnings in Xcode 7.3.</p>
<h2 id="amp-–-operators"><a href="#amp-–-operators" class="headerlink" title="++ &amp; – operators"></a>++ &amp; – operators</h2><p>The increment and decrement operator are there in almost many programming languages that allow to quickly increase or decrease a value by one.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line">++<span class="built_in">count</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">count</span>) <span class="comment">//1</span></div><div class="line">--<span class="built_in">count</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">count</span>) <span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<p>However, things get a bit complicated for beginner’s when deciding which one to choose. Each of them comes in two possible variations prefix and postfix. Under the hood its operator overloading in action, they are all functions that return values which you may use or neglect. Its easy for a programmer who has already worked with a C style language, but if you think about it, it’s a bit overwhelming for the rookies, because ultimately the goal of writing neat code is that it must be simple and understandable to all. The Swift community felt that removing these operators and by encouraging the compound assignment operators instead of these, Swift can feel more natural and intuitive in nature.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Same code written using compound assignment operators</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></div><div class="line"><span class="built_in">count</span> += <span class="number">1</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">count</span>) <span class="comment">//1</span></div><div class="line"><span class="built_in">count</span> -= <span class="number">1</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">count</span>) <span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>If you would like to know more about the motivation behind this change, check out <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="external">Chris Lattner’s proposal</a> on the removal of ++ and — operators.</p>
</blockquote>
<h2 id="C-style-for-loops"><a href="#C-style-for-loops" class="headerlink" title="C style for loops"></a>C style for loops</h2><p>If you remember, while programming the frequent place where you would use the decrement and increment operator would be in for loops.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">  sum += i</div><div class="line">&#125;</div><div class="line"><span class="comment">//Sum of the first 10 numbers</span></div><div class="line"><span class="built_in">print</span>(sum)</div></pre></td></tr></table></figure></p>
<p>But now with the removal of the operators, it means that we need a change in how we write loops also. And yes, you we correct, we write for loops in a different way now. The … is called as closed range operator. It includes all the number from start to end, unlike the half open range operator ..&lt; that does not include the end value.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> &#123;</div><div class="line">  sum += i</div><div class="line">&#125;</div><div class="line"><span class="comment">//Sum of the first 10 numbers</span></div><div class="line"><span class="built_in">print</span>(sum)</div></pre></td></tr></table></figure></p>
<p>Alternatively, you can also use the for-each loop style with closures and shorthand arguments.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">(<span class="number">1</span>...<span class="number">10</span>).forEach &#123; sum += $<span class="number">0</span> &#125;</div><div class="line"><span class="comment">//Sum of the first 10 numbers</span></div><div class="line"><span class="built_in">print</span>(sum)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>If you would like to know more about the motivation behind this change, check out <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md" target="_blank" rel="external">Erica Sadun’s proposal</a> on the removal of C-style for loop.</p>
</blockquote>
<h2 id="No-more-var-in-function-parameters"><a href="#No-more-var-in-function-parameters" class="headerlink" title="No more var in function parameters"></a>No more var in function parameters</h2><p>Function parameters are by default constants in Swift, since you don’t need to modify them in its body. However, there are certain cases when you need to modify the parameters inside the function and Swift 2 allowed for declaring them as variables with the <code>var</code> keyword. You can mark a function parameter as variable with the var keyword. Once the parameter is marked as var, it creates a local copy of the value so you can modify its value in the body of the function.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNumbersInRange</span><span class="params">(<span class="keyword">var</span> n1: Int, n2: Int)</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(n1 &lt; n2)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>; i&lt;=n1/<span class="number">2</span>; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(n1%i == <span class="number">0</span>) &#123;</div><div class="line">                flag = <span class="literal">true</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (!flag) &#123;</div><div class="line">            <span class="built_in">print</span>(n1)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ++n1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">primeNumbersInRange(<span class="number">4</span>, n2: <span class="number">20</span>)</div></pre></td></tr></table></figure></p>
<p>The above is a simple program to find the prime numbers within a given range. In Swift 3 the above code would be a lot different the ++ operators would be removed, the for loop style will be different and most importantly the var key word cannot be used while declaring function parameters. </p>
<p>Swift 3 no longer allows developers to set function parameters as variables as Swift developers may get confused between <code>var</code> and <code>inout</code>. So the latest version of Swift simply removes var from function parameters. Therefore, to write the same primeNumbersInRange function in Swift 3, it requires a different approach. You’ll need to save the values of the function parameters to local variables before you proceed.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNumbersInRange</span><span class="params">(n1: Int, n2: Int)</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//We have to make a local copy explicitly, n1 &amp; n2 will always remain as constants</span></div><div class="line">    <span class="keyword">var</span> start = n1;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(start &lt; n2)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>...start/<span class="number">2</span> &#123;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(start%i == <span class="number">0</span>) &#123;</div><div class="line">                flag = <span class="literal">true</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (!flag) &#123;</div><div class="line">            <span class="built_in">print</span>(start)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        start += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">primeNumbersInRange(n1: <span class="number">4</span>, n2: <span class="number">20</span>)</div></pre></td></tr></table></figure></p>
<p>If you would like to know more about the motivation behind this change, check out the <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0003-remove-var-parameters.md" target="_blank" rel="external">proposal</a> on the removal of var keyword while declaring function parameters.</p>
<h2 id="Consistent-label-behavior-for-function-parameters"><a href="#Consistent-label-behavior-for-function-parameters" class="headerlink" title="Consistent label behavior for function parameters"></a>Consistent label behavior for function parameters</h2><p>In Swift 2 we would call the above function that we defined like this.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">primeNumbersInRange(<span class="number">4</span>, n2: <span class="number">20</span>)</div></pre></td></tr></table></figure></p>
<p>Under the scenes function parameter lists are tuples, so you can also create a tuple and pass it as an argument. The tuple’s structure needs to match the function prototype.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> argument = (<span class="number">4</span>, n2: <span class="number">20</span>)</div><div class="line">primeNumbersInRange(argument)</div></pre></td></tr></table></figure></p>
<p>As you can see, you do not need to specify the label of the first parameter in Swift 2. However, you have to specify the label of the second (and the rest of the parameters) when calling the function. This syntax is confusing for beginners, so it is designed to standardize the label behavior. In Swift 3 you would call the function like this.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">primeNumbersInRange(n1: <span class="number">4</span>, n2: <span class="number">20</span>)</div></pre></td></tr></table></figure></p>
<p>But what if you don’t want to pass the first parameter label during a function call. Then in Swift 3 while declaring the function itself you have to be explicitly state that the first parameter doesn’t require a label while calling the function.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">primeNumbersInRange</span><span class="params">(<span class="number">_</span> n1: Int, n2: Int)</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>By doing this, you can invoke the function using the old way i.e without specifying the first label. This would also initially be helpful in making you code migration process to Swift 3 easier.</p>
<blockquote>
<p>If you would like to know more about the motivation behind this change, check out the <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md" target="_blank" rel="external">proposal</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What’s-new-amp-what’s-gone&quot;&gt;&lt;a href=&quot;#What’s-new-amp-what’s-gone&quot; class=&quot;headerlink&quot; title=&quot;What’s new &amp;amp; what’s gone&quot;&gt;&lt;/a&gt;What’s new &amp;amp; what’s gone&lt;/h2&gt;&lt;p&gt;To be honest Swift 3 has lot of changes. If you compile in Xcode 8 beta, it will complain at your code. Apple integrated Swift 3 into Xcode 8 beta at WWDC 2016. Swift 3 is coming later this year. If you haven’t been following the Swift Evolution &lt;a href=&quot;https://github.com/apple/swift-evolution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project&lt;/a&gt; closely, you may wonder what are the new changes and how it will affect your code, and when you should start porting your code to Swift 3. This article can help you with that.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Adding a Search Bar in Table View</title>
    <link href="http://rajabishek.com/2016/Adding-a-search-bar-in-table-view/"/>
    <id>http://rajabishek.com/2016/Adding-a-search-bar-in-table-view/</id>
    <published>2016-08-04T11:24:43.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Filtering-amp-Searching-information"><a href="#Filtering-amp-Searching-information" class="headerlink" title="Filtering &amp; Searching information"></a>Filtering &amp; Searching information</h2><p>If you have a large dataset to present, scrolling through a large list becomes slow and frustrating. In that case, it’s essential that we allow users to search for specific items. <code>UISearchController</code> which seamlessly integrates with <code>UITableView</code> allows for quick, responsive filtering of information and solves the very same problem.</p>
<a id="more"></a>
<ul>
<li>Create a <code>UISearchController</code> instance as an instance of the view controller, give the searchResultsController while creating as nil meaning we would like to use the same table for search results also</li>
<li>Set the searchResultsUpdater property of search controller as self(view controller), meaning view controller would be responsible for updating the search results for the search controller. View controller has to conform to UISearchResultsUpdating protocol.</li>
<li>Set the <code>dimsBackgroundDuringPresentation</code> property on search controller to false, usually the search controller will dim the background while showing the search results, but since we are using the same table view to show the results we would not want this behavior.</li>
<li>On the view controller set the <code>definesPresentationContext</code> property to true, it means that the search bar must be hidden when navigating away from the view controller even though it is currently active.</li>
<li>Set the scope button titles for the search bar</li>
<li>Set the delegate of the search bar to the view controller. View controller has to conform to <code>UISearchBarDelegate</code> protocol.</li>
<li>Add the search bar as the header of the table view</li>
<li>updateSearchResultsForSearchController method is called every time a user changes the contents if the search bar text. It is method of the <code>UISearchResultsUpdating</code> protocol, it is the only compulsory method of the protocol.</li>
<li>selectedScopeButtonIndexDidChange method is called every time a different scope button is pressed. This method is from the <code>UISearchBarDelegate</code> protocol, however it is not a compulsory method.<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevicesTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> devices = [<span class="type">Device</span>(name: <span class="string">"Iphone 5c"</span>, type: <span class="string">"Mobile"</span>), <span class="type">Device</span>(name: <span class="string">"Oneplus x"</span>, type: <span class="string">"Mobile"</span>), <span class="type">Device</span>(name: <span class="string">"Macbook Pro"</span>, type: <span class="string">"Laptop"</span>), <span class="type">Device</span>(name: <span class="string">"Apple Watch"</span>, type: <span class="string">"Watch"</span>), <span class="type">Device</span>(name: <span class="string">"Moto 360"</span>, type: <span class="string">"Watch"</span>), <span class="type">Device</span>(name: <span class="string">"Samsung Galaxy"</span>, type: <span class="string">"Mobile"</span>), <span class="type">Device</span>(name: <span class="string">"Dell Vostro"</span>, type: <span class="string">"Laptop"</span>), <span class="type">Device</span>(name: <span class="string">"Dell Inspiron"</span>, type: <span class="string">"Laptop"</span>)]</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> filteredDevices = [<span class="type">Device</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> searchController = <span class="type">UISearchController</span>(searchResultsController: <span class="literal">nil</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        searchController.searchResultsUpdater = <span class="keyword">self</span></div><div class="line">        searchController.dimsBackgroundDuringPresentation = <span class="literal">false</span></div><div class="line">        definesPresentationContext = <span class="literal">true</span></div><div class="line">        searchController.searchBar.scopeButtonTitles = [<span class="string">"All"</span>, <span class="string">"Mobile"</span>, <span class="string">"Laptop"</span>, <span class="string">"Watch"</span>]</div><div class="line">        searchController.searchBar.delegate = <span class="keyword">self</span></div><div class="line">        tableView.tableHeaderView = searchController.searchBar</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// MARK: - Table view data source</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> searchController.active &#123;</div><div class="line">            <span class="keyword">return</span> filteredDevices.<span class="built_in">count</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> devices.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"Cell"</span>, forIndexPath: indexPath)</div><div class="line"></div><div class="line">        <span class="comment">// Configure the cell...</span></div><div class="line">        <span class="keyword">let</span> device = searchController.active ? filteredDevices[indexPath.row] : devices[indexPath.row]</div><div class="line">        cell.textLabel?.text = device.name</div><div class="line">        cell.detailTextLabel?.text = device.type</div><div class="line"></div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">DevicesTableViewController</span>: <span class="title">UISearchResultsUpdating</span>, <span class="title">UISearchBarDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterContentForSearchText</span><span class="params">(searchText: String, scope: String = <span class="string">"All"</span>)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> searchText == <span class="string">""</span> &#123;</div><div class="line">            filteredDevices = devices.<span class="built_in">filter</span> &#123; device <span class="keyword">in</span></div><div class="line">                <span class="keyword">return</span> (scope == <span class="string">"All"</span>) || (device.type == scope)</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            filteredDevices = devices.<span class="built_in">filter</span> &#123; device <span class="keyword">in</span></div><div class="line">                <span class="keyword">let</span> categoryMatch = (scope == <span class="string">"All"</span>) || (device.type == scope)</div><div class="line">                <span class="keyword">return</span> categoryMatch &amp;&amp; device.name.lowercaseString.containsString(searchController.searchBar.text!.lowercaseString)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        tableView.reloadData()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateSearchResultsForSearchController</span><span class="params">(searchController: UISearchController)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> searchBar = searchController.searchBar</div><div class="line">        <span class="keyword">let</span> scope = searchBar.scopeButtonTitles![searchBar.selectedScopeButtonIndex]</div><div class="line">        filterContentForSearchText(searchController.searchBar.text!, scope: scope)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBar</span><span class="params">(searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> searchBar = searchController.searchBar</div><div class="line">        <span class="keyword">let</span> scope = searchBar.scopeButtonTitles![searchBar.selectedScopeButtonIndex]</div><div class="line">        filterContentForSearchText(searchController.searchBar.text!, scope: scope)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Filtering-amp-Searching-information&quot;&gt;&lt;a href=&quot;#Filtering-amp-Searching-information&quot; class=&quot;headerlink&quot; title=&quot;Filtering &amp;amp; Searching information&quot;&gt;&lt;/a&gt;Filtering &amp;amp; Searching information&lt;/h2&gt;&lt;p&gt;If you have a large dataset to present, scrolling through a large list becomes slow and frustrating. In that case, it’s essential that we allow users to search for specific items. &lt;code&gt;UISearchController&lt;/code&gt; which seamlessly integrates with &lt;code&gt;UITableView&lt;/code&gt; allows for quick, responsive filtering of information and solves the very same problem.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sending an Email From iOS</title>
    <link href="http://rajabishek.com/2016/Sending-an-email-from-iOS/"/>
    <id>http://rajabishek.com/2016/Sending-an-email-from-iOS/</id>
    <published>2016-08-01T18:49:30.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="It’s-all-about-delegation"><a href="#It’s-all-about-delegation" class="headerlink" title="It’s all about delegation"></a>It’s all about delegation</h2><p>A simple task of sending an email is also achieved in iOS through the delegation pattern. The basic concept is that we create an email view controller where the user can type the email details and set its delegate to which it will respond back with the results once the user has finished.</p>
<a id="more"></a>
<h2 id="Procedure-Breakdown"><a href="#Procedure-Breakdown" class="headerlink" title="Procedure Breakdown"></a>Procedure Breakdown</h2><ul>
<li>1st step would be to design the mail form on the storyboard scene and add the subject,body fields as outlets and connect the send mail button as an a action</li>
<li>Now we need to import the <code>MessageUI</code> framework to send a mail from the view controller, the MessageUI framework en composes all the email related classes and protocols</li>
<li>Also make the view controller to conform to the <code>MFMailComposeViewControllerDelegate</code>, what we are actually doing is we will be presenting a view controller that will be responsible for sending the email and that controller will respond back to its delegate with information such as mail was sent successfully, mail was canceled, error in sending email etc, so we are essentially conforming to the delegate protocol as we want our view controller to be the delegate of that mail controller which we present eventually</li>
<li>Now the next step would be to create the mail view controller will the subject, recipients, body</li>
<li>Next we set the delegate of this newly created mail controller to be the view controller itself</li>
<li>Now we present the mail controller on the screen</li>
<li>Now we add the delegate methods to which the mail controller will respond back with information</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> MessageUI</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">sendEmailButtonTapped</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> mailComposeViewController = configuredMailComposeViewController()</div><div class="line">        <span class="keyword">if</span> <span class="type">MFMailComposeViewController</span>.canSendMail() &#123;</div><div class="line">            <span class="keyword">self</span>.presentViewController(mailComposeViewController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">self</span>.showSendMailErrorAlert()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configuredMailComposeViewController</span><span class="params">()</span></span> -&gt; <span class="type">MFMailComposeViewController</span> &#123;</div><div class="line">        <span class="keyword">let</span> mailComposeViewController = <span class="type">MFMailComposeViewController</span>()</div><div class="line"></div><div class="line">        <span class="comment">// Extremely important to set the --mailComposeDelegate-- property, NOT the --delegate-- property</span></div><div class="line">        mailComposeViewController.mailComposeDelegate = <span class="keyword">self</span> </div><div class="line">        </div><div class="line">        mailComposeViewController.setToRecipients([<span class="string">"someone@somewhere.com"</span>])</div><div class="line">        mailComposeViewController.setSubject(<span class="string">"Sending you an in-app e-mail..."</span>)</div><div class="line">        mailComposeViewController.setMessageBody(<span class="string">"Sending e-mail in-app is not so bad!"</span>, isHTML: <span class="literal">false</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> mailComposeViewController</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showSendMailErrorAlert</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> sendMailErrorAlert = <span class="type">UIAlertView</span>(title: <span class="string">"Could Not Send Email"</span>, message: <span class="string">"Your device could not send e-mail.  Please check e-mail configuration and try again."</span>, delegate: <span class="keyword">self</span>, cancelButtonTitle: <span class="string">"OK"</span>)</div><div class="line">        sendMailErrorAlert.show()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Conform to the MFMailComposeViewControllerDelegate protocol</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">MFMailComposeViewControllerDelegate</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">mailComposeController</span><span class="params">(controller: MFMailComposeViewController!, didFinishWithResult result: MFMailComposeResult, error: NSError!)</span></span> &#123;</div><div class="line">    	<span class="keyword">switch</span> (result) &#123;</div><div class="line">	        </div><div class="line">	        <span class="keyword">case</span> <span class="type">MFMailComposeResultSent</span>:</div><div class="line">	            <span class="built_in">print</span>(<span class="string">"The email message was queued in the user’s outbox. It is ready to send the next time the user connects to email."</span>)</div><div class="line">	        </div><div class="line">	        <span class="keyword">case</span> <span class="type">MFMailComposeResultSaved</span>:</div><div class="line">	            <span class="built_in">print</span>(<span class="string">"The email message was saved in the user’s Drafts folder."</span>)</div><div class="line">	        </div><div class="line">	        <span class="keyword">case</span> <span class="type">MFMailComposeResultCancelled</span>:</div><div class="line">	            <span class="built_in">print</span>(<span class="string">"The user canceled the operation. No email message was queued."</span>)</div><div class="line">	        </div><div class="line">	        <span class="keyword">case</span> <span class="type">MFMailComposeResultFailed</span>:</div><div class="line">	            <span class="built_in">print</span>(<span class="string">"The email message was not saved or queued, possibly due to an error."</span>)</div><div class="line">	        </div><div class="line">	        <span class="keyword">default</span>:</div><div class="line">	            <span class="built_in">print</span>(<span class="string">"An error occurred when trying to compose this email"</span>)</div><div class="line">	    &#125;</div><div class="line">        controller.dismissViewControllerAnimated(<span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;It’s-all-about-delegation&quot;&gt;&lt;a href=&quot;#It’s-all-about-delegation&quot; class=&quot;headerlink&quot; title=&quot;It’s all about delegation&quot;&gt;&lt;/a&gt;It’s all about delegation&lt;/h2&gt;&lt;p&gt;A simple task of sending an email is also achieved in iOS through the delegation pattern. The basic concept is that we create an email view controller where the user can type the email details and set its delegate to which it will respond back with the results once the user has finished.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Network Requests With NSURLSession</title>
    <link href="http://rajabishek.com/2016/Network-requests-with-NSURLSession/"/>
    <id>http://rajabishek.com/2016/Network-requests-with-NSURLSession/</id>
    <published>2016-07-20T09:47:32.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-Requests"><a href="#HTTP-Requests" class="headerlink" title="HTTP Requests"></a>HTTP Requests</h2><p>We are living in world today where information is being rapidly exchanged between every device that we use. Almost every application on the market these days consume content through a web service. While Alamofire is a rich networking library that can be used to access APIs, you can also use NSURLSessions’s asynchronous data task requests for quick and dirty REST calls. Infact Alamofire library is nothing but a wrapper around <code>NSURLSession</code> written in Swift that simplifies making HTTP requests.</p>
<a id="more"></a>
<h2 id="So-where-do-we-start"><a href="#So-where-do-we-start" class="headerlink" title="So where do we start ?"></a>So where do we start ?</h2><ul>
<li>Apple has introduced App Transport Security(ATS) in iOS 9. ATS requires SSL to be used for transferring data and it is pretty picky about how it’s implemented. Sadly this means that a lot of servers out there don’t meet the ATS requirements. So what can we do if we need to work with one of these servers? We’ll have to add an exception to App Transport Security for that server.</li>
<li>While we could just disable ATS itself, but it’s much more secure to create an exception only for the one server that we need to access which is not ATS compliant. The API that we’ll be using in this chapter is at <a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="external">http://jsonplaceholder.typicode.com/</a> so that’s what we’ll create the exception for.</li>
<li>To create the exception we’ll need to add some keys to the info.plist in our project. We’ll add a new row and select App Transport Security Settings from the drop down. That will create a dictionary for us. Then we’ll click the + sign to add a row to the dictionary and choose Exception Domains. And add a row in that dictionary. Change the new row to a dictionary and change its name to jsonplaceholder.typicode.com (note: no trailing slashes and no http or https prefix). Within the jsonplaceholder.typicode.com dictionary, add a single boolean entry <code>NSThirdPartyExceptionAllowsInsecureHTTPLoads</code> set to YES</li>
<li>JSONPlaceholder is a fake online REST API for testing and prototyping. You can check it out at <a href="http://jsonplaceholder.typicode.com" target="_blank" rel="external">http://jsonplaceholder.typicode.com</a></li>
<li>First step would be to create a <code>NSURL</code> instance of the endpoint</li>
<li>Then we need to create a <code>NSURLRequest</code> object with the url object</li>
<li>Create a session object to create a task to send the request</li>
<li>Create a task to send the request from the session object</li>
<li>Start the task to actually send the http request</li>
<li>Now once we get the response the callback that we gave will be executed, make sure we got data and no error</li>
<li>Try to transform the data into JSON (since that’s the format returned by the API)</li>
<li>Access the todo object in the JSON and print out the title</li>
<li>The default request is a GET request, to make a different kind of HTTP request we create a NSMutableRequest and set the <code>HTTPMethod</code> &amp; <code>HTTPBody</code> appropriately<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeGetRequest</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"http://jsonplaceholder.typicode.com/todos/1"</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> request = <span class="type">NSURLRequest</span>(<span class="type">URL</span>: url)</div><div class="line">        <span class="keyword">let</span> session = <span class="type">NSURLSession</span>(configuration: <span class="type">NSURLSessionConfiguration</span>.defaultSessionConfiguration())</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> task = session.dataTaskWithRequest(request, completionHandler: &#123; data, response, error <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> responseError = error &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"Error calling GET on /todos/1"</span>)</div><div class="line">                <span class="built_in">print</span>(responseError)</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> responseData = data &#123;</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> todo = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(responseData, options: []) <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>] &#123;</div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> title = todo[<span class="string">"title"</span>] &#123;</div><div class="line">                            <span class="keyword">if</span> <span class="keyword">let</span> name = title <span class="keyword">as</span>? <span class="type">String</span> &#123;</div><div class="line">                                <span class="built_in">print</span>(name)</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="built_in">print</span>(<span class="string">"The title could not be converted to a string"</span>)</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="built_in">print</span>(<span class="string">"There was not title in the dictionary"</span>)</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">print</span>(<span class="string">"Unable to convert the data to JSON"</span>)</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> &#123;</div><div class="line">                    <span class="built_in">print</span>(<span class="string">"Unable to convert the data to JSON"</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        task.resume()</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"The url is not a valid one"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makePostRequest</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: <span class="string">"http://jsonplaceholder.typicode.com/todos"</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> request = <span class="type">NSMutableURLRequest</span>(<span class="type">URL</span>: url)</div><div class="line">        request.<span class="type">HTTPMethod</span> = <span class="string">"POST"</span></div><div class="line">        <span class="keyword">let</span> newTodo = [<span class="string">"title"</span>: <span class="string">"Frist todo"</span>, <span class="string">"completed"</span>: <span class="literal">false</span>, <span class="string">"userId"</span>: <span class="number">1</span>]</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            <span class="keyword">let</span> jsonData = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.dataWithJSONObject(newTodo, options: [])</div><div class="line">            request.<span class="type">HTTPBody</span> = jsonData</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> session = <span class="type">NSURLSession</span>(configuration: <span class="type">NSURLSessionConfiguration</span>.defaultSessionConfiguration())</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> task = session.dataTaskWithRequest(request, completionHandler: &#123; data, response, error <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> responseError = error &#123;</div><div class="line">                    <span class="built_in">print</span>(<span class="string">"Error calling GET on /todos/1"</span>)</div><div class="line">                    <span class="built_in">print</span>(responseError)</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> responseData = data &#123;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> todo = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(responseData, options: []) <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>] &#123;</div><div class="line">                            <span class="keyword">if</span> <span class="keyword">let</span> id = todo[<span class="string">"id"</span>] &#123;</div><div class="line">                                <span class="keyword">if</span> <span class="keyword">let</span> identifier = id <span class="keyword">as</span>? <span class="type">Int</span> &#123;</div><div class="line">                                    <span class="built_in">print</span>(identifier)</div><div class="line">                                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="built_in">print</span>(<span class="string">"The identifier could not be converted to a integer"</span>)</div><div class="line">                                &#125;</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="built_in">print</span>(<span class="string">"There was not identifier in the dictionary"</span>)</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="built_in">print</span>(<span class="string">"Unable to convert the data to JSON"</span>)</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">                        <span class="built_in">print</span>(<span class="string">"Unable to convert the data to JSON"</span>)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            task.resume()</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Cannot create data from JSON object"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"The url is not a valid one"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP-Requests&quot;&gt;&lt;a href=&quot;#HTTP-Requests&quot; class=&quot;headerlink&quot; title=&quot;HTTP Requests&quot;&gt;&lt;/a&gt;HTTP Requests&lt;/h2&gt;&lt;p&gt;We are living in world today where information is being rapidly exchanged between every device that we use. Almost every application on the market these days consume content through a web service. While Alamofire is a rich networking library that can be used to access APIs, you can also use NSURLSessions’s asynchronous data task requests for quick and dirty REST calls. Infact Alamofire library is nothing but a wrapper around &lt;code&gt;NSURLSession&lt;/code&gt; written in Swift that simplifies making HTTP requests.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Handling Audio in iOS</title>
    <link href="http://rajabishek.com/2016/Handling-Audio-in-iOS/"/>
    <id>http://rajabishek.com/2016/Handling-Audio-in-iOS/</id>
    <published>2016-06-03T15:31:38.000Z</published>
    <updated>2017-10-29T09:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leveraging-AVFoundation-Audio-APIs"><a href="#Leveraging-AVFoundation-Audio-APIs" class="headerlink" title="Leveraging AVFoundation Audio APIs"></a>Leveraging AVFoundation Audio APIs</h2><p>Its not a rare occurrence when you will have to deal with Audio data in your iOS apps. Lets take a look at how we can use the AVFoundation framework to play, restart, stop, pause audio file in our iOS apps. We will even have a look at how we can manipulate with the audio timings, ie go back/front to a specific time and play the audio from there.</p>
<a id="more"></a>
<h2 id="Follow-step-by-step-one-at-a-time"><a href="#Follow-step-by-step-one-at-a-time" class="headerlink" title="Follow step by step, one at a time"></a>Follow step by step, one at a time</h2><ul>
<li>Drag and drop 4 buttons on the storyboard scene from the object library and style and position the segment control the way you want, the 4 buttons are start, restart, play(pause), stop. Also drag and drop a slider onto the screen. The first button is use to load the music and start playing it. Its used for nothing else. The other 3 buttons will be the most used ones. The restart button will take the music to start and play it from first, the play(pause) is a single toggle button that is use for playing and pausing, the stop button will take the music to start and stop playing it.</li>
<li>Now lets add the outlet and the actions, add an outlet for the play(pause) button because we will be changing the button title as we play and pause the music file. Add 3 actions for the restart, stop and the start button. Add an outlet and an action(changeAudioTime) for the slider.</li>
<li><p>Get the path of the music file by using the following code.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> path = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"musicname"</span>, ofType: <span class="string">"mp3"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>Once you have the path of the resource create an instance of NSURL from the path</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> audioUrl = <span class="type">NSURL</span>(fileURLWithPath: path)</div></pre></td></tr></table></figure>
</li>
<li><p>Next we need to import the AVFoundation framework in the view controller file, this allows us to use the speakers on the iphone to play the music file that we have. There are 2 steps to be done here 1st is to place the code <code>import AVFoundation</code> in top of view controller file and the other step is to click on the project settings in the file explorer, the go to build phases, and make sure you are selected on target, the click the + button in link binary with libraries, type AVFoundation in the dialog and click add.</p>
</li>
<li>Next step is to create a audio player and give it the contents of the music file that we have with us.</li>
<li>To start playing the music we can call the play method on the audio player, to pause playing the music we can call the stop method on the audio player, to change the timings of the music we can use the currentTime property of the audio player.</li>
<li>In the code below we start playing the music once the view is loaded into the memory, we can’t present the alert controller here because it can be presented only when the view controller hierarchy is set up, that is why we present the alert controller in the viewDidAppear method which is called after the view hierarchy is setup, ie after the views appear on the screen.</li>
<li>Always remember that you must stop playing the audio before manipulating with the currentTime of the audio player.</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> AVFoundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> pauseOrPlayButton: <span class="type">UIButton</span>!</div><div class="line">    </div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> audioTimer: <span class="type">UISlider</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> audioPlayer: <span class="type">AVAudioPlayer</span>? = &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> audioPath = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"audio"</span>, ofType: <span class="string">"wav"</span>) &#123;</div><div class="line">            <span class="keyword">let</span> audioUrl = <span class="type">NSURL</span>(fileURLWithPath: audioPath)</div><div class="line">            </div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">let</span> player = <span class="keyword">try</span> <span class="type">AVAudioPlayer</span>(contentsOfURL: audioUrl)</div><div class="line">                <span class="keyword">return</span> player</div><div class="line">            &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">                <span class="built_in">print</span>(error.localizedDescription)</div><div class="line">                <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Music file not found."</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredStatusBarStyle</span><span class="params">()</span></span> -&gt; <span class="type">UIStatusBarStyle</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="type">LightContent</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="comment">//Set a custom image for the slider circle for both the states</span></div><div class="line">        audioTimer.setThumbImage(<span class="type">UIImage</span>(named: <span class="string">"slider-thumbnail"</span>), forState: .<span class="type">Normal</span>)</div><div class="line">        audioTimer.setThumbImage(<span class="type">UIImage</span>(named: <span class="string">"slider-thumbnail"</span>), forState: .<span class="type">Highlighted</span>)</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = audioPlayer &#123;</div><div class="line">            player.play()</div><div class="line">            <span class="comment">//duration property is of type NSTimeInterval aka Double, therefore convert it to float</span></div><div class="line">            audioTimer.maximumValue = <span class="type">Float</span>(player.duration)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//Every 0.1 seconds iOS will call the updateAudioTimer method to keep the slider in sync</span></div><div class="line">        <span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">0.1</span>, target: <span class="keyword">self</span>, selector: #selector(<span class="type">ViewController</span>.updateAudioTimer), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidAppear(animated)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> audioPlayer == <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"Opps"</span>, message: <span class="string">"Audio Error"</span>, preferredStyle: .<span class="type">Alert</span>)</div><div class="line">            alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">"Ok"</span>, style: .<span class="type">Default</span>, handler: <span class="literal">nil</span>))</div><div class="line">            presentViewController(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">restartAudio</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = audioPlayer &#123;</div><div class="line">            player.stop()</div><div class="line">            player.currentTime = <span class="number">0</span></div><div class="line">            player.play()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">pauseOrPlayAudio</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = audioPlayer &#123;</div><div class="line">            <span class="keyword">if</span> player.playing &#123;</div><div class="line">                <span class="comment">//User pressed the pause button</span></div><div class="line">                player.stop()</div><div class="line">                pauseOrPlayButton.setTitle(<span class="string">"Play"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                player.play()</div><div class="line">                pauseOrPlayButton.setTitle(<span class="string">"Pause"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">stopAudio</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = audioPlayer &#123;</div><div class="line">            player.stop()</div><div class="line">            player.currentTime = <span class="number">0</span></div><div class="line">            pauseOrPlayButton.setTitle(<span class="string">"Play"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">changeAudioTime</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = audioPlayer &#123;</div><div class="line">            player.stop()</div><div class="line">            player.currentTime = <span class="type">NSTimeInterval</span>(audioTimer.value)</div><div class="line">            <span class="comment">//player.prepareToPlay()</span></div><div class="line">            player.play()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateAudioTimer</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> player = audioPlayer &#123;</div><div class="line">            <span class="comment">//currentTime property is of type NSTimeInterval aka Double, therefore convert it to float</span></div><div class="line">            audioTimer.value = <span class="type">Float</span>(player.currentTime)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Leveraging-AVFoundation-Audio-APIs&quot;&gt;&lt;a href=&quot;#Leveraging-AVFoundation-Audio-APIs&quot; class=&quot;headerlink&quot; title=&quot;Leveraging AVFoundation Audio APIs&quot;&gt;&lt;/a&gt;Leveraging AVFoundation Audio APIs&lt;/h2&gt;&lt;p&gt;Its not a rare occurrence when you will have to deal with Audio data in your iOS apps. Lets take a look at how we can use the AVFoundation framework to play, restart, stop, pause audio file in our iOS apps. We will even have a look at how we can manipulate with the audio timings, ie go back/front to a specific time and play the audio from there.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
